//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WcfServiceLibrary.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class ProductsEntities : DbContext
    {
        public ProductsEntities()
            : base("name=ProductsEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Assay> Assays { get; set; }
        public DbSet<att_athanPlayer> att_athanPlayer { get; set; }
        public DbSet<att_attendance> att_attendance { get; set; }
        public DbSet<att_AzanRules> att_AzanRules { get; set; }
        public DbSet<att_CityPray> att_CityPray { get; set; }
        public DbSet<att_CountryPray> att_CountryPray { get; set; }
        public DbSet<att_DayState> att_DayState { get; set; }
        public DbSet<att_DelayandAbsenceSetting> att_DelayandAbsenceSetting { get; set; }
        public DbSet<att_EmpHolidayRecord> att_EmpHolidayRecord { get; set; }
        public DbSet<att_EmpPermission> att_EmpPermission { get; set; }
        public DbSet<att_EmpSettings> att_EmpSettings { get; set; }
        public DbSet<att_FutureShift> att_FutureShift { get; set; }
        public DbSet<att_Holiday> att_Holiday { get; set; }
        public DbSet<att_Permission> att_Permission { get; set; }
        public DbSet<att_pray> att_pray { get; set; }
        public DbSet<att_PrayRule> att_PrayRule { get; set; }
        public DbSet<att_prevEmpHoliday> att_prevEmpHoliday { get; set; }
        public DbSet<att_PublicHolidayRecord> att_PublicHolidayRecord { get; set; }
        public DbSet<att_Shifts> att_Shifts { get; set; }
        public DbSet<att_ShiftsTimes> att_ShiftsTimes { get; set; }
        public DbSet<att_UsersLogs> att_UsersLogs { get; set; }
        public DbSet<att_WeekDays> att_WeekDays { get; set; }
        public DbSet<att_workTimeRecord> att_workTimeRecord { get; set; }
        public DbSet<AttachedDocumentsType> AttachedDocumentsTypes { get; set; }
        public DbSet<AttachmentOwnType> AttachmentOwnTypes { get; set; }
        public DbSet<AttachmentSystemFile> AttachmentSystemFiles { get; set; }
        public DbSet<AttDevice> AttDevices { get; set; }
        public DbSet<AttDevicesUser> AttDevicesUsers { get; set; }
        public DbSet<AttendanceCheckInOut> AttendanceCheckInOuts { get; set; }
        public DbSet<AttendanceCheckType> AttendanceCheckTypes { get; set; }
        public DbSet<AttendanceRule> AttendanceRules { get; set; }
        public DbSet<AttendanceTime> AttendanceTimes { get; set; }
        public DbSet<AzanCity> AzanCities { get; set; }
        public DbSet<AzanCountry> AzanCountries { get; set; }
        public DbSet<AzanRule> AzanRules { get; set; }
        public DbSet<AzanSound> AzanSounds { get; set; }
        public DbSet<BankHistory> BankHistories { get; set; }
        public DbSet<BankHistoryPlaning> BankHistoryPlanings { get; set; }
        public DbSet<BankInfo> BankInfoes { get; set; }
        public DbSet<BSC_Company> BSC_Company { get; set; }
        public DbSet<BSC_TimeRecordAction> BSC_TimeRecordAction { get; set; }
        public DbSet<CarsData> CarsDatas { get; set; }
        public DbSet<CashairUser> CashairUsers { get; set; }
        public DbSet<Category> Categories { get; set; }
        public DbSet<ChequesInfo> ChequesInfoes { get; set; }
        public DbSet<City> Cities { get; set; }
        public DbSet<Color> Colors { get; set; }
        public DbSet<Company> Companies { get; set; }
        public DbSet<Companies_Sup> Companies_Sup { get; set; }
        public DbSet<CompanyBranch> CompanyBranchs { get; set; }
        public DbSet<CompanyDepartJopPosition> CompanyDepartJopPositions { get; set; }
        public DbSet<CompanyDepartment> CompanyDepartments { get; set; }
        public DbSet<CompanyInfo> CompanyInfoes { get; set; }
        public DbSet<ContractItemDescription> ContractItemDescriptions { get; set; }
        public DbSet<ContractItem> ContractItems { get; set; }
        public DbSet<ContractPeriod> ContractPeriods { get; set; }
        public DbSet<Contract> Contracts { get; set; }
        public DbSet<CostCenter> CostCenters { get; set; }
        public DbSet<Country> Countries { get; set; }
        public DbSet<CountryData> CountryDatas { get; set; }
        public DbSet<CountryInformation> CountryInformations { get; set; }
        public DbSet<CurentVer> CurentVers { get; set; }
        public DbSet<CustomerGroup> CustomerGroups { get; set; }
        public DbSet<CustomerGuarantor> CustomerGuarantors { get; set; }
        public DbSet<CustomerHistory> CustomerHistories { get; set; }
        public DbSet<CustomerHistPlaningPay> CustomerHistPlaningPays { get; set; }
        public DbSet<CustomerInfo> CustomerInfoes { get; set; }
        public DbSet<DTLBalanceForFirstPeriod> DTLBalanceForFirstPeriods { get; set; }
        public DbSet<DTLBalanceForLastPeriod> DTLBalanceForLastPeriods { get; set; }
        public DbSet<DTLMaterialsRequest> DTLMaterialsRequests { get; set; }
        public DbSet<DTLPeriodicalInventory> DTLPeriodicalInventories { get; set; }
        public DbSet<DTLProcessingReturnsTechnician> DTLProcessingReturnsTechnicians { get; set; }
        public DbSet<DTLProduct> DTLProducts { get; set; }
        public DbSet<DTLPurchaseBill> DTLPurchaseBills { get; set; }
        public DbSet<DTLPurchaseCheck> DTLPurchaseChecks { get; set; }
        public DbSet<DTLPurchaseCheckTest> DTLPurchaseCheckTests { get; set; }
        public DbSet<DTLPurchaseOrder> DTLPurchaseOrders { get; set; }
        public DbSet<DTLPurchaseReturn> DTLPurchaseReturns { get; set; }
        public DbSet<DTLReceiptOfMaterialsRequest> DTLReceiptOfMaterialsRequests { get; set; }
        public DbSet<DTLSale> DTLSales { get; set; }
        public DbSet<DTLSalesReturn> DTLSalesReturns { get; set; }
        public DbSet<DTLStoreReturn> DTLStoreReturns { get; set; }
        public DbSet<DTLTransferMaterial> DTLTransferMaterials { get; set; }
        public DbSet<DTLTransferMaterialsNew> DTLTransferMaterialsNews { get; set; }
        public DbSet<DTLTransferRequest> DTLTransferRequests { get; set; }
        public DbSet<DTLTransferRequestTest> DTLTransferRequestTests { get; set; }
        public DbSet<EducationGrade> EducationGrades { get; set; }
        public DbSet<ElectronicFormsMain> ElectronicFormsMains { get; set; }
        public DbSet<EmplCour> EmplCours { get; set; }
        public DbSet<EmplDepartureData> EmplDepartureDatas { get; set; }
        public DbSet<EmplDepartureMain> EmplDepartureMains { get; set; }
        public DbSet<EmplFurlough> EmplFurloughs { get; set; }
        public DbSet<EmplLanguge> EmplLanguges { get; set; }
        public DbSet<EmployeDepartment> EmployeDepartments { get; set; }
        public DbSet<EmployedInfo> EmployedInfoes { get; set; }
        public DbSet<EmployeeSalaryItem> EmployeeSalaryItems { get; set; }
        public DbSet<EmployeesShift> EmployeesShifts { get; set; }
        public DbSet<EmploymentStatu> EmploymentStatus { get; set; }
        public DbSet<EmplPayRoll> EmplPayRolls { get; set; }
        public DbSet<EmplScholastic> EmplScholastics { get; set; }
        public DbSet<EmplWorkExperince> EmplWorkExperinces { get; set; }
        public DbSet<EmpSponsor> EmpSponsors { get; set; }
        public DbSet<EmpStatu> EmpStatus { get; set; }
        public DbSet<ExpenditureHistory> ExpenditureHistories { get; set; }
        public DbSet<forms_number> forms_number { get; set; }
        public DbSet<Gender> Genders { get; set; }
        public DbSet<GradeDegree> GradeDegrees { get; set; }
        public DbSet<HDBalanceForFirstPeriod> HDBalanceForFirstPeriods { get; set; }
        public DbSet<HDBalanceForLastPeriod> HDBalanceForLastPeriods { get; set; }
        public DbSet<HDMaterialsrequest> HDMaterialsrequests { get; set; }
        public DbSet<HDPeriodicalInventory> HDPeriodicalInventories { get; set; }
        public DbSet<HDProcessingReturnsTechnician> HDProcessingReturnsTechnicians { get; set; }
        public DbSet<HDProduct> HDProducts { get; set; }
        public DbSet<HDPurchaseBill> HDPurchaseBills { get; set; }
        public DbSet<HDPurchaseCheck> HDPurchaseChecks { get; set; }
        public DbSet<HDPurchaseOrder> HDPurchaseOrders { get; set; }
        public DbSet<HDPurchaseOrderSetting> HDPurchaseOrderSettings { get; set; }
        public DbSet<HDPurchaseReturn> HDPurchaseReturns { get; set; }
        public DbSet<HDReceiptOfMaterialsRequest> HDReceiptOfMaterialsRequests { get; set; }
        public DbSet<HDSale> HDSales { get; set; }
        public DbSet<HDSalesReturn> HDSalesReturns { get; set; }
        public DbSet<HDStoreReturn> HDStoreReturns { get; set; }
        public DbSet<HDTransferMaterial> HDTransferMaterials { get; set; }
        public DbSet<HDTransferRequest> HDTransferRequests { get; set; }
        public DbSet<HRDepartment> HRDepartments { get; set; }
        public DbSet<HRDeptContractItemRelation> HRDeptContractItemRelations { get; set; }
        public DbSet<HRJob> HRJobs { get; set; }
        public DbSet<IdBillType> IdBillTypes { get; set; }
        public DbSet<InfoCompany> InfoCompanies { get; set; }
        public DbSet<Installment> Installments { get; set; }
        public DbSet<InventoriesCompare> InventoriesCompares { get; set; }
        public DbSet<InventoryData> InventoryDatas { get; set; }
        public DbSet<InventoryDataItemFirstPeriod> InventoryDataItemFirstPeriods { get; set; }
        public DbSet<InventoryDataItemLastPeriod> InventoryDataItemLastPeriods { get; set; }
        public DbSet<InventoryDataLog> InventoryDataLogs { get; set; }
        public DbSet<InventoryMainFirstPeriod> InventoryMainFirstPeriods { get; set; }
        public DbSet<InventoryMainLastPeriod> InventoryMainLastPeriods { get; set; }
        public DbSet<InventoryPolicey> InventoryPoliceys { get; set; }
        public DbSet<Item_TransactionType> Item_TransactionType { get; set; }
        public DbSet<ItemAmount> ItemAmounts { get; set; }
        public DbSet<ItemComplex> ItemComplexes { get; set; }
        public DbSet<ItemControl> ItemControls { get; set; }
        public DbSet<ItemPriceLog> ItemPriceLogs { get; set; }
        public DbSet<Item> Items { get; set; }
        public DbSet<ItemSource> ItemSources { get; set; }
        public DbSet<ItemSupplier> ItemSuppliers { get; set; }
        public DbSet<Language> Languages { get; set; }
        public DbSet<LeavePeriodCoding> LeavePeriodCodings { get; set; }
        public DbSet<LeaveTypeDept> LeaveTypeDepts { get; set; }
        public DbSet<LeaveTypeEmployeementStatu> LeaveTypeEmployeementStatus { get; set; }
        public DbSet<LeaveTypeJob> LeaveTypeJobs { get; set; }
        public DbSet<LeavingRuleFrequencey> LeavingRuleFrequenceys { get; set; }
        public DbSet<LeavingRule> LeavingRules { get; set; }
        public DbSet<LedgerData> LedgerDatas { get; set; }
        public DbSet<Loan> Loans { get; set; }
        public DbSet<LoanPayment> LoanPayments { get; set; }
        public DbSet<MartialStatu> MartialStatus { get; set; }
        public DbSet<MaterialsPayoffReason> MaterialsPayoffReasons { get; set; }
        public DbSet<MeasureCard> MeasureCards { get; set; }
        public DbSet<MemberShip> MemberShips { get; set; }
        public DbSet<MilartyStatu> MilartyStatus { get; set; }
        public DbSet<ModelUnit> ModelUnits { get; set; }
        public DbSet<MosiratElrwatebLOG> MosiratElrwatebLOGs { get; set; }
        public DbSet<MosiratElrwtebDTL> MosiratElrwtebDTLs { get; set; }
        public DbSet<MosiratElrwtebHD> MosiratElrwtebHDs { get; set; }
        public DbSet<MotivationAndDeduction> MotivationAndDeductions { get; set; }
        public DbSet<MotivationAndDeductionsByDay> MotivationAndDeductionsByDays { get; set; }
        public DbSet<Nationality> Nationalities { get; set; }
        public DbSet<NationalType> NationalTypes { get; set; }
        public DbSet<OP_CodeMask> OP_CodeMask { get; set; }
        public DbSet<OwnershipData> OwnershipDatas { get; set; }
        public DbSet<PayingType> PayingTypes { get; set; }
        public DbSet<Payment_Data> Payment_Data { get; set; }
        public DbSet<Payment_Permission> Payment_Permission { get; set; }
        public DbSet<Permission> Permissions { get; set; }
        public DbSet<Product_Color_Realation> Product_Color_Realation { get; set; }
        public DbSet<Product_Item_Relation> Product_Item_Relation { get; set; }
        public DbSet<Product> Products { get; set; }
        public DbSet<ProdustUnit> ProdustUnits { get; set; }
        public DbSet<publicvacation> publicvacations { get; set; }
        public DbSet<PublicVacationName> PublicVacationNames { get; set; }
        public DbSet<PurchasesDataItem> PurchasesDataItems { get; set; }
        public DbSet<PurchasesItemSNAndExpiredDate> PurchasesItemSNAndExpiredDates { get; set; }
        public DbSet<PurchasesMain> PurchasesMains { get; set; }
        public DbSet<PurchasesMainReturn> PurchasesMainReturns { get; set; }
        public DbSet<PurchasesReturnsDataItem> PurchasesReturnsDataItems { get; set; }
        public DbSet<ReceiveStage> ReceiveStages { get; set; }
        public DbSet<Relgion> Relgions { get; set; }
        public DbSet<Returns_Type> Returns_Type { get; set; }
        public DbSet<ReturnsMoneyAction> ReturnsMoneyActions { get; set; }
        public DbSet<Safe_AllData> Safe_AllData { get; set; }
        public DbSet<SafeHistory> SafeHistories { get; set; }
        public DbSet<SafeHistoryPlaning> SafeHistoryPlanings { get; set; }
        public DbSet<SafeInfo> SafeInfoes { get; set; }
        public DbSet<SalaryItem> SalaryItems { get; set; }
        public DbSet<SalesDataItem> SalesDataItems { get; set; }
        public DbSet<SalesDataPublic> SalesDataPublics { get; set; }
        public DbSet<SalesItemSNAndExpiredDate> SalesItemSNAndExpiredDates { get; set; }
        public DbSet<SalesMain> SalesMains { get; set; }
        public DbSet<SalesMainPublic> SalesMainPublics { get; set; }
        public DbSet<SalesMainPublicReturn> SalesMainPublicReturns { get; set; }
        public DbSet<SalesMainReturn> SalesMainReturns { get; set; }
        public DbSet<SalesPublicReturnsDataItem> SalesPublicReturnsDataItems { get; set; }
        public DbSet<SalesReturnsDataItem> SalesReturnsDataItems { get; set; }
        public DbSet<SettingApllicationInterface> SettingApllicationInterfaces { get; set; }
        public DbSet<SettingApplicationActiveCode> SettingApplicationActiveCodes { get; set; }
        public DbSet<ShiftType> ShiftTypes { get; set; }
        public DbSet<Skill> Skills { get; set; }
        public DbSet<State> States { get; set; }
        public DbSet<StoresCompany> StoresCompanies { get; set; }
        public DbSet<SupplierGroup> SupplierGroups { get; set; }
        public DbSet<SupplierHistory> SupplierHistories { get; set; }
        public DbSet<SupplierHistPlaningPay> SupplierHistPlaningPays { get; set; }
        public DbSet<SupplierInfo> SupplierInfoes { get; set; }
        public DbSet<SupplierInfo_Detail> SupplierInfo_Detail { get; set; }
        public DbSet<SupplierUnite> SupplierUnites { get; set; }
        public DbSet<SystemExceptionLogView> SystemExceptionLogViews { get; set; }
        public DbSet<SystemMessage> SystemMessages { get; set; }
        public DbSet<TempEmployeesInfo> TempEmployeesInfoes { get; set; }
        public DbSet<TerminationReason> TerminationReasons { get; set; }
        public DbSet<TestImportFromExcel> TestImportFromExcels { get; set; }
        public DbSet<Transaction> Transactions { get; set; }
        public DbSet<TreeAccountChart> TreeAccountCharts { get; set; }
        public DbSet<TreeItemsApplication> TreeItemsApplications { get; set; }
        public DbSet<TreeMenuApplication> TreeMenuApplications { get; set; }
        public DbSet<TreeUserMenuApplication> TreeUserMenuApplications { get; set; }
        public DbSet<UnitModel> UnitModels { get; set; }
        public DbSet<UserGroup> UserGroups { get; set; }
        public DbSet<UserLogInTransaction> UserLogInTransactions { get; set; }
        public DbSet<UserName> UserNames { get; set; }
        public DbSet<vacation> vacations { get; set; }
        public DbSet<vacationType> vacationTypes { get; set; }
        public DbSet<Version> Versions { get; set; }
        public DbSet<WorkDay> WorkDays { get; set; }
        public DbSet<AllAppCategory> AllAppCategories { get; set; }
        public DbSet<BSC_TimeRecord> BSC_TimeRecord { get; set; }
        public DbSet<BSC_TimeRecordData> BSC_TimeRecordData { get; set; }
        public DbSet<ItemsTest> ItemsTests { get; set; }
        public DbSet<lawyer> lawyers { get; set; }
        public DbSet<LedgersGenral> LedgersGenrals { get; set; }
        public DbSet<MainTreeCategoryCode> MainTreeCategoryCodes { get; set; }
        public DbSet<mob_type> mob_type { get; set; }
        public DbSet<OP_RepDefine> OP_RepDefine { get; set; }
        public DbSet<Op_ReportData> Op_ReportData { get; set; }
        public DbSet<Ownership> Ownerships { get; set; }
        public DbSet<Profit> Profits { get; set; }
        public DbSet<Purchases_AllDatat> Purchases_AllDatat { get; set; }
        public DbSet<sysdiagram> sysdiagrams { get; set; }
        public DbSet<AccountantPeriodYear> AccountantPeriodYears { get; set; }
        public DbSet<att_AllYear> att_AllYear { get; set; }
        public DbSet<V_AccountantAssets> V_AccountantAssets { get; set; }
        public DbSet<V_AccountantCurrantPeriod> V_AccountantCurrantPeriod { get; set; }
        public DbSet<V_AccountantJournalGroup> V_AccountantJournalGroup { get; set; }
        public DbSet<V_AccountantJournalMethod> V_AccountantJournalMethod { get; set; }
        public DbSet<V_All_Contract_Info> V_All_Contract_Info { get; set; }
        public DbSet<V_AllBankHistory> V_AllBankHistory { get; set; }
        public DbSet<V_AllCustHist> V_AllCustHist { get; set; }
        public DbSet<v_AllempData> v_AllempData { get; set; }
        public DbSet<V_att_Attendance> V_att_Attendance { get; set; }
        public DbSet<v_contractHdData> v_contractHdData { get; set; }
        public DbSet<V_Contracts_Payment_Details> V_Contracts_Payment_Details { get; set; }
        public DbSet<V_CostCenters> V_CostCenters { get; set; }
        public DbSet<V_Country> V_Country { get; set; }
        public DbSet<V_CountryState> V_CountryState { get; set; }
        public DbSet<V_CountryStateTown> V_CountryStateTown { get; set; }
        public DbSet<V_CustomerNetAccount> V_CustomerNetAccount { get; set; }
        public DbSet<v_FullContractData> v_FullContractData { get; set; }
        public DbSet<v_GeturentStock> v_GeturentStock { get; set; }
        public DbSet<v_InventoryDataStock> v_InventoryDataStock { get; set; }
        public DbSet<V_ItemAmount> V_ItemAmount { get; set; }
        public DbSet<V_ItemsFullData> V_ItemsFullData { get; set; }
        public DbSet<V_ItemsSearch> V_ItemsSearch { get; set; }
        public DbSet<V_LoanData> V_LoanData { get; set; }
        public DbSet<V_MosiratElrwateb> V_MosiratElrwateb { get; set; }
        public DbSet<V_PurchaseReturnAllData> V_PurchaseReturnAllData { get; set; }
        public DbSet<v_ReceiptOfMaterialsRequest> v_ReceiptOfMaterialsRequest { get; set; }
        public DbSet<v_RequestData> v_RequestData { get; set; }
        public DbSet<v_RequestDtlwithCurentStock> v_RequestDtlwithCurentStock { get; set; }
        public DbSet<V_SalesAllData> V_SalesAllData { get; set; }
        public DbSet<V_SalesAllDataPublic> V_SalesAllDataPublic { get; set; }
        public DbSet<V_SalesPublicReturnAllData> V_SalesPublicReturnAllData { get; set; }
        public DbSet<V_SalesReturnAllData> V_SalesReturnAllData { get; set; }
        public DbSet<v_StoreReturns> v_StoreReturns { get; set; }
        public DbSet<V_SummaryBank> V_SummaryBank { get; set; }
        public DbSet<V_SummaryCash> V_SummaryCash { get; set; }
        public DbSet<V_SummaryCustomer> V_SummaryCustomer { get; set; }
        public DbSet<V_SummaryPurchaseReturn> V_SummaryPurchaseReturn { get; set; }
        public DbSet<V_SummaryPurchases> V_SummaryPurchases { get; set; }
        public DbSet<V_SummarySalesPublic> V_SummarySalesPublic { get; set; }
        public DbSet<V_SummarySalesPublicReturn> V_SummarySalesPublicReturn { get; set; }
        public DbSet<V_SummarySalesReturn> V_SummarySalesReturn { get; set; }
        public DbSet<V_SupplierNetAccount> V_SupplierNetAccount { get; set; }
        public DbSet<V_SupplierSummaryAccount> V_SupplierSummaryAccount { get; set; }
        public DbSet<View_HRDE> View_HRDE { get; set; }
        public DbSet<View_MosiratElrwatepRPR> View_MosiratElrwatepRPR { get; set; }
        public DbSet<TestClass> TestClasses { get; set; }
        public DbSet<Test> Tests { get; set; }
    
        [EdmFunction("ProductsEntities", "Fn_Check_Type")]
        public virtual IQueryable<Fn_Check_Type_Result> Fn_Check_Type(Nullable<int> empid, string datefrom, string dateto)
        {
            var empidParameter = empid.HasValue ?
                new ObjectParameter("empid", empid) :
                new ObjectParameter("empid", typeof(int));
    
            var datefromParameter = datefrom != null ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(string));
    
            var datetoParameter = dateto != null ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fn_Check_Type_Result>("[ProductsEntities].[Fn_Check_Type](@empid, @datefrom, @dateto)", empidParameter, datefromParameter, datetoParameter);
        }
    
        [EdmFunction("ProductsEntities", "fnGetParentMessage")]
        public virtual IQueryable<fnGetParentMessage_Result> fnGetParentMessage(Nullable<long> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnGetParentMessage_Result>("[ProductsEntities].[fnGetParentMessage](@Id)", idParameter);
        }
    
        [EdmFunction("ProductsEntities", "newfnGetParentMessage")]
        public virtual IQueryable<newfnGetParentMessage_Result> newfnGetParentMessage(Nullable<long> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<newfnGetParentMessage_Result>("[ProductsEntities].[newfnGetParentMessage](@Id)", idParameter);
        }
    
        [EdmFunction("ProductsEntities", "F_Num")]
        public virtual IQueryable<F_Num_Result> F_Num(Nullable<int> n)
        {
            var nParameter = n.HasValue ?
                new ObjectParameter("N", n) :
                new ObjectParameter("N", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<F_Num_Result>("[ProductsEntities].[F_Num](@N)", nParameter);
        }
    
        [EdmFunction("ProductsEntities", "Private_GetConstraintType")]
        public virtual IQueryable<Private_GetConstraintType_Result> Private_GetConstraintType(Nullable<int> tableObjectId, string constraintName)
        {
            var tableObjectIdParameter = tableObjectId.HasValue ?
                new ObjectParameter("TableObjectId", tableObjectId) :
                new ObjectParameter("TableObjectId", typeof(int));
    
            var constraintNameParameter = constraintName != null ?
                new ObjectParameter("ConstraintName", constraintName) :
                new ObjectParameter("ConstraintName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Private_GetConstraintType_Result>("[ProductsEntities].[Private_GetConstraintType](@TableObjectId, @ConstraintName)", tableObjectIdParameter, constraintNameParameter);
        }
    
        [EdmFunction("ProductsEntities", "Private_GetDataTypeOrComputedColumnDefinition")]
        public virtual IQueryable<Private_GetDataTypeOrComputedColumnDefinition_Result> Private_GetDataTypeOrComputedColumnDefinition(Nullable<int> userTypeId, Nullable<int> maxLength, Nullable<int> precision, Nullable<int> scale, string collationName, Nullable<int> objectId, Nullable<int> columnId, Nullable<bool> returnDetails)
        {
            var userTypeIdParameter = userTypeId.HasValue ?
                new ObjectParameter("UserTypeId", userTypeId) :
                new ObjectParameter("UserTypeId", typeof(int));
    
            var maxLengthParameter = maxLength.HasValue ?
                new ObjectParameter("MaxLength", maxLength) :
                new ObjectParameter("MaxLength", typeof(int));
    
            var precisionParameter = precision.HasValue ?
                new ObjectParameter("Precision", precision) :
                new ObjectParameter("Precision", typeof(int));
    
            var scaleParameter = scale.HasValue ?
                new ObjectParameter("Scale", scale) :
                new ObjectParameter("Scale", typeof(int));
    
            var collationNameParameter = collationName != null ?
                new ObjectParameter("CollationName", collationName) :
                new ObjectParameter("CollationName", typeof(string));
    
            var objectIdParameter = objectId.HasValue ?
                new ObjectParameter("ObjectId", objectId) :
                new ObjectParameter("ObjectId", typeof(int));
    
            var columnIdParameter = columnId.HasValue ?
                new ObjectParameter("ColumnId", columnId) :
                new ObjectParameter("ColumnId", typeof(int));
    
            var returnDetailsParameter = returnDetails.HasValue ?
                new ObjectParameter("ReturnDetails", returnDetails) :
                new ObjectParameter("ReturnDetails", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Private_GetDataTypeOrComputedColumnDefinition_Result>("[ProductsEntities].[Private_GetDataTypeOrComputedColumnDefinition](@UserTypeId, @MaxLength, @Precision, @Scale, @CollationName, @ObjectId, @ColumnId, @ReturnDetails)", userTypeIdParameter, maxLengthParameter, precisionParameter, scaleParameter, collationNameParameter, objectIdParameter, columnIdParameter, returnDetailsParameter);
        }
    
        [EdmFunction("ProductsEntities", "Private_GetDefaultConstraintDefinition")]
        public virtual IQueryable<Private_GetDefaultConstraintDefinition_Result> Private_GetDefaultConstraintDefinition(Nullable<int> objectId, Nullable<int> columnId, Nullable<bool> returnDetails)
        {
            var objectIdParameter = objectId.HasValue ?
                new ObjectParameter("ObjectId", objectId) :
                new ObjectParameter("ObjectId", typeof(int));
    
            var columnIdParameter = columnId.HasValue ?
                new ObjectParameter("ColumnId", columnId) :
                new ObjectParameter("ColumnId", typeof(int));
    
            var returnDetailsParameter = returnDetails.HasValue ?
                new ObjectParameter("ReturnDetails", returnDetails) :
                new ObjectParameter("ReturnDetails", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Private_GetDefaultConstraintDefinition_Result>("[ProductsEntities].[Private_GetDefaultConstraintDefinition](@ObjectId, @ColumnId, @ReturnDetails)", objectIdParameter, columnIdParameter, returnDetailsParameter);
        }
    
        [EdmFunction("ProductsEntities", "Private_GetFullTypeName")]
        public virtual IQueryable<Private_GetFullTypeName_Result> Private_GetFullTypeName(Nullable<int> typeId, Nullable<int> length, Nullable<int> precision, Nullable<int> scale, string collationName)
        {
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("TypeId", typeId) :
                new ObjectParameter("TypeId", typeof(int));
    
            var lengthParameter = length.HasValue ?
                new ObjectParameter("Length", length) :
                new ObjectParameter("Length", typeof(int));
    
            var precisionParameter = precision.HasValue ?
                new ObjectParameter("Precision", precision) :
                new ObjectParameter("Precision", typeof(int));
    
            var scaleParameter = scale.HasValue ?
                new ObjectParameter("Scale", scale) :
                new ObjectParameter("Scale", typeof(int));
    
            var collationNameParameter = collationName != null ?
                new ObjectParameter("CollationName", collationName) :
                new ObjectParameter("CollationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Private_GetFullTypeName_Result>("[ProductsEntities].[Private_GetFullTypeName](@TypeId, @Length, @Precision, @Scale, @CollationName)", typeIdParameter, lengthParameter, precisionParameter, scaleParameter, collationNameParameter);
        }
    
        [EdmFunction("ProductsEntities", "Private_GetIdentityDefinition")]
        public virtual IQueryable<Private_GetIdentityDefinition_Result> Private_GetIdentityDefinition(Nullable<int> objectId, Nullable<int> columnId, Nullable<bool> returnDetails)
        {
            var objectIdParameter = objectId.HasValue ?
                new ObjectParameter("ObjectId", objectId) :
                new ObjectParameter("ObjectId", typeof(int));
    
            var columnIdParameter = columnId.HasValue ?
                new ObjectParameter("ColumnId", columnId) :
                new ObjectParameter("ColumnId", typeof(int));
    
            var returnDetailsParameter = returnDetails.HasValue ?
                new ObjectParameter("ReturnDetails", returnDetails) :
                new ObjectParameter("ReturnDetails", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Private_GetIdentityDefinition_Result>("[ProductsEntities].[Private_GetIdentityDefinition](@ObjectId, @ColumnId, @ReturnDetails)", objectIdParameter, columnIdParameter, returnDetailsParameter);
        }
    
        [EdmFunction("ProductsEntities", "Private_GetQuotedTableNameForConstraint")]
        public virtual IQueryable<Private_GetQuotedTableNameForConstraint_Result> Private_GetQuotedTableNameForConstraint(Nullable<int> constraintObjectId)
        {
            var constraintObjectIdParameter = constraintObjectId.HasValue ?
                new ObjectParameter("ConstraintObjectId", constraintObjectId) :
                new ObjectParameter("ConstraintObjectId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Private_GetQuotedTableNameForConstraint_Result>("[ProductsEntities].[Private_GetQuotedTableNameForConstraint](@ConstraintObjectId)", constraintObjectIdParameter);
        }
    
        [EdmFunction("ProductsEntities", "Private_ResolveSchemaName")]
        public virtual IQueryable<Private_ResolveSchemaName_Result> Private_ResolveSchemaName(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Private_ResolveSchemaName_Result>("[ProductsEntities].[Private_ResolveSchemaName](@Name)", nameParameter);
        }
    
        public virtual int account_DTLConstraints_SelectSumAccount(Nullable<long> periodID)
        {
            var periodIDParameter = periodID.HasValue ?
                new ObjectParameter("PeriodID", periodID) :
                new ObjectParameter("PeriodID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("account_DTLConstraints_SelectSumAccount", periodIDParameter);
        }
    
        public virtual int account_DTLConstraints_SelectSumAccountByDate(Nullable<long> periodID, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var periodIDParameter = periodID.HasValue ?
                new ObjectParameter("PeriodID", periodID) :
                new ObjectParameter("PeriodID", typeof(long));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("account_DTLConstraints_SelectSumAccountByDate", periodIDParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<AccountantPeriodYear_SelectAll_Result> AccountantPeriodYear_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AccountantPeriodYear_SelectAll_Result>("AccountantPeriodYear_SelectAll");
        }
    
        public virtual ObjectResult<AccountantPeriodYear_SelectOne_Result> AccountantPeriodYear_SelectOne(Nullable<long> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AccountantPeriodYear_SelectOne_Result>("AccountantPeriodYear_SelectOne", idParameter);
        }
    
        public virtual ObjectResult<AccountantPeriodYear_SelectOpenPeriod_Result> AccountantPeriodYear_SelectOpenPeriod()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AccountantPeriodYear_SelectOpenPeriod_Result>("AccountantPeriodYear_SelectOpenPeriod");
        }
    
        public virtual int ADDSystemExceptionLogRecord(string methodName, Nullable<long> lineNum, string className, string exceptionDetails, string machineName, string ip, string domainName, Nullable<long> lUU)
        {
            var methodNameParameter = methodName != null ?
                new ObjectParameter("MethodName", methodName) :
                new ObjectParameter("MethodName", typeof(string));
    
            var lineNumParameter = lineNum.HasValue ?
                new ObjectParameter("LineNum", lineNum) :
                new ObjectParameter("LineNum", typeof(long));
    
            var classNameParameter = className != null ?
                new ObjectParameter("ClassName", className) :
                new ObjectParameter("ClassName", typeof(string));
    
            var exceptionDetailsParameter = exceptionDetails != null ?
                new ObjectParameter("ExceptionDetails", exceptionDetails) :
                new ObjectParameter("ExceptionDetails", typeof(string));
    
            var machineNameParameter = machineName != null ?
                new ObjectParameter("MachineName", machineName) :
                new ObjectParameter("MachineName", typeof(string));
    
            var ipParameter = ip != null ?
                new ObjectParameter("Ip", ip) :
                new ObjectParameter("Ip", typeof(string));
    
            var domainNameParameter = domainName != null ?
                new ObjectParameter("DomainName", domainName) :
                new ObjectParameter("DomainName", typeof(string));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ADDSystemExceptionLogRecord", methodNameParameter, lineNumParameter, classNameParameter, exceptionDetailsParameter, machineNameParameter, ipParameter, domainNameParameter, lUUParameter);
        }
    
        public virtual ObjectResult<AllDept_Result> AllDept()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AllDept_Result>("AllDept");
        }
    
        public virtual ObjectResult<AllEMP_Result> AllEMP()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AllEMP_Result>("AllEMP");
        }
    
        public virtual ObjectResult<ALLEmpDepartment_Result> ALLEmpDepartment()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ALLEmpDepartment_Result>("ALLEmpDepartment");
        }
    
        public virtual int att_athanPlayer_Insert(string name, string path, ObjectParameter iD)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("att_athanPlayer_Insert", nameParameter, pathParameter, iD);
        }
    
        public virtual ObjectResult<att_Attendance_ActionsNotCompleteSelectByDates_Result> att_Attendance_ActionsNotCompleteSelectByDates(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<att_Attendance_ActionsNotCompleteSelectByDates_Result>("att_Attendance_ActionsNotCompleteSelectByDates", startDateParameter, endDateParameter);
        }
    
        public virtual int att_Attendance_ActionsNotCompleteUpdate(Nullable<long> id, Nullable<int> startTime, Nullable<int> endTime, Nullable<long> iDIn, Nullable<long> iDOut)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(long));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(int));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(int));
    
            var iDInParameter = iDIn.HasValue ?
                new ObjectParameter("IDIn", iDIn) :
                new ObjectParameter("IDIn", typeof(long));
    
            var iDOutParameter = iDOut.HasValue ?
                new ObjectParameter("IDOut", iDOut) :
                new ObjectParameter("IDOut", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("att_Attendance_ActionsNotCompleteUpdate", idParameter, startTimeParameter, endTimeParameter, iDInParameter, iDOutParameter);
        }
    
        public virtual int att_attendance_Delete(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("att_attendance_Delete", iDParameter);
        }
    
        public virtual int att_attendance_DeleteByDate(Nullable<long> empId, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(long));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("att_attendance_DeleteByDate", empIdParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<att_Attendance_DeptAttendance_Result> att_Attendance_DeptAttendance(Nullable<long> id, Nullable<System.DateTime> fromDate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(long));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<att_Attendance_DeptAttendance_Result>("att_Attendance_DeptAttendance", idParameter, fromDateParameter);
        }
    
        public virtual int att_attendance_Insert(Nullable<System.DateTime> date, Nullable<int> dayId, Nullable<long> shiftsId, Nullable<long> workTimeId, Nullable<long> empID, Nullable<int> startWorkTime, Nullable<int> startWorkTimeDelay, Nullable<bool> isStartPray, Nullable<int> startPrayId, Nullable<int> endWorkTime, Nullable<bool> isEndPray, Nullable<int> endPrayId, Nullable<System.DateTime> dateEndWorkTime, Nullable<int> attendStartBefore, Nullable<int> attendStartAfter, Nullable<int> attendEndBefore, Nullable<int> attendEndAfter, Nullable<int> startPrayBefore, Nullable<int> startPrayAfter, Nullable<int> endPrayBefore, Nullable<int> endPrayAfter, Nullable<bool> attendance, Nullable<int> timeIn, Nullable<bool> leave, Nullable<int> timeOut, Nullable<System.DateTime> dateOut, Nullable<int> typePermission, Nullable<int> startPermission, Nullable<int> endPermission, Nullable<bool> isHoliday, Nullable<int> holidayType, Nullable<bool> manualIn, Nullable<bool> manualOut, Nullable<bool> isClose, Nullable<int> machineIn, Nullable<int> machineOut, Nullable<bool> isDelay, Nullable<bool> isOverTime, Nullable<bool> isOverBefore, Nullable<bool> isOverAfter, Nullable<bool> isAllIn, Nullable<bool> isAllOut, Nullable<bool> isHolidayOverTime, Nullable<int> overTimeRate, Nullable<int> periodStartDelay, Nullable<int> periodEndDelay, Nullable<bool> isDiscount, Nullable<int> stateDay, Nullable<bool> isOpenShift, ObjectParameter iD)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var dayIdParameter = dayId.HasValue ?
                new ObjectParameter("DayId", dayId) :
                new ObjectParameter("DayId", typeof(int));
    
            var shiftsIdParameter = shiftsId.HasValue ?
                new ObjectParameter("ShiftsId", shiftsId) :
                new ObjectParameter("ShiftsId", typeof(long));
    
            var workTimeIdParameter = workTimeId.HasValue ?
                new ObjectParameter("workTimeId", workTimeId) :
                new ObjectParameter("workTimeId", typeof(long));
    
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("empID", empID) :
                new ObjectParameter("empID", typeof(long));
    
            var startWorkTimeParameter = startWorkTime.HasValue ?
                new ObjectParameter("StartWorkTime", startWorkTime) :
                new ObjectParameter("StartWorkTime", typeof(int));
    
            var startWorkTimeDelayParameter = startWorkTimeDelay.HasValue ?
                new ObjectParameter("StartWorkTimeDelay", startWorkTimeDelay) :
                new ObjectParameter("StartWorkTimeDelay", typeof(int));
    
            var isStartPrayParameter = isStartPray.HasValue ?
                new ObjectParameter("isStartPray", isStartPray) :
                new ObjectParameter("isStartPray", typeof(bool));
    
            var startPrayIdParameter = startPrayId.HasValue ?
                new ObjectParameter("StartPrayId", startPrayId) :
                new ObjectParameter("StartPrayId", typeof(int));
    
            var endWorkTimeParameter = endWorkTime.HasValue ?
                new ObjectParameter("EndWorkTime", endWorkTime) :
                new ObjectParameter("EndWorkTime", typeof(int));
    
            var isEndPrayParameter = isEndPray.HasValue ?
                new ObjectParameter("isEndPray", isEndPray) :
                new ObjectParameter("isEndPray", typeof(bool));
    
            var endPrayIdParameter = endPrayId.HasValue ?
                new ObjectParameter("EndPrayId", endPrayId) :
                new ObjectParameter("EndPrayId", typeof(int));
    
            var dateEndWorkTimeParameter = dateEndWorkTime.HasValue ?
                new ObjectParameter("DateEndWorkTime", dateEndWorkTime) :
                new ObjectParameter("DateEndWorkTime", typeof(System.DateTime));
    
            var attendStartBeforeParameter = attendStartBefore.HasValue ?
                new ObjectParameter("attendStartBefore", attendStartBefore) :
                new ObjectParameter("attendStartBefore", typeof(int));
    
            var attendStartAfterParameter = attendStartAfter.HasValue ?
                new ObjectParameter("attendStartAfter", attendStartAfter) :
                new ObjectParameter("attendStartAfter", typeof(int));
    
            var attendEndBeforeParameter = attendEndBefore.HasValue ?
                new ObjectParameter("attendEndBefore", attendEndBefore) :
                new ObjectParameter("attendEndBefore", typeof(int));
    
            var attendEndAfterParameter = attendEndAfter.HasValue ?
                new ObjectParameter("attendEndAfter", attendEndAfter) :
                new ObjectParameter("attendEndAfter", typeof(int));
    
            var startPrayBeforeParameter = startPrayBefore.HasValue ?
                new ObjectParameter("StartPrayBefore", startPrayBefore) :
                new ObjectParameter("StartPrayBefore", typeof(int));
    
            var startPrayAfterParameter = startPrayAfter.HasValue ?
                new ObjectParameter("StartPrayAfter", startPrayAfter) :
                new ObjectParameter("StartPrayAfter", typeof(int));
    
            var endPrayBeforeParameter = endPrayBefore.HasValue ?
                new ObjectParameter("EndPrayBefore", endPrayBefore) :
                new ObjectParameter("EndPrayBefore", typeof(int));
    
            var endPrayAfterParameter = endPrayAfter.HasValue ?
                new ObjectParameter("EndPrayAfter", endPrayAfter) :
                new ObjectParameter("EndPrayAfter", typeof(int));
    
            var attendanceParameter = attendance.HasValue ?
                new ObjectParameter("attendance", attendance) :
                new ObjectParameter("attendance", typeof(bool));
    
            var timeInParameter = timeIn.HasValue ?
                new ObjectParameter("TimeIn", timeIn) :
                new ObjectParameter("TimeIn", typeof(int));
    
            var leaveParameter = leave.HasValue ?
                new ObjectParameter("leave", leave) :
                new ObjectParameter("leave", typeof(bool));
    
            var timeOutParameter = timeOut.HasValue ?
                new ObjectParameter("TimeOut", timeOut) :
                new ObjectParameter("TimeOut", typeof(int));
    
            var dateOutParameter = dateOut.HasValue ?
                new ObjectParameter("dateOut", dateOut) :
                new ObjectParameter("dateOut", typeof(System.DateTime));
    
            var typePermissionParameter = typePermission.HasValue ?
                new ObjectParameter("typePermission", typePermission) :
                new ObjectParameter("typePermission", typeof(int));
    
            var startPermissionParameter = startPermission.HasValue ?
                new ObjectParameter("StartPermission", startPermission) :
                new ObjectParameter("StartPermission", typeof(int));
    
            var endPermissionParameter = endPermission.HasValue ?
                new ObjectParameter("EndPermission", endPermission) :
                new ObjectParameter("EndPermission", typeof(int));
    
            var isHolidayParameter = isHoliday.HasValue ?
                new ObjectParameter("isHoliday", isHoliday) :
                new ObjectParameter("isHoliday", typeof(bool));
    
            var holidayTypeParameter = holidayType.HasValue ?
                new ObjectParameter("HolidayType", holidayType) :
                new ObjectParameter("HolidayType", typeof(int));
    
            var manualInParameter = manualIn.HasValue ?
                new ObjectParameter("manualIn", manualIn) :
                new ObjectParameter("manualIn", typeof(bool));
    
            var manualOutParameter = manualOut.HasValue ?
                new ObjectParameter("manualOut", manualOut) :
                new ObjectParameter("manualOut", typeof(bool));
    
            var isCloseParameter = isClose.HasValue ?
                new ObjectParameter("isClose", isClose) :
                new ObjectParameter("isClose", typeof(bool));
    
            var machineInParameter = machineIn.HasValue ?
                new ObjectParameter("machineIn", machineIn) :
                new ObjectParameter("machineIn", typeof(int));
    
            var machineOutParameter = machineOut.HasValue ?
                new ObjectParameter("machineOut", machineOut) :
                new ObjectParameter("machineOut", typeof(int));
    
            var isDelayParameter = isDelay.HasValue ?
                new ObjectParameter("isDelay", isDelay) :
                new ObjectParameter("isDelay", typeof(bool));
    
            var isOverTimeParameter = isOverTime.HasValue ?
                new ObjectParameter("isOverTime", isOverTime) :
                new ObjectParameter("isOverTime", typeof(bool));
    
            var isOverBeforeParameter = isOverBefore.HasValue ?
                new ObjectParameter("isOverBefore", isOverBefore) :
                new ObjectParameter("isOverBefore", typeof(bool));
    
            var isOverAfterParameter = isOverAfter.HasValue ?
                new ObjectParameter("isOverAfter", isOverAfter) :
                new ObjectParameter("isOverAfter", typeof(bool));
    
            var isAllInParameter = isAllIn.HasValue ?
                new ObjectParameter("isAllIn", isAllIn) :
                new ObjectParameter("isAllIn", typeof(bool));
    
            var isAllOutParameter = isAllOut.HasValue ?
                new ObjectParameter("isAllOut", isAllOut) :
                new ObjectParameter("isAllOut", typeof(bool));
    
            var isHolidayOverTimeParameter = isHolidayOverTime.HasValue ?
                new ObjectParameter("isHolidayOverTime", isHolidayOverTime) :
                new ObjectParameter("isHolidayOverTime", typeof(bool));
    
            var overTimeRateParameter = overTimeRate.HasValue ?
                new ObjectParameter("overTimeRate", overTimeRate) :
                new ObjectParameter("overTimeRate", typeof(int));
    
            var periodStartDelayParameter = periodStartDelay.HasValue ?
                new ObjectParameter("periodStartDelay", periodStartDelay) :
                new ObjectParameter("periodStartDelay", typeof(int));
    
            var periodEndDelayParameter = periodEndDelay.HasValue ?
                new ObjectParameter("PeriodEndDelay", periodEndDelay) :
                new ObjectParameter("PeriodEndDelay", typeof(int));
    
            var isDiscountParameter = isDiscount.HasValue ?
                new ObjectParameter("IsDiscount", isDiscount) :
                new ObjectParameter("IsDiscount", typeof(bool));
    
            var stateDayParameter = stateDay.HasValue ?
                new ObjectParameter("StateDay", stateDay) :
                new ObjectParameter("StateDay", typeof(int));
    
            var isOpenShiftParameter = isOpenShift.HasValue ?
                new ObjectParameter("IsOpenShift", isOpenShift) :
                new ObjectParameter("IsOpenShift", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("att_attendance_Insert", dateParameter, dayIdParameter, shiftsIdParameter, workTimeIdParameter, empIDParameter, startWorkTimeParameter, startWorkTimeDelayParameter, isStartPrayParameter, startPrayIdParameter, endWorkTimeParameter, isEndPrayParameter, endPrayIdParameter, dateEndWorkTimeParameter, attendStartBeforeParameter, attendStartAfterParameter, attendEndBeforeParameter, attendEndAfterParameter, startPrayBeforeParameter, startPrayAfterParameter, endPrayBeforeParameter, endPrayAfterParameter, attendanceParameter, timeInParameter, leaveParameter, timeOutParameter, dateOutParameter, typePermissionParameter, startPermissionParameter, endPermissionParameter, isHolidayParameter, holidayTypeParameter, manualInParameter, manualOutParameter, isCloseParameter, machineInParameter, machineOutParameter, isDelayParameter, isOverTimeParameter, isOverBeforeParameter, isOverAfterParameter, isAllInParameter, isAllOutParameter, isHolidayOverTimeParameter, overTimeRateParameter, periodStartDelayParameter, periodEndDelayParameter, isDiscountParameter, stateDayParameter, isOpenShiftParameter, iD);
        }
    
        public virtual int att_Attendance_InsertNewOpenShift(Nullable<long> oldID, Nullable<long> tempID, Nullable<int> timeIn, Nullable<int> machineIn, ObjectParameter newID)
        {
            var oldIDParameter = oldID.HasValue ?
                new ObjectParameter("OldID", oldID) :
                new ObjectParameter("OldID", typeof(long));
    
            var tempIDParameter = tempID.HasValue ?
                new ObjectParameter("tempID", tempID) :
                new ObjectParameter("tempID", typeof(long));
    
            var timeInParameter = timeIn.HasValue ?
                new ObjectParameter("timeIn", timeIn) :
                new ObjectParameter("timeIn", typeof(int));
    
            var machineInParameter = machineIn.HasValue ?
                new ObjectParameter("machineIn", machineIn) :
                new ObjectParameter("machineIn", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("att_Attendance_InsertNewOpenShift", oldIDParameter, tempIDParameter, timeInParameter, machineInParameter, newID);
        }
    
        public virtual ObjectResult<att_Attendance_Logs_SelectDayFreeTemplates_Result> att_Attendance_Logs_SelectDayFreeTemplates(Nullable<long> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<att_Attendance_Logs_SelectDayFreeTemplates_Result>("att_Attendance_Logs_SelectDayFreeTemplates", idParameter);
        }
    
        public virtual ObjectResult<att_attendance_SelectAll_Result> att_attendance_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<att_attendance_SelectAll_Result>("att_attendance_SelectAll");
        }
    
        public virtual ObjectResult<att_attendance_SelectAllByDateEmp_Result> att_attendance_SelectAllByDateEmp(Nullable<long> empID, Nullable<System.DateTime> dataFrom, Nullable<System.DateTime> dateTo)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("empID", empID) :
                new ObjectParameter("empID", typeof(long));
    
            var dataFromParameter = dataFrom.HasValue ?
                new ObjectParameter("dataFrom", dataFrom) :
                new ObjectParameter("dataFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<att_attendance_SelectAllByDateEmp_Result>("att_attendance_SelectAllByDateEmp", empIDParameter, dataFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<att_attendance_SelectOne_Result> att_attendance_SelectOne(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<att_attendance_SelectOne_Result>("att_attendance_SelectOne", iDParameter);
        }
    
        public virtual int att_attendance_Update(Nullable<long> iD, Nullable<System.DateTime> date, Nullable<int> dayId, Nullable<long> shiftsId, Nullable<long> workTimeId, Nullable<long> empID, Nullable<int> startWorkTime, Nullable<int> startWorkTimeDelay, Nullable<bool> isStartPray, Nullable<int> startPrayId, Nullable<int> endWorkTime, Nullable<bool> isEndPray, Nullable<int> endPrayId, Nullable<System.DateTime> dateEndWorkTime, Nullable<int> attendStartBefore, Nullable<int> attendStartAfter, Nullable<int> attendEndBefore, Nullable<int> attendEndAfter, Nullable<int> startPrayBefore, Nullable<int> startPrayAfter, Nullable<int> endPrayBefore, Nullable<int> endPrayAfter, Nullable<bool> attendance, Nullable<int> timeIn, Nullable<bool> leave, Nullable<int> timeOut, Nullable<System.DateTime> dateOut, Nullable<int> typePermission, Nullable<int> startPermission, Nullable<int> endPermission, Nullable<bool> isHoliday, Nullable<int> holidayType, Nullable<bool> manualIn, Nullable<bool> manualOut, Nullable<bool> isClose, Nullable<int> machineIn, Nullable<int> machineOut, Nullable<bool> isDelay, Nullable<bool> isOverTime, Nullable<bool> isOverBefore, Nullable<bool> isOverAfter, Nullable<bool> isAllIn, Nullable<bool> isAllOut, Nullable<bool> isHolidayOverTime, Nullable<int> overTimeRate, Nullable<int> periodStartDelay, Nullable<int> periodEndDelay, Nullable<bool> isDiscount, Nullable<int> stateDay, Nullable<bool> isOpenShift)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var dayIdParameter = dayId.HasValue ?
                new ObjectParameter("DayId", dayId) :
                new ObjectParameter("DayId", typeof(int));
    
            var shiftsIdParameter = shiftsId.HasValue ?
                new ObjectParameter("ShiftsId", shiftsId) :
                new ObjectParameter("ShiftsId", typeof(long));
    
            var workTimeIdParameter = workTimeId.HasValue ?
                new ObjectParameter("workTimeId", workTimeId) :
                new ObjectParameter("workTimeId", typeof(long));
    
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("empID", empID) :
                new ObjectParameter("empID", typeof(long));
    
            var startWorkTimeParameter = startWorkTime.HasValue ?
                new ObjectParameter("StartWorkTime", startWorkTime) :
                new ObjectParameter("StartWorkTime", typeof(int));
    
            var startWorkTimeDelayParameter = startWorkTimeDelay.HasValue ?
                new ObjectParameter("StartWorkTimeDelay", startWorkTimeDelay) :
                new ObjectParameter("StartWorkTimeDelay", typeof(int));
    
            var isStartPrayParameter = isStartPray.HasValue ?
                new ObjectParameter("isStartPray", isStartPray) :
                new ObjectParameter("isStartPray", typeof(bool));
    
            var startPrayIdParameter = startPrayId.HasValue ?
                new ObjectParameter("StartPrayId", startPrayId) :
                new ObjectParameter("StartPrayId", typeof(int));
    
            var endWorkTimeParameter = endWorkTime.HasValue ?
                new ObjectParameter("EndWorkTime", endWorkTime) :
                new ObjectParameter("EndWorkTime", typeof(int));
    
            var isEndPrayParameter = isEndPray.HasValue ?
                new ObjectParameter("isEndPray", isEndPray) :
                new ObjectParameter("isEndPray", typeof(bool));
    
            var endPrayIdParameter = endPrayId.HasValue ?
                new ObjectParameter("EndPrayId", endPrayId) :
                new ObjectParameter("EndPrayId", typeof(int));
    
            var dateEndWorkTimeParameter = dateEndWorkTime.HasValue ?
                new ObjectParameter("DateEndWorkTime", dateEndWorkTime) :
                new ObjectParameter("DateEndWorkTime", typeof(System.DateTime));
    
            var attendStartBeforeParameter = attendStartBefore.HasValue ?
                new ObjectParameter("attendStartBefore", attendStartBefore) :
                new ObjectParameter("attendStartBefore", typeof(int));
    
            var attendStartAfterParameter = attendStartAfter.HasValue ?
                new ObjectParameter("attendStartAfter", attendStartAfter) :
                new ObjectParameter("attendStartAfter", typeof(int));
    
            var attendEndBeforeParameter = attendEndBefore.HasValue ?
                new ObjectParameter("attendEndBefore", attendEndBefore) :
                new ObjectParameter("attendEndBefore", typeof(int));
    
            var attendEndAfterParameter = attendEndAfter.HasValue ?
                new ObjectParameter("attendEndAfter", attendEndAfter) :
                new ObjectParameter("attendEndAfter", typeof(int));
    
            var startPrayBeforeParameter = startPrayBefore.HasValue ?
                new ObjectParameter("StartPrayBefore", startPrayBefore) :
                new ObjectParameter("StartPrayBefore", typeof(int));
    
            var startPrayAfterParameter = startPrayAfter.HasValue ?
                new ObjectParameter("StartPrayAfter", startPrayAfter) :
                new ObjectParameter("StartPrayAfter", typeof(int));
    
            var endPrayBeforeParameter = endPrayBefore.HasValue ?
                new ObjectParameter("EndPrayBefore", endPrayBefore) :
                new ObjectParameter("EndPrayBefore", typeof(int));
    
            var endPrayAfterParameter = endPrayAfter.HasValue ?
                new ObjectParameter("EndPrayAfter", endPrayAfter) :
                new ObjectParameter("EndPrayAfter", typeof(int));
    
            var attendanceParameter = attendance.HasValue ?
                new ObjectParameter("attendance", attendance) :
                new ObjectParameter("attendance", typeof(bool));
    
            var timeInParameter = timeIn.HasValue ?
                new ObjectParameter("TimeIn", timeIn) :
                new ObjectParameter("TimeIn", typeof(int));
    
            var leaveParameter = leave.HasValue ?
                new ObjectParameter("leave", leave) :
                new ObjectParameter("leave", typeof(bool));
    
            var timeOutParameter = timeOut.HasValue ?
                new ObjectParameter("TimeOut", timeOut) :
                new ObjectParameter("TimeOut", typeof(int));
    
            var dateOutParameter = dateOut.HasValue ?
                new ObjectParameter("dateOut", dateOut) :
                new ObjectParameter("dateOut", typeof(System.DateTime));
    
            var typePermissionParameter = typePermission.HasValue ?
                new ObjectParameter("typePermission", typePermission) :
                new ObjectParameter("typePermission", typeof(int));
    
            var startPermissionParameter = startPermission.HasValue ?
                new ObjectParameter("StartPermission", startPermission) :
                new ObjectParameter("StartPermission", typeof(int));
    
            var endPermissionParameter = endPermission.HasValue ?
                new ObjectParameter("EndPermission", endPermission) :
                new ObjectParameter("EndPermission", typeof(int));
    
            var isHolidayParameter = isHoliday.HasValue ?
                new ObjectParameter("isHoliday", isHoliday) :
                new ObjectParameter("isHoliday", typeof(bool));
    
            var holidayTypeParameter = holidayType.HasValue ?
                new ObjectParameter("HolidayType", holidayType) :
                new ObjectParameter("HolidayType", typeof(int));
    
            var manualInParameter = manualIn.HasValue ?
                new ObjectParameter("manualIn", manualIn) :
                new ObjectParameter("manualIn", typeof(bool));
    
            var manualOutParameter = manualOut.HasValue ?
                new ObjectParameter("manualOut", manualOut) :
                new ObjectParameter("manualOut", typeof(bool));
    
            var isCloseParameter = isClose.HasValue ?
                new ObjectParameter("isClose", isClose) :
                new ObjectParameter("isClose", typeof(bool));
    
            var machineInParameter = machineIn.HasValue ?
                new ObjectParameter("machineIn", machineIn) :
                new ObjectParameter("machineIn", typeof(int));
    
            var machineOutParameter = machineOut.HasValue ?
                new ObjectParameter("machineOut", machineOut) :
                new ObjectParameter("machineOut", typeof(int));
    
            var isDelayParameter = isDelay.HasValue ?
                new ObjectParameter("isDelay", isDelay) :
                new ObjectParameter("isDelay", typeof(bool));
    
            var isOverTimeParameter = isOverTime.HasValue ?
                new ObjectParameter("isOverTime", isOverTime) :
                new ObjectParameter("isOverTime", typeof(bool));
    
            var isOverBeforeParameter = isOverBefore.HasValue ?
                new ObjectParameter("isOverBefore", isOverBefore) :
                new ObjectParameter("isOverBefore", typeof(bool));
    
            var isOverAfterParameter = isOverAfter.HasValue ?
                new ObjectParameter("isOverAfter", isOverAfter) :
                new ObjectParameter("isOverAfter", typeof(bool));
    
            var isAllInParameter = isAllIn.HasValue ?
                new ObjectParameter("isAllIn", isAllIn) :
                new ObjectParameter("isAllIn", typeof(bool));
    
            var isAllOutParameter = isAllOut.HasValue ?
                new ObjectParameter("isAllOut", isAllOut) :
                new ObjectParameter("isAllOut", typeof(bool));
    
            var isHolidayOverTimeParameter = isHolidayOverTime.HasValue ?
                new ObjectParameter("isHolidayOverTime", isHolidayOverTime) :
                new ObjectParameter("isHolidayOverTime", typeof(bool));
    
            var overTimeRateParameter = overTimeRate.HasValue ?
                new ObjectParameter("overTimeRate", overTimeRate) :
                new ObjectParameter("overTimeRate", typeof(int));
    
            var periodStartDelayParameter = periodStartDelay.HasValue ?
                new ObjectParameter("periodStartDelay", periodStartDelay) :
                new ObjectParameter("periodStartDelay", typeof(int));
    
            var periodEndDelayParameter = periodEndDelay.HasValue ?
                new ObjectParameter("PeriodEndDelay", periodEndDelay) :
                new ObjectParameter("PeriodEndDelay", typeof(int));
    
            var isDiscountParameter = isDiscount.HasValue ?
                new ObjectParameter("IsDiscount", isDiscount) :
                new ObjectParameter("IsDiscount", typeof(bool));
    
            var stateDayParameter = stateDay.HasValue ?
                new ObjectParameter("StateDay", stateDay) :
                new ObjectParameter("StateDay", typeof(int));
    
            var isOpenShiftParameter = isOpenShift.HasValue ?
                new ObjectParameter("IsOpenShift", isOpenShift) :
                new ObjectParameter("IsOpenShift", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("att_attendance_Update", iDParameter, dateParameter, dayIdParameter, shiftsIdParameter, workTimeIdParameter, empIDParameter, startWorkTimeParameter, startWorkTimeDelayParameter, isStartPrayParameter, startPrayIdParameter, endWorkTimeParameter, isEndPrayParameter, endPrayIdParameter, dateEndWorkTimeParameter, attendStartBeforeParameter, attendStartAfterParameter, attendEndBeforeParameter, attendEndAfterParameter, startPrayBeforeParameter, startPrayAfterParameter, endPrayBeforeParameter, endPrayAfterParameter, attendanceParameter, timeInParameter, leaveParameter, timeOutParameter, dateOutParameter, typePermissionParameter, startPermissionParameter, endPermissionParameter, isHolidayParameter, holidayTypeParameter, manualInParameter, manualOutParameter, isCloseParameter, machineInParameter, machineOutParameter, isDelayParameter, isOverTimeParameter, isOverBeforeParameter, isOverAfterParameter, isAllInParameter, isAllOutParameter, isHolidayOverTimeParameter, overTimeRateParameter, periodStartDelayParameter, periodEndDelayParameter, isDiscountParameter, stateDayParameter, isOpenShiftParameter);
        }
    
        public virtual int att_attendance_UpdateAll(Nullable<long> iD, Nullable<int> timeIn, Nullable<int> timeOut, Nullable<System.DateTime> dateOut)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var timeInParameter = timeIn.HasValue ?
                new ObjectParameter("TimeIn", timeIn) :
                new ObjectParameter("TimeIn", typeof(int));
    
            var timeOutParameter = timeOut.HasValue ?
                new ObjectParameter("TimeOut", timeOut) :
                new ObjectParameter("TimeOut", typeof(int));
    
            var dateOutParameter = dateOut.HasValue ?
                new ObjectParameter("dateOut", dateOut) :
                new ObjectParameter("dateOut", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("att_attendance_UpdateAll", iDParameter, timeInParameter, timeOutParameter, dateOutParameter);
        }
    
        public virtual int att_attendance_UpdateHoliday(Nullable<System.DateTime> date, Nullable<long> empID, Nullable<bool> isHoliday, Nullable<int> holidayType, Nullable<int> stateDay)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("empID", empID) :
                new ObjectParameter("empID", typeof(long));
    
            var isHolidayParameter = isHoliday.HasValue ?
                new ObjectParameter("isHoliday", isHoliday) :
                new ObjectParameter("isHoliday", typeof(bool));
    
            var holidayTypeParameter = holidayType.HasValue ?
                new ObjectParameter("HolidayType", holidayType) :
                new ObjectParameter("HolidayType", typeof(int));
    
            var stateDayParameter = stateDay.HasValue ?
                new ObjectParameter("StateDay", stateDay) :
                new ObjectParameter("StateDay", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("att_attendance_UpdateHoliday", dateParameter, empIDParameter, isHolidayParameter, holidayTypeParameter, stateDayParameter);
        }
    
        public virtual int att_attendance_UpdateInManually(Nullable<long> iD, Nullable<int> timeIn, Nullable<bool> manualIn)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var timeInParameter = timeIn.HasValue ?
                new ObjectParameter("TimeIn", timeIn) :
                new ObjectParameter("TimeIn", typeof(int));
    
            var manualInParameter = manualIn.HasValue ?
                new ObjectParameter("manualIn", manualIn) :
                new ObjectParameter("manualIn", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("att_attendance_UpdateInManually", iDParameter, timeInParameter, manualInParameter);
        }
    
        public virtual int att_Attendance_UpdateInTime(Nullable<long> id, Nullable<int> timeIn, Nullable<long> tempID, Nullable<long> empID, Nullable<int> machineIn)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(long));
    
            var timeInParameter = timeIn.HasValue ?
                new ObjectParameter("timeIn", timeIn) :
                new ObjectParameter("timeIn", typeof(int));
    
            var tempIDParameter = tempID.HasValue ?
                new ObjectParameter("tempID", tempID) :
                new ObjectParameter("tempID", typeof(long));
    
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("empID", empID) :
                new ObjectParameter("empID", typeof(long));
    
            var machineInParameter = machineIn.HasValue ?
                new ObjectParameter("machineIn", machineIn) :
                new ObjectParameter("machineIn", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("att_Attendance_UpdateInTime", idParameter, timeInParameter, tempIDParameter, empIDParameter, machineInParameter);
        }
    
        public virtual int att_attendance_UpdateIsClose(Nullable<bool> isClose, Nullable<long> iD)
        {
            var isCloseParameter = isClose.HasValue ?
                new ObjectParameter("isClose", isClose) :
                new ObjectParameter("isClose", typeof(bool));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("att_attendance_UpdateIsClose", isCloseParameter, iDParameter);
        }
    
        public virtual int att_attendance_UpdateManually(Nullable<long> iD, Nullable<int> timeIn, Nullable<int> timeOut, Nullable<System.DateTime> dateOut, Nullable<bool> manualIn, Nullable<bool> manualOut)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var timeInParameter = timeIn.HasValue ?
                new ObjectParameter("TimeIn", timeIn) :
                new ObjectParameter("TimeIn", typeof(int));
    
            var timeOutParameter = timeOut.HasValue ?
                new ObjectParameter("TimeOut", timeOut) :
                new ObjectParameter("TimeOut", typeof(int));
    
            var dateOutParameter = dateOut.HasValue ?
                new ObjectParameter("dateOut", dateOut) :
                new ObjectParameter("dateOut", typeof(System.DateTime));
    
            var manualInParameter = manualIn.HasValue ?
                new ObjectParameter("manualIn", manualIn) :
                new ObjectParameter("manualIn", typeof(bool));
    
            var manualOutParameter = manualOut.HasValue ?
                new ObjectParameter("manualOut", manualOut) :
                new ObjectParameter("manualOut", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("att_attendance_UpdateManually", iDParameter, timeInParameter, timeOutParameter, dateOutParameter, manualInParameter, manualOutParameter);
        }
    
        public virtual int att_Attendance_UpdateOutTime(Nullable<long> id, Nullable<int> timeOut, Nullable<long> tempID, Nullable<long> empID, Nullable<int> machineOut)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(long));
    
            var timeOutParameter = timeOut.HasValue ?
                new ObjectParameter("timeOut", timeOut) :
                new ObjectParameter("timeOut", typeof(int));
    
            var tempIDParameter = tempID.HasValue ?
                new ObjectParameter("tempID", tempID) :
                new ObjectParameter("tempID", typeof(long));
    
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("empID", empID) :
                new ObjectParameter("empID", typeof(long));
    
            var machineOutParameter = machineOut.HasValue ?
                new ObjectParameter("machineOut", machineOut) :
                new ObjectParameter("machineOut", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("att_Attendance_UpdateOutTime", idParameter, timeOutParameter, tempIDParameter, empIDParameter, machineOutParameter);
        }
    
        public virtual int att_Attendance_UpdatePermission(Nullable<long> workTimeID, Nullable<long> empID, Nullable<System.DateTime> dayDate, Nullable<long> permissionID, Nullable<int> startPermission, Nullable<int> endPermission)
        {
            var workTimeIDParameter = workTimeID.HasValue ?
                new ObjectParameter("workTimeID", workTimeID) :
                new ObjectParameter("workTimeID", typeof(long));
    
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("empID", empID) :
                new ObjectParameter("empID", typeof(long));
    
            var dayDateParameter = dayDate.HasValue ?
                new ObjectParameter("dayDate", dayDate) :
                new ObjectParameter("dayDate", typeof(System.DateTime));
    
            var permissionIDParameter = permissionID.HasValue ?
                new ObjectParameter("permissionID", permissionID) :
                new ObjectParameter("permissionID", typeof(long));
    
            var startPermissionParameter = startPermission.HasValue ?
                new ObjectParameter("startPermission", startPermission) :
                new ObjectParameter("startPermission", typeof(int));
    
            var endPermissionParameter = endPermission.HasValue ?
                new ObjectParameter("endPermission", endPermission) :
                new ObjectParameter("endPermission", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("att_Attendance_UpdatePermission", workTimeIDParameter, empIDParameter, dayDateParameter, permissionIDParameter, startPermissionParameter, endPermissionParameter);
        }
    
        public virtual int att_attendance_UpdatePrayRate(Nullable<System.DateTime> date, Nullable<long> startPrayId, Nullable<long> endPrayId, Nullable<long> startPrayBefore, Nullable<long> startPrayAfter, Nullable<long> endPrayBefore, Nullable<long> endPrayAfter)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var startPrayIdParameter = startPrayId.HasValue ?
                new ObjectParameter("StartPrayId", startPrayId) :
                new ObjectParameter("StartPrayId", typeof(long));
    
            var endPrayIdParameter = endPrayId.HasValue ?
                new ObjectParameter("EndPrayId", endPrayId) :
                new ObjectParameter("EndPrayId", typeof(long));
    
            var startPrayBeforeParameter = startPrayBefore.HasValue ?
                new ObjectParameter("StartPrayBefore", startPrayBefore) :
                new ObjectParameter("StartPrayBefore", typeof(long));
    
            var startPrayAfterParameter = startPrayAfter.HasValue ?
                new ObjectParameter("StartPrayAfter", startPrayAfter) :
                new ObjectParameter("StartPrayAfter", typeof(long));
    
            var endPrayBeforeParameter = endPrayBefore.HasValue ?
                new ObjectParameter("EndPrayBefore", endPrayBefore) :
                new ObjectParameter("EndPrayBefore", typeof(long));
    
            var endPrayAfterParameter = endPrayAfter.HasValue ?
                new ObjectParameter("EndPrayAfter", endPrayAfter) :
                new ObjectParameter("EndPrayAfter", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("att_attendance_UpdatePrayRate", dateParameter, startPrayIdParameter, endPrayIdParameter, startPrayBeforeParameter, startPrayAfterParameter, endPrayBeforeParameter, endPrayAfterParameter);
        }
    
        public virtual int att_attendance_UpdatePUblicHoliday(Nullable<System.DateTime> date, Nullable<bool> isHoliday, Nullable<int> holidayType, Nullable<int> stateDay)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var isHolidayParameter = isHoliday.HasValue ?
                new ObjectParameter("isHoliday", isHoliday) :
                new ObjectParameter("isHoliday", typeof(bool));
    
            var holidayTypeParameter = holidayType.HasValue ?
                new ObjectParameter("HolidayType", holidayType) :
                new ObjectParameter("HolidayType", typeof(int));
    
            var stateDayParameter = stateDay.HasValue ?
                new ObjectParameter("StateDay", stateDay) :
                new ObjectParameter("StateDay", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("att_attendance_UpdatePUblicHoliday", dateParameter, isHolidayParameter, holidayTypeParameter, stateDayParameter);
        }
    
        public virtual int att_attendance_UpdateWeeklyHoliday(Nullable<bool> isHoliday, Nullable<int> stateDay)
        {
            var isHolidayParameter = isHoliday.HasValue ?
                new ObjectParameter("isHoliday", isHoliday) :
                new ObjectParameter("isHoliday", typeof(bool));
    
            var stateDayParameter = stateDay.HasValue ?
                new ObjectParameter("StateDay", stateDay) :
                new ObjectParameter("StateDay", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("att_attendance_UpdateWeeklyHoliday", isHolidayParameter, stateDayParameter);
        }
    
        public virtual ObjectResult<att_AttendanceRecordsInPeriod_Result> att_AttendanceRecordsInPeriod(Nullable<System.DateTime> minDate, Nullable<System.DateTime> maxDate)
        {
            var minDateParameter = minDate.HasValue ?
                new ObjectParameter("MinDate", minDate) :
                new ObjectParameter("MinDate", typeof(System.DateTime));
    
            var maxDateParameter = maxDate.HasValue ?
                new ObjectParameter("MaxDate", maxDate) :
                new ObjectParameter("MaxDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<att_AttendanceRecordsInPeriod_Result>("att_AttendanceRecordsInPeriod", minDateParameter, maxDateParameter);
        }
    
        public virtual int att_AzanRules_Delete(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("att_AzanRules_Delete", iDParameter);
        }
    
        public virtual int att_AzanRules_Insert(Nullable<long> countryID, Nullable<long> cityID, Nullable<double> latitude, Nullable<double> longtude, Nullable<long> fileID, string filePath, Nullable<long> calcID, Nullable<long> zoneTime, Nullable<long> juristicID, Nullable<long> lUU, Nullable<System.DateTime> lUD, ObjectParameter iD)
        {
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(long));
    
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(long));
    
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(double));
    
            var longtudeParameter = longtude.HasValue ?
                new ObjectParameter("Longtude", longtude) :
                new ObjectParameter("Longtude", typeof(double));
    
            var fileIDParameter = fileID.HasValue ?
                new ObjectParameter("FileID", fileID) :
                new ObjectParameter("FileID", typeof(long));
    
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            var calcIDParameter = calcID.HasValue ?
                new ObjectParameter("CalcID", calcID) :
                new ObjectParameter("CalcID", typeof(long));
    
            var zoneTimeParameter = zoneTime.HasValue ?
                new ObjectParameter("ZoneTime", zoneTime) :
                new ObjectParameter("ZoneTime", typeof(long));
    
            var juristicIDParameter = juristicID.HasValue ?
                new ObjectParameter("JuristicID", juristicID) :
                new ObjectParameter("JuristicID", typeof(long));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("att_AzanRules_Insert", countryIDParameter, cityIDParameter, latitudeParameter, longtudeParameter, fileIDParameter, filePathParameter, calcIDParameter, zoneTimeParameter, juristicIDParameter, lUUParameter, lUDParameter, iD);
        }
    
        public virtual ObjectResult<att_AzanRules_SelectAll_Result> att_AzanRules_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<att_AzanRules_SelectAll_Result>("att_AzanRules_SelectAll");
        }
    
        public virtual ObjectResult<att_AzanRules_SelectOne_Result> att_AzanRules_SelectOne(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<att_AzanRules_SelectOne_Result>("att_AzanRules_SelectOne", iDParameter);
        }
    
        public virtual int att_AzanRules_Update(Nullable<long> iD, Nullable<long> countryID, Nullable<long> cityID, Nullable<double> latitude, Nullable<double> longtude, Nullable<long> fileID, string filePath, Nullable<long> calcID, Nullable<long> zoneTime, Nullable<long> juristicID, Nullable<long> lUU, Nullable<System.DateTime> lUD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(long));
    
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(long));
    
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(double));
    
            var longtudeParameter = longtude.HasValue ?
                new ObjectParameter("Longtude", longtude) :
                new ObjectParameter("Longtude", typeof(double));
    
            var fileIDParameter = fileID.HasValue ?
                new ObjectParameter("FileID", fileID) :
                new ObjectParameter("FileID", typeof(long));
    
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            var calcIDParameter = calcID.HasValue ?
                new ObjectParameter("CalcID", calcID) :
                new ObjectParameter("CalcID", typeof(long));
    
            var zoneTimeParameter = zoneTime.HasValue ?
                new ObjectParameter("ZoneTime", zoneTime) :
                new ObjectParameter("ZoneTime", typeof(long));
    
            var juristicIDParameter = juristicID.HasValue ?
                new ObjectParameter("JuristicID", juristicID) :
                new ObjectParameter("JuristicID", typeof(long));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("att_AzanRules_Update", iDParameter, countryIDParameter, cityIDParameter, latitudeParameter, longtudeParameter, fileIDParameter, filePathParameter, calcIDParameter, zoneTimeParameter, juristicIDParameter, lUUParameter, lUDParameter);
        }
    
        public virtual int att_CityPray_Insert(string idCode, Nullable<long> countryId, string nameE, string name, string @long, string lat, string zone, ObjectParameter iD)
        {
            var idCodeParameter = idCode != null ?
                new ObjectParameter("IdCode", idCode) :
                new ObjectParameter("IdCode", typeof(string));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(long));
    
            var nameEParameter = nameE != null ?
                new ObjectParameter("NameE", nameE) :
                new ObjectParameter("NameE", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var longParameter = @long != null ?
                new ObjectParameter("Long", @long) :
                new ObjectParameter("Long", typeof(string));
    
            var latParameter = lat != null ?
                new ObjectParameter("Lat", lat) :
                new ObjectParameter("Lat", typeof(string));
    
            var zoneParameter = zone != null ?
                new ObjectParameter("Zone", zone) :
                new ObjectParameter("Zone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("att_CityPray_Insert", idCodeParameter, countryIdParameter, nameEParameter, nameParameter, longParameter, latParameter, zoneParameter, iD);
        }
    
        public virtual int att_CountryPray_Insert(string idCode, string nameE, string name, ObjectParameter iD)
        {
            var idCodeParameter = idCode != null ?
                new ObjectParameter("IdCode", idCode) :
                new ObjectParameter("IdCode", typeof(string));
    
            var nameEParameter = nameE != null ?
                new ObjectParameter("NameE", nameE) :
                new ObjectParameter("NameE", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("att_CountryPray_Insert", idCodeParameter, nameEParameter, nameParameter, iD);
        }
    
        public virtual ObjectResult<att_DisplaySalaryItem_Result> att_DisplaySalaryItem(Nullable<long> monthNUM, Nullable<long> yearNUM)
        {
            var monthNUMParameter = monthNUM.HasValue ?
                new ObjectParameter("MonthNUM", monthNUM) :
                new ObjectParameter("MonthNUM", typeof(long));
    
            var yearNUMParameter = yearNUM.HasValue ?
                new ObjectParameter("yearNUM", yearNUM) :
                new ObjectParameter("yearNUM", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<att_DisplaySalaryItem_Result>("att_DisplaySalaryItem", monthNUMParameter, yearNUMParameter);
        }
    
        public virtual int att_EmpHolidayRecord_Delete(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("att_EmpHolidayRecord_Delete", iDParameter);
        }
    
        public virtual int att_EmpHolidayRecord_Insert(Nullable<long> empId, Nullable<int> holidayEmpId, Nullable<System.DateTime> dateFrom, Nullable<int> numberDay, ObjectParameter iD)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(long));
    
            var holidayEmpIdParameter = holidayEmpId.HasValue ?
                new ObjectParameter("HolidayEmpId", holidayEmpId) :
                new ObjectParameter("HolidayEmpId", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var numberDayParameter = numberDay.HasValue ?
                new ObjectParameter("NumberDay", numberDay) :
                new ObjectParameter("NumberDay", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("att_EmpHolidayRecord_Insert", empIdParameter, holidayEmpIdParameter, dateFromParameter, numberDayParameter, iD);
        }
    
        public virtual ObjectResult<att_EmpHolidayRecord_SelectAll_Result> att_EmpHolidayRecord_SelectAll(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<long> empId)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<att_EmpHolidayRecord_SelectAll_Result>("att_EmpHolidayRecord_SelectAll", dateFromParameter, dateToParameter, empIdParameter);
        }
    
        public virtual ObjectResult<att_EmpHolidayRecord_SelectOne_Result> att_EmpHolidayRecord_SelectOne(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<att_EmpHolidayRecord_SelectOne_Result>("att_EmpHolidayRecord_SelectOne", iDParameter);
        }
    
        public virtual int att_EmpHolidayRecord_Update(Nullable<long> iD, Nullable<long> empId, Nullable<int> holidayEmpId, Nullable<System.DateTime> dateFrom, Nullable<int> numberDay)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(long));
    
            var holidayEmpIdParameter = holidayEmpId.HasValue ?
                new ObjectParameter("HolidayEmpId", holidayEmpId) :
                new ObjectParameter("HolidayEmpId", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var numberDayParameter = numberDay.HasValue ?
                new ObjectParameter("NumberDay", numberDay) :
                new ObjectParameter("NumberDay", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("att_EmpHolidayRecord_Update", iDParameter, empIdParameter, holidayEmpIdParameter, dateFromParameter, numberDayParameter);
        }
    
        public virtual int att_EmpPermission_Delete(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("att_EmpPermission_Delete", iDParameter);
        }
    
        public virtual int att_EmpPermission_Insert(Nullable<int> permissionType, Nullable<System.DateTime> dayDate, Nullable<System.DateTime> permissionDate, Nullable<long> empID, Nullable<long> workTimeID, Nullable<int> timeFrom, Nullable<int> timeTo, string reason, string notes, ObjectParameter iD)
        {
            var permissionTypeParameter = permissionType.HasValue ?
                new ObjectParameter("PermissionType", permissionType) :
                new ObjectParameter("PermissionType", typeof(int));
    
            var dayDateParameter = dayDate.HasValue ?
                new ObjectParameter("DayDate", dayDate) :
                new ObjectParameter("DayDate", typeof(System.DateTime));
    
            var permissionDateParameter = permissionDate.HasValue ?
                new ObjectParameter("PermissionDate", permissionDate) :
                new ObjectParameter("PermissionDate", typeof(System.DateTime));
    
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(long));
    
            var workTimeIDParameter = workTimeID.HasValue ?
                new ObjectParameter("WorkTimeID", workTimeID) :
                new ObjectParameter("WorkTimeID", typeof(long));
    
            var timeFromParameter = timeFrom.HasValue ?
                new ObjectParameter("TimeFrom", timeFrom) :
                new ObjectParameter("TimeFrom", typeof(int));
    
            var timeToParameter = timeTo.HasValue ?
                new ObjectParameter("TimeTo", timeTo) :
                new ObjectParameter("TimeTo", typeof(int));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("att_EmpPermission_Insert", permissionTypeParameter, dayDateParameter, permissionDateParameter, empIDParameter, workTimeIDParameter, timeFromParameter, timeToParameter, reasonParameter, notesParameter, iD);
        }
    
        public virtual ObjectResult<att_EmpPermission_SelectAll_Result> att_EmpPermission_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<att_EmpPermission_SelectAll_Result>("att_EmpPermission_SelectAll");
        }
    
        public virtual ObjectResult<att_EmpPermission_SelectDayPeriods_Result> att_EmpPermission_SelectDayPeriods(Nullable<long> empID, Nullable<System.DateTime> dateStart)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("empID", empID) :
                new ObjectParameter("empID", typeof(long));
    
            var dateStartParameter = dateStart.HasValue ?
                new ObjectParameter("dateStart", dateStart) :
                new ObjectParameter("dateStart", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<att_EmpPermission_SelectDayPeriods_Result>("att_EmpPermission_SelectDayPeriods", empIDParameter, dateStartParameter);
        }
    
        public virtual ObjectResult<att_EmpPermission_SelectOne_Result> att_EmpPermission_SelectOne(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<att_EmpPermission_SelectOne_Result>("att_EmpPermission_SelectOne", iDParameter);
        }
    
        public virtual int att_EmpPermission_Update(Nullable<long> iD, Nullable<int> permissionType, Nullable<System.DateTime> dayDate, Nullable<System.DateTime> permissionDate, Nullable<long> empID, Nullable<long> workTimeID, Nullable<int> timeFrom, Nullable<int> timeTo, string reason, string notes)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var permissionTypeParameter = permissionType.HasValue ?
                new ObjectParameter("PermissionType", permissionType) :
                new ObjectParameter("PermissionType", typeof(int));
    
            var dayDateParameter = dayDate.HasValue ?
                new ObjectParameter("DayDate", dayDate) :
                new ObjectParameter("DayDate", typeof(System.DateTime));
    
            var permissionDateParameter = permissionDate.HasValue ?
                new ObjectParameter("PermissionDate", permissionDate) :
                new ObjectParameter("PermissionDate", typeof(System.DateTime));
    
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(long));
    
            var workTimeIDParameter = workTimeID.HasValue ?
                new ObjectParameter("WorkTimeID", workTimeID) :
                new ObjectParameter("WorkTimeID", typeof(long));
    
            var timeFromParameter = timeFrom.HasValue ?
                new ObjectParameter("TimeFrom", timeFrom) :
                new ObjectParameter("TimeFrom", typeof(int));
    
            var timeToParameter = timeTo.HasValue ?
                new ObjectParameter("TimeTo", timeTo) :
                new ObjectParameter("TimeTo", typeof(int));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("att_EmpPermission_Update", iDParameter, permissionTypeParameter, dayDateParameter, permissionDateParameter, empIDParameter, workTimeIDParameter, timeFromParameter, timeToParameter, reasonParameter, notesParameter);
        }
    
        public virtual int att_EmpSettings_InsertDept(Nullable<long> iD, Nullable<bool> hasAttendance, Nullable<bool> isAllIn, Nullable<bool> isAllOut, Nullable<bool> isAutoIn, Nullable<bool> isAutoOut, Nullable<bool> isOverTimeBefore, Nullable<bool> isOverTimeAfter, Nullable<bool> isHolidayOverTime, Nullable<bool> isDiscount, Nullable<bool> isDelay, Nullable<int> delayMax, Nullable<bool> hasOverTimeMax, Nullable<int> overTimeMax, Nullable<long> lUU)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var hasAttendanceParameter = hasAttendance.HasValue ?
                new ObjectParameter("HasAttendance", hasAttendance) :
                new ObjectParameter("HasAttendance", typeof(bool));
    
            var isAllInParameter = isAllIn.HasValue ?
                new ObjectParameter("IsAllIn", isAllIn) :
                new ObjectParameter("IsAllIn", typeof(bool));
    
            var isAllOutParameter = isAllOut.HasValue ?
                new ObjectParameter("IsAllOut", isAllOut) :
                new ObjectParameter("IsAllOut", typeof(bool));
    
            var isAutoInParameter = isAutoIn.HasValue ?
                new ObjectParameter("IsAutoIn", isAutoIn) :
                new ObjectParameter("IsAutoIn", typeof(bool));
    
            var isAutoOutParameter = isAutoOut.HasValue ?
                new ObjectParameter("IsAutoOut", isAutoOut) :
                new ObjectParameter("IsAutoOut", typeof(bool));
    
            var isOverTimeBeforeParameter = isOverTimeBefore.HasValue ?
                new ObjectParameter("IsOverTimeBefore", isOverTimeBefore) :
                new ObjectParameter("IsOverTimeBefore", typeof(bool));
    
            var isOverTimeAfterParameter = isOverTimeAfter.HasValue ?
                new ObjectParameter("IsOverTimeAfter", isOverTimeAfter) :
                new ObjectParameter("IsOverTimeAfter", typeof(bool));
    
            var isHolidayOverTimeParameter = isHolidayOverTime.HasValue ?
                new ObjectParameter("IsHolidayOverTime", isHolidayOverTime) :
                new ObjectParameter("IsHolidayOverTime", typeof(bool));
    
            var isDiscountParameter = isDiscount.HasValue ?
                new ObjectParameter("IsDiscount", isDiscount) :
                new ObjectParameter("IsDiscount", typeof(bool));
    
            var isDelayParameter = isDelay.HasValue ?
                new ObjectParameter("IsDelay", isDelay) :
                new ObjectParameter("IsDelay", typeof(bool));
    
            var delayMaxParameter = delayMax.HasValue ?
                new ObjectParameter("DelayMax", delayMax) :
                new ObjectParameter("DelayMax", typeof(int));
    
            var hasOverTimeMaxParameter = hasOverTimeMax.HasValue ?
                new ObjectParameter("HasOverTimeMax", hasOverTimeMax) :
                new ObjectParameter("HasOverTimeMax", typeof(bool));
    
            var overTimeMaxParameter = overTimeMax.HasValue ?
                new ObjectParameter("OverTimeMax", overTimeMax) :
                new ObjectParameter("OverTimeMax", typeof(int));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("att_EmpSettings_InsertDept", iDParameter, hasAttendanceParameter, isAllInParameter, isAllOutParameter, isAutoInParameter, isAutoOutParameter, isOverTimeBeforeParameter, isOverTimeAfterParameter, isHolidayOverTimeParameter, isDiscountParameter, isDelayParameter, delayMaxParameter, hasOverTimeMaxParameter, overTimeMaxParameter, lUUParameter);
        }
    
        public virtual ObjectResult<att_EmpSettings_SelectEmp_Result> att_EmpSettings_SelectEmp(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<att_EmpSettings_SelectEmp_Result>("att_EmpSettings_SelectEmp", iDParameter);
        }
    
        public virtual int att_EmpSettings_UpdateDept(Nullable<long> iD, Nullable<bool> hasAttendance, Nullable<bool> isAllIn, Nullable<bool> isAllOut, Nullable<bool> isAutoIn, Nullable<bool> isAutoOut, Nullable<bool> isOverTimeBefore, Nullable<bool> isOverTimeAfter, Nullable<bool> isHolidayOverTime, Nullable<bool> isDiscount, Nullable<bool> isDelay, Nullable<int> delayMax, Nullable<bool> hasOverTimeMax, Nullable<int> overTimeMax, Nullable<long> lUU)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var hasAttendanceParameter = hasAttendance.HasValue ?
                new ObjectParameter("HasAttendance", hasAttendance) :
                new ObjectParameter("HasAttendance", typeof(bool));
    
            var isAllInParameter = isAllIn.HasValue ?
                new ObjectParameter("IsAllIn", isAllIn) :
                new ObjectParameter("IsAllIn", typeof(bool));
    
            var isAllOutParameter = isAllOut.HasValue ?
                new ObjectParameter("IsAllOut", isAllOut) :
                new ObjectParameter("IsAllOut", typeof(bool));
    
            var isAutoInParameter = isAutoIn.HasValue ?
                new ObjectParameter("IsAutoIn", isAutoIn) :
                new ObjectParameter("IsAutoIn", typeof(bool));
    
            var isAutoOutParameter = isAutoOut.HasValue ?
                new ObjectParameter("IsAutoOut", isAutoOut) :
                new ObjectParameter("IsAutoOut", typeof(bool));
    
            var isOverTimeBeforeParameter = isOverTimeBefore.HasValue ?
                new ObjectParameter("IsOverTimeBefore", isOverTimeBefore) :
                new ObjectParameter("IsOverTimeBefore", typeof(bool));
    
            var isOverTimeAfterParameter = isOverTimeAfter.HasValue ?
                new ObjectParameter("IsOverTimeAfter", isOverTimeAfter) :
                new ObjectParameter("IsOverTimeAfter", typeof(bool));
    
            var isHolidayOverTimeParameter = isHolidayOverTime.HasValue ?
                new ObjectParameter("IsHolidayOverTime", isHolidayOverTime) :
                new ObjectParameter("IsHolidayOverTime", typeof(bool));
    
            var isDiscountParameter = isDiscount.HasValue ?
                new ObjectParameter("IsDiscount", isDiscount) :
                new ObjectParameter("IsDiscount", typeof(bool));
    
            var isDelayParameter = isDelay.HasValue ?
                new ObjectParameter("IsDelay", isDelay) :
                new ObjectParameter("IsDelay", typeof(bool));
    
            var delayMaxParameter = delayMax.HasValue ?
                new ObjectParameter("DelayMax", delayMax) :
                new ObjectParameter("DelayMax", typeof(int));
    
            var hasOverTimeMaxParameter = hasOverTimeMax.HasValue ?
                new ObjectParameter("HasOverTimeMax", hasOverTimeMax) :
                new ObjectParameter("HasOverTimeMax", typeof(bool));
    
            var overTimeMaxParameter = overTimeMax.HasValue ?
                new ObjectParameter("OverTimeMax", overTimeMax) :
                new ObjectParameter("OverTimeMax", typeof(int));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("att_EmpSettings_UpdateDept", iDParameter, hasAttendanceParameter, isAllInParameter, isAllOutParameter, isAutoInParameter, isAutoOutParameter, isOverTimeBeforeParameter, isOverTimeAfterParameter, isHolidayOverTimeParameter, isDiscountParameter, isDelayParameter, delayMaxParameter, hasOverTimeMaxParameter, overTimeMaxParameter, lUUParameter);
        }
    
        public virtual int att_FutureShift_Delete(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("att_FutureShift_Delete", iDParameter);
        }
    
        public virtual int att_FutureShift_Insert(string idCode, Nullable<long> idEmp, Nullable<System.DateTime> date_from, Nullable<System.DateTime> date_to, Nullable<long> idShift, ObjectParameter iD)
        {
            var idCodeParameter = idCode != null ?
                new ObjectParameter("IdCode", idCode) :
                new ObjectParameter("IdCode", typeof(string));
    
            var idEmpParameter = idEmp.HasValue ?
                new ObjectParameter("IdEmp", idEmp) :
                new ObjectParameter("IdEmp", typeof(long));
    
            var date_fromParameter = date_from.HasValue ?
                new ObjectParameter("Date_from", date_from) :
                new ObjectParameter("Date_from", typeof(System.DateTime));
    
            var date_toParameter = date_to.HasValue ?
                new ObjectParameter("Date_to", date_to) :
                new ObjectParameter("Date_to", typeof(System.DateTime));
    
            var idShiftParameter = idShift.HasValue ?
                new ObjectParameter("idShift", idShift) :
                new ObjectParameter("idShift", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("att_FutureShift_Insert", idCodeParameter, idEmpParameter, date_fromParameter, date_toParameter, idShiftParameter, iD);
        }
    
        public virtual ObjectResult<att_FutureShift_SelectAll_Result> att_FutureShift_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<att_FutureShift_SelectAll_Result>("att_FutureShift_SelectAll");
        }
    
        public virtual ObjectResult<att_FutureShift_SelectOne_Result> att_FutureShift_SelectOne(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<att_FutureShift_SelectOne_Result>("att_FutureShift_SelectOne", iDParameter);
        }
    
        public virtual int att_FutureShift_Update(Nullable<long> iD, string idCode, Nullable<long> idEmp, Nullable<System.DateTime> date_from, Nullable<System.DateTime> date_to, Nullable<long> idShift)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var idCodeParameter = idCode != null ?
                new ObjectParameter("IdCode", idCode) :
                new ObjectParameter("IdCode", typeof(string));
    
            var idEmpParameter = idEmp.HasValue ?
                new ObjectParameter("IdEmp", idEmp) :
                new ObjectParameter("IdEmp", typeof(long));
    
            var date_fromParameter = date_from.HasValue ?
                new ObjectParameter("Date_from", date_from) :
                new ObjectParameter("Date_from", typeof(System.DateTime));
    
            var date_toParameter = date_to.HasValue ?
                new ObjectParameter("Date_to", date_to) :
                new ObjectParameter("Date_to", typeof(System.DateTime));
    
            var idShiftParameter = idShift.HasValue ?
                new ObjectParameter("idShift", idShift) :
                new ObjectParameter("idShift", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("att_FutureShift_Update", iDParameter, idCodeParameter, idEmpParameter, date_fromParameter, date_toParameter, idShiftParameter);
        }
    
        public virtual int att_Holiday_Delete(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("att_Holiday_Delete", iDParameter);
        }
    
        public virtual int att_Holiday_DeleteAllWRelgionLogic(Nullable<long> relgion)
        {
            var relgionParameter = relgion.HasValue ?
                new ObjectParameter("Relgion", relgion) :
                new ObjectParameter("Relgion", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("att_Holiday_DeleteAllWRelgionLogic", relgionParameter);
        }
    
        public virtual int att_Holiday_DeleteAllWtypeLogic(Nullable<int> type)
        {
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("att_Holiday_DeleteAllWtypeLogic", typeParameter);
        }
    
        public virtual int att_Holiday_Insert(string name, Nullable<long> relgion, Nullable<int> number, Nullable<int> type, Nullable<bool> isContinous, ObjectParameter iD)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var relgionParameter = relgion.HasValue ?
                new ObjectParameter("Relgion", relgion) :
                new ObjectParameter("Relgion", typeof(long));
    
            var numberParameter = number.HasValue ?
                new ObjectParameter("Number", number) :
                new ObjectParameter("Number", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(int));
    
            var isContinousParameter = isContinous.HasValue ?
                new ObjectParameter("isContinous", isContinous) :
                new ObjectParameter("isContinous", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("att_Holiday_Insert", nameParameter, relgionParameter, numberParameter, typeParameter, isContinousParameter, iD);
        }
    
        public virtual ObjectResult<att_Holiday_SelectAll_Result> att_Holiday_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<att_Holiday_SelectAll_Result>("att_Holiday_SelectAll");
        }
    
        public virtual ObjectResult<att_Holiday_SelectAllWithType_Result> att_Holiday_SelectAllWithType(Nullable<int> type)
        {
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<att_Holiday_SelectAllWithType_Result>("att_Holiday_SelectAllWithType", typeParameter);
        }
    
        public virtual ObjectResult<att_Holiday_SelectOne_Result> att_Holiday_SelectOne(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<att_Holiday_SelectOne_Result>("att_Holiday_SelectOne", iDParameter);
        }
    
        public virtual int att_Holiday_Update(Nullable<long> iD, string name, Nullable<long> relgion, Nullable<int> number, Nullable<int> type, Nullable<bool> isContinous)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var relgionParameter = relgion.HasValue ?
                new ObjectParameter("Relgion", relgion) :
                new ObjectParameter("Relgion", typeof(long));
    
            var numberParameter = number.HasValue ?
                new ObjectParameter("Number", number) :
                new ObjectParameter("Number", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(int));
    
            var isContinousParameter = isContinous.HasValue ?
                new ObjectParameter("isContinous", isContinous) :
                new ObjectParameter("isContinous", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("att_Holiday_Update", iDParameter, nameParameter, relgionParameter, numberParameter, typeParameter, isContinousParameter);
        }
    
        public virtual int att_Holiday_UpdateAllWRelgionLogic(Nullable<long> relgion, Nullable<long> relgionOld)
        {
            var relgionParameter = relgion.HasValue ?
                new ObjectParameter("Relgion", relgion) :
                new ObjectParameter("Relgion", typeof(long));
    
            var relgionOldParameter = relgionOld.HasValue ?
                new ObjectParameter("RelgionOld", relgionOld) :
                new ObjectParameter("RelgionOld", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("att_Holiday_UpdateAllWRelgionLogic", relgionParameter, relgionOldParameter);
        }
    
        public virtual int att_Holiday_UpdateAllWtypeLogic(Nullable<int> type, Nullable<int> typeOld)
        {
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(int));
    
            var typeOldParameter = typeOld.HasValue ?
                new ObjectParameter("typeOld", typeOld) :
                new ObjectParameter("typeOld", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("att_Holiday_UpdateAllWtypeLogic", typeParameter, typeOldParameter);
        }
    
        public virtual int att_Permission_Delete(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("att_Permission_Delete", iDParameter);
        }
    
        public virtual int att_Permission_Insert(string name, ObjectParameter iD)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("att_Permission_Insert", nameParameter, iD);
        }
    
        public virtual ObjectResult<att_Permission_SelectAll_Result> att_Permission_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<att_Permission_SelectAll_Result>("att_Permission_SelectAll");
        }
    
        public virtual ObjectResult<att_Permission_SelectOne_Result> att_Permission_SelectOne(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<att_Permission_SelectOne_Result>("att_Permission_SelectOne", iDParameter);
        }
    
        public virtual int att_Permission_Update(Nullable<int> iD, string name)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("att_Permission_Update", iDParameter, nameParameter);
        }
    
        public virtual ObjectResult<att_pray_SelectAll_Result> att_pray_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<att_pray_SelectAll_Result>("att_pray_SelectAll");
        }
    
        public virtual ObjectResult<att_pray_SelectOne_Result> att_pray_SelectOne(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<att_pray_SelectOne_Result>("att_pray_SelectOne", iDParameter);
        }
    
        public virtual int att_PrayRule_Delete(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("att_PrayRule_Delete", iDParameter);
        }
    
        public virtual int att_PrayRule_Insert(Nullable<long> id_pray, Nullable<long> beforPray, Nullable<long> afterPray, string notes, ObjectParameter iD)
        {
            var id_prayParameter = id_pray.HasValue ?
                new ObjectParameter("id_pray", id_pray) :
                new ObjectParameter("id_pray", typeof(long));
    
            var beforPrayParameter = beforPray.HasValue ?
                new ObjectParameter("beforPray", beforPray) :
                new ObjectParameter("beforPray", typeof(long));
    
            var afterPrayParameter = afterPray.HasValue ?
                new ObjectParameter("afterPray", afterPray) :
                new ObjectParameter("afterPray", typeof(long));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("att_PrayRule_Insert", id_prayParameter, beforPrayParameter, afterPrayParameter, notesParameter, iD);
        }
    
        public virtual ObjectResult<att_PrayRule_SelectAll_Result> att_PrayRule_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<att_PrayRule_SelectAll_Result>("att_PrayRule_SelectAll");
        }
    
        public virtual ObjectResult<att_PrayRule_SelectOne_Result> att_PrayRule_SelectOne(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<att_PrayRule_SelectOne_Result>("att_PrayRule_SelectOne", iDParameter);
        }
    
        public virtual ObjectResult<att_PrayRule_SelectOnePray_Result> att_PrayRule_SelectOnePray(Nullable<long> idPray)
        {
            var idPrayParameter = idPray.HasValue ?
                new ObjectParameter("IdPray", idPray) :
                new ObjectParameter("IdPray", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<att_PrayRule_SelectOnePray_Result>("att_PrayRule_SelectOnePray", idPrayParameter);
        }
    
        public virtual int att_PrayRule_Update(Nullable<long> iD, Nullable<long> id_pray, Nullable<long> beforPray, Nullable<long> afterPray, string notes)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var id_prayParameter = id_pray.HasValue ?
                new ObjectParameter("id_pray", id_pray) :
                new ObjectParameter("id_pray", typeof(long));
    
            var beforPrayParameter = beforPray.HasValue ?
                new ObjectParameter("beforPray", beforPray) :
                new ObjectParameter("beforPray", typeof(long));
    
            var afterPrayParameter = afterPray.HasValue ?
                new ObjectParameter("afterPray", afterPray) :
                new ObjectParameter("afterPray", typeof(long));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("att_PrayRule_Update", iDParameter, id_prayParameter, beforPrayParameter, afterPrayParameter, notesParameter);
        }
    
        public virtual int att_PrayRule_UpdateWid_pray(Nullable<long> id_pray, Nullable<long> beforPray, Nullable<long> afterPray, string notes)
        {
            var id_prayParameter = id_pray.HasValue ?
                new ObjectParameter("id_pray", id_pray) :
                new ObjectParameter("id_pray", typeof(long));
    
            var beforPrayParameter = beforPray.HasValue ?
                new ObjectParameter("beforPray", beforPray) :
                new ObjectParameter("beforPray", typeof(long));
    
            var afterPrayParameter = afterPray.HasValue ?
                new ObjectParameter("afterPray", afterPray) :
                new ObjectParameter("afterPray", typeof(long));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("att_PrayRule_UpdateWid_pray", id_prayParameter, beforPrayParameter, afterPrayParameter, notesParameter);
        }
    
        public virtual int att_prevEmpHoliday_Delete(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("att_prevEmpHoliday_Delete", iDParameter);
        }
    
        public virtual int att_prevEmpHoliday_DeleteAllWEmpIDLogic(Nullable<long> empID)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("att_prevEmpHoliday_DeleteAllWEmpIDLogic", empIDParameter);
        }
    
        public virtual int att_prevEmpHoliday_Insert(Nullable<long> empID, Nullable<int> prevNumberHoliday, Nullable<int> prevBlancedHoliday, ObjectParameter iD)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(long));
    
            var prevNumberHolidayParameter = prevNumberHoliday.HasValue ?
                new ObjectParameter("prevNumberHoliday", prevNumberHoliday) :
                new ObjectParameter("prevNumberHoliday", typeof(int));
    
            var prevBlancedHolidayParameter = prevBlancedHoliday.HasValue ?
                new ObjectParameter("prevBlancedHoliday", prevBlancedHoliday) :
                new ObjectParameter("prevBlancedHoliday", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("att_prevEmpHoliday_Insert", empIDParameter, prevNumberHolidayParameter, prevBlancedHolidayParameter, iD);
        }
    
        public virtual ObjectResult<att_prevEmpHoliday_SelectAll_Result> att_prevEmpHoliday_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<att_prevEmpHoliday_SelectAll_Result>("att_prevEmpHoliday_SelectAll");
        }
    
        public virtual ObjectResult<att_prevEmpHoliday_SelectAllWEmpIDLogic_Result> att_prevEmpHoliday_SelectAllWEmpIDLogic(Nullable<long> empID)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<att_prevEmpHoliday_SelectAllWEmpIDLogic_Result>("att_prevEmpHoliday_SelectAllWEmpIDLogic", empIDParameter);
        }
    
        public virtual ObjectResult<att_prevEmpHoliday_SelectAllWithDate_Result> att_prevEmpHoliday_SelectAllWithDate()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<att_prevEmpHoliday_SelectAllWithDate_Result>("att_prevEmpHoliday_SelectAllWithDate");
        }
    
        public virtual ObjectResult<att_prevEmpHoliday_SelectOne_Result> att_prevEmpHoliday_SelectOne(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<att_prevEmpHoliday_SelectOne_Result>("att_prevEmpHoliday_SelectOne", iDParameter);
        }
    
        public virtual int att_prevEmpHoliday_Update(Nullable<long> iD, Nullable<long> empID, Nullable<int> prevNumberHoliday, Nullable<int> prevBlancedHoliday)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(long));
    
            var prevNumberHolidayParameter = prevNumberHoliday.HasValue ?
                new ObjectParameter("prevNumberHoliday", prevNumberHoliday) :
                new ObjectParameter("prevNumberHoliday", typeof(int));
    
            var prevBlancedHolidayParameter = prevBlancedHoliday.HasValue ?
                new ObjectParameter("prevBlancedHoliday", prevBlancedHoliday) :
                new ObjectParameter("prevBlancedHoliday", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("att_prevEmpHoliday_Update", iDParameter, empIDParameter, prevNumberHolidayParameter, prevBlancedHolidayParameter);
        }
    
        public virtual int att_prevEmpHoliday_UpdateAllWEmpIDLogic(Nullable<long> empID, Nullable<long> empIDOld)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(long));
    
            var empIDOldParameter = empIDOld.HasValue ?
                new ObjectParameter("EmpIDOld", empIDOld) :
                new ObjectParameter("EmpIDOld", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("att_prevEmpHoliday_UpdateAllWEmpIDLogic", empIDParameter, empIDOldParameter);
        }
    
        public virtual int att_PublicHolidayRecord_Delete(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("att_PublicHolidayRecord_Delete", iDParameter);
        }
    
        public virtual int att_PublicHolidayRecord_Insert(Nullable<int> publicHoliday, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> year, ObjectParameter iD)
        {
            var publicHolidayParameter = publicHoliday.HasValue ?
                new ObjectParameter("PublicHoliday", publicHoliday) :
                new ObjectParameter("PublicHoliday", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("att_PublicHolidayRecord_Insert", publicHolidayParameter, dateFromParameter, dateToParameter, yearParameter, iD);
        }
    
        public virtual ObjectResult<att_PublicHolidayRecord_SelectAll_Result> att_PublicHolidayRecord_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<att_PublicHolidayRecord_SelectAll_Result>("att_PublicHolidayRecord_SelectAll");
        }
    
        public virtual ObjectResult<att_PublicHolidayRecord_SelectDate_Result> att_PublicHolidayRecord_SelectDate(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<att_PublicHolidayRecord_SelectDate_Result>("att_PublicHolidayRecord_SelectDate", dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<att_PublicHolidayRecord_SelectOne_Result> att_PublicHolidayRecord_SelectOne(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<att_PublicHolidayRecord_SelectOne_Result>("att_PublicHolidayRecord_SelectOne", iDParameter);
        }
    
        public virtual ObjectResult<att_PublicHolidayRecord_SelectYear_Result> att_PublicHolidayRecord_SelectYear(Nullable<int> year)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<att_PublicHolidayRecord_SelectYear_Result>("att_PublicHolidayRecord_SelectYear", yearParameter);
        }
    
        public virtual int att_PublicHolidayRecord_Update(Nullable<long> iD, Nullable<int> publicHoliday, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> year)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var publicHolidayParameter = publicHoliday.HasValue ?
                new ObjectParameter("PublicHoliday", publicHoliday) :
                new ObjectParameter("PublicHoliday", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("att_PublicHolidayRecord_Update", iDParameter, publicHolidayParameter, dateFromParameter, dateToParameter, yearParameter);
        }
    
        public virtual int att_Shifts_Delete(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("att_Shifts_Delete", iDParameter);
        }
    
        public virtual int att_Shifts_Insert(string iDCode, string name, Nullable<bool> notActive, Nullable<bool> openShift, Nullable<int> minTime, Nullable<int> totalTime, Nullable<int> daysCount, string notes, ObjectParameter iD)
        {
            var iDCodeParameter = iDCode != null ?
                new ObjectParameter("IDCode", iDCode) :
                new ObjectParameter("IDCode", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var notActiveParameter = notActive.HasValue ?
                new ObjectParameter("NotActive", notActive) :
                new ObjectParameter("NotActive", typeof(bool));
    
            var openShiftParameter = openShift.HasValue ?
                new ObjectParameter("OpenShift", openShift) :
                new ObjectParameter("OpenShift", typeof(bool));
    
            var minTimeParameter = minTime.HasValue ?
                new ObjectParameter("MinTime", minTime) :
                new ObjectParameter("MinTime", typeof(int));
    
            var totalTimeParameter = totalTime.HasValue ?
                new ObjectParameter("TotalTime", totalTime) :
                new ObjectParameter("TotalTime", typeof(int));
    
            var daysCountParameter = daysCount.HasValue ?
                new ObjectParameter("DaysCount", daysCount) :
                new ObjectParameter("DaysCount", typeof(int));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("att_Shifts_Insert", iDCodeParameter, nameParameter, notActiveParameter, openShiftParameter, minTimeParameter, totalTimeParameter, daysCountParameter, notesParameter, iD);
        }
    
        public virtual ObjectResult<att_Shifts_SelectAll_Result> att_Shifts_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<att_Shifts_SelectAll_Result>("att_Shifts_SelectAll");
        }
    
        public virtual ObjectResult<att_Shifts_SelectOne_Result> att_Shifts_SelectOne(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<att_Shifts_SelectOne_Result>("att_Shifts_SelectOne", iDParameter);
        }
    
        public virtual ObjectResult<att_Shifts_SelectWorkTimeShifts_Result> att_Shifts_SelectWorkTimeShifts(Nullable<long> shiftID)
        {
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<att_Shifts_SelectWorkTimeShifts_Result>("att_Shifts_SelectWorkTimeShifts", shiftIDParameter);
        }
    
        public virtual int att_Shifts_Update(Nullable<long> iD, string iDCode, string name, Nullable<bool> notActive, Nullable<bool> openShift, Nullable<int> minTime, Nullable<int> totalTime, Nullable<int> daysCount, string notes)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var iDCodeParameter = iDCode != null ?
                new ObjectParameter("IDCode", iDCode) :
                new ObjectParameter("IDCode", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var notActiveParameter = notActive.HasValue ?
                new ObjectParameter("NotActive", notActive) :
                new ObjectParameter("NotActive", typeof(bool));
    
            var openShiftParameter = openShift.HasValue ?
                new ObjectParameter("OpenShift", openShift) :
                new ObjectParameter("OpenShift", typeof(bool));
    
            var minTimeParameter = minTime.HasValue ?
                new ObjectParameter("MinTime", minTime) :
                new ObjectParameter("MinTime", typeof(int));
    
            var totalTimeParameter = totalTime.HasValue ?
                new ObjectParameter("TotalTime", totalTime) :
                new ObjectParameter("TotalTime", typeof(int));
    
            var daysCountParameter = daysCount.HasValue ?
                new ObjectParameter("DaysCount", daysCount) :
                new ObjectParameter("DaysCount", typeof(int));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("att_Shifts_Update", iDParameter, iDCodeParameter, nameParameter, notActiveParameter, openShiftParameter, minTimeParameter, totalTimeParameter, daysCountParameter, notesParameter);
        }
    
        public virtual int att_ShiftsTimes_Delete(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("att_ShiftsTimes_Delete", iDParameter);
        }
    
        public virtual int att_ShiftsTimes_DeleteShiftGroup(Nullable<long> shiftID)
        {
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("att_ShiftsTimes_DeleteShiftGroup", shiftIDParameter);
        }
    
        public virtual int att_ShiftsTimes_Insert(Nullable<long> shiftID, Nullable<long> workTimeID, Nullable<short> dayID, ObjectParameter iD)
        {
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(long));
    
            var workTimeIDParameter = workTimeID.HasValue ?
                new ObjectParameter("WorkTimeID", workTimeID) :
                new ObjectParameter("WorkTimeID", typeof(long));
    
            var dayIDParameter = dayID.HasValue ?
                new ObjectParameter("DayID", dayID) :
                new ObjectParameter("DayID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("att_ShiftsTimes_Insert", shiftIDParameter, workTimeIDParameter, dayIDParameter, iD);
        }
    
        public virtual ObjectResult<att_ShiftsTimes_SelectPeriods_Result> att_ShiftsTimes_SelectPeriods(Nullable<long> shiftID)
        {
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<att_ShiftsTimes_SelectPeriods_Result>("att_ShiftsTimes_SelectPeriods", shiftIDParameter);
        }
    
        public virtual ObjectResult<att_ShiftsTimes_SelectShiftGroup_Result> att_ShiftsTimes_SelectShiftGroup(Nullable<long> shiftID)
        {
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<att_ShiftsTimes_SelectShiftGroup_Result>("att_ShiftsTimes_SelectShiftGroup", shiftIDParameter);
        }
    
        public virtual int att_ShiftsTimes_Update(Nullable<long> iD, Nullable<long> shiftID, Nullable<long> workTimeID, Nullable<short> dayID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(long));
    
            var workTimeIDParameter = workTimeID.HasValue ?
                new ObjectParameter("WorkTimeID", workTimeID) :
                new ObjectParameter("WorkTimeID", typeof(long));
    
            var dayIDParameter = dayID.HasValue ?
                new ObjectParameter("DayID", dayID) :
                new ObjectParameter("DayID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("att_ShiftsTimes_Update", iDParameter, shiftIDParameter, workTimeIDParameter, dayIDParameter);
        }
    
        public virtual int att_UsersLogs_Insert(Nullable<long> deviceUserID, Nullable<int> verifyMode, Nullable<int> inOutMode, Nullable<System.DateTime> time, string workCode, Nullable<short> type, ObjectParameter iD)
        {
            var deviceUserIDParameter = deviceUserID.HasValue ?
                new ObjectParameter("DeviceUserID", deviceUserID) :
                new ObjectParameter("DeviceUserID", typeof(long));
    
            var verifyModeParameter = verifyMode.HasValue ?
                new ObjectParameter("VerifyMode", verifyMode) :
                new ObjectParameter("VerifyMode", typeof(int));
    
            var inOutModeParameter = inOutMode.HasValue ?
                new ObjectParameter("InOutMode", inOutMode) :
                new ObjectParameter("InOutMode", typeof(int));
    
            var timeParameter = time.HasValue ?
                new ObjectParameter("Time", time) :
                new ObjectParameter("Time", typeof(System.DateTime));
    
            var workCodeParameter = workCode != null ?
                new ObjectParameter("WorkCode", workCode) :
                new ObjectParameter("WorkCode", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("att_UsersLogs_Insert", deviceUserIDParameter, verifyModeParameter, inOutModeParameter, timeParameter, workCodeParameter, typeParameter, iD);
        }
    
        public virtual int att_workTimeRecord_Delete(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("att_workTimeRecord_Delete", iDParameter);
        }
    
        public virtual int att_workTimeRecord_Insert(string idCode, Nullable<long> startTime, Nullable<bool> startPrayCheck, Nullable<long> startPray, Nullable<long> startBefore, Nullable<long> startAfter, Nullable<long> endTime, Nullable<bool> endPrayCheck, Nullable<long> endPray, Nullable<long> endBefore, Nullable<long> endAfter, Nullable<long> lUU, Nullable<System.DateTime> lUD, string name, Nullable<bool> isActive, ObjectParameter iD)
        {
            var idCodeParameter = idCode != null ?
                new ObjectParameter("IdCode", idCode) :
                new ObjectParameter("IdCode", typeof(string));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(long));
    
            var startPrayCheckParameter = startPrayCheck.HasValue ?
                new ObjectParameter("StartPrayCheck", startPrayCheck) :
                new ObjectParameter("StartPrayCheck", typeof(bool));
    
            var startPrayParameter = startPray.HasValue ?
                new ObjectParameter("StartPray", startPray) :
                new ObjectParameter("StartPray", typeof(long));
    
            var startBeforeParameter = startBefore.HasValue ?
                new ObjectParameter("StartBefore", startBefore) :
                new ObjectParameter("StartBefore", typeof(long));
    
            var startAfterParameter = startAfter.HasValue ?
                new ObjectParameter("StartAfter", startAfter) :
                new ObjectParameter("StartAfter", typeof(long));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(long));
    
            var endPrayCheckParameter = endPrayCheck.HasValue ?
                new ObjectParameter("EndPrayCheck", endPrayCheck) :
                new ObjectParameter("EndPrayCheck", typeof(bool));
    
            var endPrayParameter = endPray.HasValue ?
                new ObjectParameter("EndPray", endPray) :
                new ObjectParameter("EndPray", typeof(long));
    
            var endBeforeParameter = endBefore.HasValue ?
                new ObjectParameter("EndBefore", endBefore) :
                new ObjectParameter("EndBefore", typeof(long));
    
            var endAfterParameter = endAfter.HasValue ?
                new ObjectParameter("EndAfter", endAfter) :
                new ObjectParameter("EndAfter", typeof(long));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("att_workTimeRecord_Insert", idCodeParameter, startTimeParameter, startPrayCheckParameter, startPrayParameter, startBeforeParameter, startAfterParameter, endTimeParameter, endPrayCheckParameter, endPrayParameter, endBeforeParameter, endAfterParameter, lUUParameter, lUDParameter, nameParameter, isActiveParameter, iD);
        }
    
        public virtual ObjectResult<att_workTimeRecord_SelectAll_Result> att_workTimeRecord_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<att_workTimeRecord_SelectAll_Result>("att_workTimeRecord_SelectAll");
        }
    
        public virtual ObjectResult<att_workTimeRecord_SelectAllTimePray_Result> att_workTimeRecord_SelectAllTimePray()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<att_workTimeRecord_SelectAllTimePray_Result>("att_workTimeRecord_SelectAllTimePray");
        }
    
        public virtual ObjectResult<att_workTimeRecord_SelectOne_Result> att_workTimeRecord_SelectOne(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<att_workTimeRecord_SelectOne_Result>("att_workTimeRecord_SelectOne", iDParameter);
        }
    
        public virtual ObjectResult<att_workTimeRecord_SelectPeriods_Result> att_workTimeRecord_SelectPeriods()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<att_workTimeRecord_SelectPeriods_Result>("att_workTimeRecord_SelectPeriods");
        }
    
        public virtual ObjectResult<att_workTimeRecord_SelectWithOpen_Result> att_workTimeRecord_SelectWithOpen()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<att_workTimeRecord_SelectWithOpen_Result>("att_workTimeRecord_SelectWithOpen");
        }
    
        public virtual int att_workTimeRecord_Update(Nullable<long> iD, string idCode, Nullable<long> startTime, Nullable<bool> startPrayCheck, Nullable<long> startPray, Nullable<long> startBefore, Nullable<long> startAfter, Nullable<long> endTime, Nullable<bool> endPrayCheck, Nullable<long> endPray, Nullable<long> endBefore, Nullable<long> endAfter, Nullable<long> lUU, Nullable<System.DateTime> lUD, string name, Nullable<bool> isActive)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var idCodeParameter = idCode != null ?
                new ObjectParameter("IdCode", idCode) :
                new ObjectParameter("IdCode", typeof(string));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(long));
    
            var startPrayCheckParameter = startPrayCheck.HasValue ?
                new ObjectParameter("StartPrayCheck", startPrayCheck) :
                new ObjectParameter("StartPrayCheck", typeof(bool));
    
            var startPrayParameter = startPray.HasValue ?
                new ObjectParameter("StartPray", startPray) :
                new ObjectParameter("StartPray", typeof(long));
    
            var startBeforeParameter = startBefore.HasValue ?
                new ObjectParameter("StartBefore", startBefore) :
                new ObjectParameter("StartBefore", typeof(long));
    
            var startAfterParameter = startAfter.HasValue ?
                new ObjectParameter("StartAfter", startAfter) :
                new ObjectParameter("StartAfter", typeof(long));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(long));
    
            var endPrayCheckParameter = endPrayCheck.HasValue ?
                new ObjectParameter("EndPrayCheck", endPrayCheck) :
                new ObjectParameter("EndPrayCheck", typeof(bool));
    
            var endPrayParameter = endPray.HasValue ?
                new ObjectParameter("EndPray", endPray) :
                new ObjectParameter("EndPray", typeof(long));
    
            var endBeforeParameter = endBefore.HasValue ?
                new ObjectParameter("EndBefore", endBefore) :
                new ObjectParameter("EndBefore", typeof(long));
    
            var endAfterParameter = endAfter.HasValue ?
                new ObjectParameter("EndAfter", endAfter) :
                new ObjectParameter("EndAfter", typeof(long));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("att_workTimeRecord_Update", iDParameter, idCodeParameter, startTimeParameter, startPrayCheckParameter, startPrayParameter, startBeforeParameter, startAfterParameter, endTimeParameter, endPrayCheckParameter, endPrayParameter, endBeforeParameter, endAfterParameter, lUUParameter, lUDParameter, nameParameter, isActiveParameter);
        }
    
        public virtual int AttachedDocumentsType_Delete(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AttachedDocumentsType_Delete", iDParameter);
        }
    
        public virtual int AttachedDocumentsType_Insert(string name, Nullable<System.DateTime> lUD, Nullable<long> lUU, ObjectParameter iD)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AttachedDocumentsType_Insert", nameParameter, lUDParameter, lUUParameter, iD);
        }
    
        public virtual ObjectResult<AttachedDocumentsType_SelectAll_Result> AttachedDocumentsType_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AttachedDocumentsType_SelectAll_Result>("AttachedDocumentsType_SelectAll");
        }
    
        public virtual ObjectResult<AttachedDocumentsType_SelectOne_Result> AttachedDocumentsType_SelectOne(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AttachedDocumentsType_SelectOne_Result>("AttachedDocumentsType_SelectOne", iDParameter);
        }
    
        public virtual int AttachedDocumentsType_Update(Nullable<long> iD, string name, Nullable<System.DateTime> lUD, Nullable<long> lUU)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AttachedDocumentsType_Update", iDParameter, nameParameter, lUDParameter, lUUParameter);
        }
    
        public virtual int AttDevicesUsers_Delete(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AttDevicesUsers_Delete", iDParameter);
        }
    
        public virtual int AttDevicesUsers_Insert(Nullable<long> empID, Nullable<int> deviceUserID, Nullable<int> deviceID, string name, string passWord, Nullable<int> privilege, Nullable<bool> enabled, ObjectParameter iD)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(long));
    
            var deviceUserIDParameter = deviceUserID.HasValue ?
                new ObjectParameter("DeviceUserID", deviceUserID) :
                new ObjectParameter("DeviceUserID", typeof(int));
    
            var deviceIDParameter = deviceID.HasValue ?
                new ObjectParameter("DeviceID", deviceID) :
                new ObjectParameter("DeviceID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var passWordParameter = passWord != null ?
                new ObjectParameter("PassWord", passWord) :
                new ObjectParameter("PassWord", typeof(string));
    
            var privilegeParameter = privilege.HasValue ?
                new ObjectParameter("Privilege", privilege) :
                new ObjectParameter("Privilege", typeof(int));
    
            var enabledParameter = enabled.HasValue ?
                new ObjectParameter("Enabled", enabled) :
                new ObjectParameter("Enabled", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AttDevicesUsers_Insert", empIDParameter, deviceUserIDParameter, deviceIDParameter, nameParameter, passWordParameter, privilegeParameter, enabledParameter, iD);
        }
    
        public virtual ObjectResult<AttDevicesUsers_SelectAll_Result> AttDevicesUsers_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AttDevicesUsers_SelectAll_Result>("AttDevicesUsers_SelectAll");
        }
    
        public virtual ObjectResult<AttDevicesUsers_SelectOne_Result> AttDevicesUsers_SelectOne(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AttDevicesUsers_SelectOne_Result>("AttDevicesUsers_SelectOne", iDParameter);
        }
    
        public virtual int AttDevicesUsers_Update(Nullable<long> iD, Nullable<long> empID, Nullable<int> deviceUserID, Nullable<int> deviceID, string name, string passWord, Nullable<int> privilege, Nullable<bool> enabled)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(long));
    
            var deviceUserIDParameter = deviceUserID.HasValue ?
                new ObjectParameter("DeviceUserID", deviceUserID) :
                new ObjectParameter("DeviceUserID", typeof(int));
    
            var deviceIDParameter = deviceID.HasValue ?
                new ObjectParameter("DeviceID", deviceID) :
                new ObjectParameter("DeviceID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var passWordParameter = passWord != null ?
                new ObjectParameter("PassWord", passWord) :
                new ObjectParameter("PassWord", typeof(string));
    
            var privilegeParameter = privilege.HasValue ?
                new ObjectParameter("Privilege", privilege) :
                new ObjectParameter("Privilege", typeof(int));
    
            var enabledParameter = enabled.HasValue ?
                new ObjectParameter("Enabled", enabled) :
                new ObjectParameter("Enabled", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AttDevicesUsers_Update", iDParameter, empIDParameter, deviceUserIDParameter, deviceIDParameter, nameParameter, passWordParameter, privilegeParameter, enabledParameter);
        }
    
        public virtual int BSC_TimeRecord_DeletePeriod(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BSC_TimeRecord_DeletePeriod", fromDateParameter, toDateParameter);
        }
    
        public virtual int BSC_TimeRecord_Insert(Nullable<int> userId, Nullable<int> actionType, string form, string action_Code, string action_TCode, Nullable<System.DateTime> dayDate, ObjectParameter serial)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var actionTypeParameter = actionType.HasValue ?
                new ObjectParameter("ActionType", actionType) :
                new ObjectParameter("ActionType", typeof(int));
    
            var formParameter = form != null ?
                new ObjectParameter("Form", form) :
                new ObjectParameter("Form", typeof(string));
    
            var action_CodeParameter = action_Code != null ?
                new ObjectParameter("Action_Code", action_Code) :
                new ObjectParameter("Action_Code", typeof(string));
    
            var action_TCodeParameter = action_TCode != null ?
                new ObjectParameter("Action_TCode", action_TCode) :
                new ObjectParameter("Action_TCode", typeof(string));
    
            var dayDateParameter = dayDate.HasValue ?
                new ObjectParameter("DayDate", dayDate) :
                new ObjectParameter("DayDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BSC_TimeRecord_Insert", userIdParameter, actionTypeParameter, formParameter, action_CodeParameter, action_TCodeParameter, dayDateParameter, serial);
        }
    
        public virtual ObjectResult<BSC_TimeRecord_SelectAll_Result> BSC_TimeRecord_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BSC_TimeRecord_SelectAll_Result>("BSC_TimeRecord_SelectAll");
        }
    
        public virtual int BSC_TimeRecordData_Insert(Nullable<System.DateTime> dayDate, string actionNo, Nullable<int> eventType, string form, string title, string val, Nullable<int> serial)
        {
            var dayDateParameter = dayDate.HasValue ?
                new ObjectParameter("DayDate", dayDate) :
                new ObjectParameter("DayDate", typeof(System.DateTime));
    
            var actionNoParameter = actionNo != null ?
                new ObjectParameter("ActionNo", actionNo) :
                new ObjectParameter("ActionNo", typeof(string));
    
            var eventTypeParameter = eventType.HasValue ?
                new ObjectParameter("EventType", eventType) :
                new ObjectParameter("EventType", typeof(int));
    
            var formParameter = form != null ?
                new ObjectParameter("Form", form) :
                new ObjectParameter("Form", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var valParameter = val != null ?
                new ObjectParameter("Val", val) :
                new ObjectParameter("Val", typeof(string));
    
            var serialParameter = serial.HasValue ?
                new ObjectParameter("Serial", serial) :
                new ObjectParameter("Serial", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BSC_TimeRecordData_Insert", dayDateParameter, actionNoParameter, eventTypeParameter, formParameter, titleParameter, valParameter, serialParameter);
        }
    
        public virtual ObjectResult<BSC_TimeRecordData_SelectAll_Result> BSC_TimeRecordData_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BSC_TimeRecordData_SelectAll_Result>("BSC_TimeRecordData_SelectAll");
        }
    
        public virtual ObjectResult<BSC_TimeRecordData_SelectOneGroup_Result> BSC_TimeRecordData_SelectOneGroup(Nullable<int> serial)
        {
            var serialParameter = serial.HasValue ?
                new ObjectParameter("Serial", serial) :
                new ObjectParameter("Serial", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BSC_TimeRecordData_SelectOneGroup_Result>("BSC_TimeRecordData_SelectOneGroup", serialParameter);
        }
    
        public virtual int CarsData_Delete(Nullable<long> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CarsData_Delete", idParameter);
        }
    
        public virtual int CarsData_Insert(string name, string model, string boardNum, Nullable<long> lUU, Nullable<System.DateTime> lUD, ObjectParameter id)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var boardNumParameter = boardNum != null ?
                new ObjectParameter("BoardNum", boardNum) :
                new ObjectParameter("BoardNum", typeof(string));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CarsData_Insert", nameParameter, modelParameter, boardNumParameter, lUUParameter, lUDParameter, id);
        }
    
        public virtual ObjectResult<CarsData_SelectAll_Result> CarsData_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CarsData_SelectAll_Result>("CarsData_SelectAll");
        }
    
        public virtual ObjectResult<CarsData_SelectOne_Result> CarsData_SelectOne(Nullable<long> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CarsData_SelectOne_Result>("CarsData_SelectOne", idParameter);
        }
    
        public virtual int CarsData_Update(Nullable<long> id, string name, string model, string boardNum, Nullable<long> lUU, Nullable<System.DateTime> lUD)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var boardNumParameter = boardNum != null ?
                new ObjectParameter("BoardNum", boardNum) :
                new ObjectParameter("BoardNum", typeof(string));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CarsData_Update", idParameter, nameParameter, modelParameter, boardNumParameter, lUUParameter, lUDParameter);
        }
    
        public virtual int Categories_Delete(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Categories_Delete", iDParameter);
        }
    
        public virtual int Categories_Insert(string categoryName, Nullable<long> idCode_category, ObjectParameter iD)
        {
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            var idCode_categoryParameter = idCode_category.HasValue ?
                new ObjectParameter("idCode_category", idCode_category) :
                new ObjectParameter("idCode_category", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Categories_Insert", categoryNameParameter, idCode_categoryParameter, iD);
        }
    
        public virtual ObjectResult<Categories_SelectAll_Result> Categories_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Categories_SelectAll_Result>("Categories_SelectAll");
        }
    
        public virtual ObjectResult<Categories_SelectOne_Result> Categories_SelectOne(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Categories_SelectOne_Result>("Categories_SelectOne", iDParameter);
        }
    
        public virtual int Categories_Update(Nullable<long> iD, string categoryName, Nullable<long> idCode_category)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            var idCode_categoryParameter = idCode_category.HasValue ?
                new ObjectParameter("idCode_category", idCode_category) :
                new ObjectParameter("idCode_category", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Categories_Update", iDParameter, categoryNameParameter, idCode_categoryParameter);
        }
    
        public virtual int Cities_Delete(Nullable<long> cityID)
        {
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Cities_Delete", cityIDParameter);
        }
    
        public virtual int Cities_Insert(string cityName, Nullable<long> stateID, Nullable<System.DateTime> lUD, Nullable<long> lUU, ObjectParameter cityID)
        {
            var cityNameParameter = cityName != null ?
                new ObjectParameter("CityName", cityName) :
                new ObjectParameter("CityName", typeof(string));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(long));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Cities_Insert", cityNameParameter, stateIDParameter, lUDParameter, lUUParameter, cityID);
        }
    
        public virtual ObjectResult<Cities_SelectAll_Result> Cities_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Cities_SelectAll_Result>("Cities_SelectAll");
        }
    
        public virtual ObjectResult<Cities_SelectOne_Result> Cities_SelectOne(Nullable<long> cityID)
        {
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Cities_SelectOne_Result>("Cities_SelectOne", cityIDParameter);
        }
    
        public virtual ObjectResult<Cities_SelectOneGroup_Result> Cities_SelectOneGroup(Nullable<long> stateID)
        {
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Cities_SelectOneGroup_Result>("Cities_SelectOneGroup", stateIDParameter);
        }
    
        public virtual int Cities_Update(Nullable<long> cityID, string cityName, Nullable<long> stateID, Nullable<System.DateTime> lUD, Nullable<long> lUU)
        {
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(long));
    
            var cityNameParameter = cityName != null ?
                new ObjectParameter("CityName", cityName) :
                new ObjectParameter("CityName", typeof(string));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(long));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Cities_Update", cityIDParameter, cityNameParameter, stateIDParameter, lUDParameter, lUUParameter);
        }
    
        public virtual int Companies_Delete(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Companies_Delete", iDParameter);
        }
    
        public virtual int Companies_Insert(string companyName, Nullable<bool> isDefault, ObjectParameter iD)
        {
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var isDefaultParameter = isDefault.HasValue ?
                new ObjectParameter("IsDefault", isDefault) :
                new ObjectParameter("IsDefault", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Companies_Insert", companyNameParameter, isDefaultParameter, iD);
        }
    
        public virtual ObjectResult<Companies_SelectAll_Result> Companies_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Companies_SelectAll_Result>("Companies_SelectAll");
        }
    
        public virtual ObjectResult<Companies_SelectOne_Result> Companies_SelectOne(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Companies_SelectOne_Result>("Companies_SelectOne", iDParameter);
        }
    
        public virtual int Companies_Sup_Delete(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Companies_Sup_Delete", iDParameter);
        }
    
        public virtual int Companies_Sup_DeleteOneGroup(Nullable<long> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Companies_Sup_DeleteOneGroup", companyIDParameter);
        }
    
        public virtual int Companies_Sup_Insert(string name, Nullable<long> userID, Nullable<long> companyID, ObjectParameter iD)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Companies_Sup_Insert", nameParameter, userIDParameter, companyIDParameter, iD);
        }
    
        public virtual ObjectResult<Companies_Sup_SelectAll_Result> Companies_Sup_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Companies_Sup_SelectAll_Result>("Companies_Sup_SelectAll");
        }
    
        public virtual ObjectResult<Companies_Sup_SelectOne_Result> Companies_Sup_SelectOne(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Companies_Sup_SelectOne_Result>("Companies_Sup_SelectOne", iDParameter);
        }
    
        public virtual ObjectResult<Companies_Sup_SelectOneGroup_Result> Companies_Sup_SelectOneGroup(Nullable<long> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Companies_Sup_SelectOneGroup_Result>("Companies_Sup_SelectOneGroup", companyIDParameter);
        }
    
        public virtual int Companies_Sup_Update(Nullable<long> iD, string name, Nullable<long> userID, Nullable<long> companyID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Companies_Sup_Update", iDParameter, nameParameter, userIDParameter, companyIDParameter);
        }
    
        public virtual int Companies_Sup_UpdateOneGroup(Nullable<long> companyID, Nullable<long> companyIDOld)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(long));
    
            var companyIDOldParameter = companyIDOld.HasValue ?
                new ObjectParameter("CompanyIDOld", companyIDOld) :
                new ObjectParameter("CompanyIDOld", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Companies_Sup_UpdateOneGroup", companyIDParameter, companyIDOldParameter);
        }
    
        public virtual int Companies_Update(Nullable<long> iD, string companyName, Nullable<bool> isDefault)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var isDefaultParameter = isDefault.HasValue ?
                new ObjectParameter("IsDefault", isDefault) :
                new ObjectParameter("IsDefault", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Companies_Update", iDParameter, companyNameParameter, isDefaultParameter);
        }
    
        public virtual int Countries_Delete(Nullable<long> countryID)
        {
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Countries_Delete", countryIDParameter);
        }
    
        public virtual int Countries_Insert(string countryName, Nullable<System.DateTime> lUD, Nullable<long> lUU, ObjectParameter countryID)
        {
            var countryNameParameter = countryName != null ?
                new ObjectParameter("CountryName", countryName) :
                new ObjectParameter("CountryName", typeof(string));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Countries_Insert", countryNameParameter, lUDParameter, lUUParameter, countryID);
        }
    
        public virtual ObjectResult<Countries_SelectAll_Result> Countries_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Countries_SelectAll_Result>("Countries_SelectAll");
        }
    
        public virtual ObjectResult<Countries_SelectOne_Result> Countries_SelectOne(Nullable<long> countryID)
        {
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Countries_SelectOne_Result>("Countries_SelectOne", countryIDParameter);
        }
    
        public virtual int Countries_Update(Nullable<long> countryID, string countryName, Nullable<System.DateTime> lUD, Nullable<long> lUU)
        {
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(long));
    
            var countryNameParameter = countryName != null ?
                new ObjectParameter("CountryName", countryName) :
                new ObjectParameter("CountryName", typeof(string));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Countries_Update", countryIDParameter, countryNameParameter, lUDParameter, lUUParameter);
        }
    
        public virtual int DTLPeriodicalInventory_Delete(Nullable<long> hDID)
        {
            var hDIDParameter = hDID.HasValue ?
                new ObjectParameter("HDID", hDID) :
                new ObjectParameter("HDID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DTLPeriodicalInventory_Delete", hDIDParameter);
        }
    
        public virtual int DTLPeriodicalInventory_Insert(Nullable<long> hDID, Nullable<long> itemID, Nullable<long> unitId, Nullable<double> currentQTY, Nullable<double> systemQTY, string notes, Nullable<long> lUU, Nullable<System.DateTime> lUD, ObjectParameter id)
        {
            var hDIDParameter = hDID.HasValue ?
                new ObjectParameter("HDID", hDID) :
                new ObjectParameter("HDID", typeof(long));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(long));
    
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(long));
    
            var currentQTYParameter = currentQTY.HasValue ?
                new ObjectParameter("CurrentQTY", currentQTY) :
                new ObjectParameter("CurrentQTY", typeof(double));
    
            var systemQTYParameter = systemQTY.HasValue ?
                new ObjectParameter("SystemQTY", systemQTY) :
                new ObjectParameter("SystemQTY", typeof(double));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DTLPeriodicalInventory_Insert", hDIDParameter, itemIDParameter, unitIdParameter, currentQTYParameter, systemQTYParameter, notesParameter, lUUParameter, lUDParameter, id);
        }
    
        public virtual ObjectResult<DTLPeriodicalInventory_SelectAll_Result> DTLPeriodicalInventory_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DTLPeriodicalInventory_SelectAll_Result>("DTLPeriodicalInventory_SelectAll");
        }
    
        public virtual ObjectResult<DTLPeriodicalInventory_SelectOneGroup_Result> DTLPeriodicalInventory_SelectOneGroup(Nullable<long> hDID, Nullable<long> storeID)
        {
            var hDIDParameter = hDID.HasValue ?
                new ObjectParameter("HDID", hDID) :
                new ObjectParameter("HDID", typeof(long));
    
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("StoreID", storeID) :
                new ObjectParameter("StoreID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DTLPeriodicalInventory_SelectOneGroup_Result>("DTLPeriodicalInventory_SelectOneGroup", hDIDParameter, storeIDParameter);
        }
    
        public virtual int DTLPurchaseBill_Delete(Nullable<long> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DTLPurchaseBill_Delete", idParameter);
        }
    
        public virtual int DTLPurchaseBill_DeleteAllWHDId(Nullable<long> hDId)
        {
            var hDIdParameter = hDId.HasValue ?
                new ObjectParameter("HDId", hDId) :
                new ObjectParameter("HDId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DTLPurchaseBill_DeleteAllWHDId", hDIdParameter);
        }
    
        public virtual int DTLPurchaseBill_Insert(Nullable<long> hDId, Nullable<long> itemId, Nullable<long> unitId, Nullable<long> supplierUnite, Nullable<double> quantity, Nullable<double> realAmount, Nullable<double> qTYBonus, Nullable<decimal> price, Nullable<decimal> priceCost, Nullable<decimal> totalCost, Nullable<decimal> ccTotalCostDiscount, Nullable<decimal> defultPrice, Nullable<decimal> priceCostDiscount, Nullable<decimal> discountValue, Nullable<double> discountPercentage, Nullable<decimal> tPriceAfterDiscount, Nullable<decimal> totalDefultPrice, string notes, Nullable<long> lUU, Nullable<System.DateTime> lUD, ObjectParameter id)
        {
            var hDIdParameter = hDId.HasValue ?
                new ObjectParameter("HDId", hDId) :
                new ObjectParameter("HDId", typeof(long));
    
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(long));
    
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(long));
    
            var supplierUniteParameter = supplierUnite.HasValue ?
                new ObjectParameter("SupplierUnite", supplierUnite) :
                new ObjectParameter("SupplierUnite", typeof(long));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(double));
    
            var realAmountParameter = realAmount.HasValue ?
                new ObjectParameter("realAmount", realAmount) :
                new ObjectParameter("realAmount", typeof(double));
    
            var qTYBonusParameter = qTYBonus.HasValue ?
                new ObjectParameter("QTYBonus", qTYBonus) :
                new ObjectParameter("QTYBonus", typeof(double));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            var priceCostParameter = priceCost.HasValue ?
                new ObjectParameter("priceCost", priceCost) :
                new ObjectParameter("priceCost", typeof(decimal));
    
            var totalCostParameter = totalCost.HasValue ?
                new ObjectParameter("TotalCost", totalCost) :
                new ObjectParameter("TotalCost", typeof(decimal));
    
            var ccTotalCostDiscountParameter = ccTotalCostDiscount.HasValue ?
                new ObjectParameter("ccTotalCostDiscount", ccTotalCostDiscount) :
                new ObjectParameter("ccTotalCostDiscount", typeof(decimal));
    
            var defultPriceParameter = defultPrice.HasValue ?
                new ObjectParameter("DefultPrice", defultPrice) :
                new ObjectParameter("DefultPrice", typeof(decimal));
    
            var priceCostDiscountParameter = priceCostDiscount.HasValue ?
                new ObjectParameter("PriceCostDiscount", priceCostDiscount) :
                new ObjectParameter("PriceCostDiscount", typeof(decimal));
    
            var discountValueParameter = discountValue.HasValue ?
                new ObjectParameter("DiscountValue", discountValue) :
                new ObjectParameter("DiscountValue", typeof(decimal));
    
            var discountPercentageParameter = discountPercentage.HasValue ?
                new ObjectParameter("DiscountPercentage", discountPercentage) :
                new ObjectParameter("DiscountPercentage", typeof(double));
    
            var tPriceAfterDiscountParameter = tPriceAfterDiscount.HasValue ?
                new ObjectParameter("TPriceAfterDiscount", tPriceAfterDiscount) :
                new ObjectParameter("TPriceAfterDiscount", typeof(decimal));
    
            var totalDefultPriceParameter = totalDefultPrice.HasValue ?
                new ObjectParameter("TotalDefultPrice", totalDefultPrice) :
                new ObjectParameter("TotalDefultPrice", typeof(decimal));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DTLPurchaseBill_Insert", hDIdParameter, itemIdParameter, unitIdParameter, supplierUniteParameter, quantityParameter, realAmountParameter, qTYBonusParameter, priceParameter, priceCostParameter, totalCostParameter, ccTotalCostDiscountParameter, defultPriceParameter, priceCostDiscountParameter, discountValueParameter, discountPercentageParameter, tPriceAfterDiscountParameter, totalDefultPriceParameter, notesParameter, lUUParameter, lUDParameter, id);
        }
    
        public virtual ObjectResult<DTLPurchaseBill_SelectAll_Result> DTLPurchaseBill_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DTLPurchaseBill_SelectAll_Result>("DTLPurchaseBill_SelectAll");
        }
    
        public virtual ObjectResult<DTLPurchaseBill_SelectAllWIdSupplier_Result> DTLPurchaseBill_SelectAllWIdSupplier(Nullable<long> suppId, Nullable<long> periodId)
        {
            var suppIdParameter = suppId.HasValue ?
                new ObjectParameter("SuppId", suppId) :
                new ObjectParameter("SuppId", typeof(long));
    
            var periodIdParameter = periodId.HasValue ?
                new ObjectParameter("PeriodId", periodId) :
                new ObjectParameter("PeriodId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DTLPurchaseBill_SelectAllWIdSupplier_Result>("DTLPurchaseBill_SelectAllWIdSupplier", suppIdParameter, periodIdParameter);
        }
    
        public virtual ObjectResult<DTLPurchaseBill_SelectCurrentQuantity_Result> DTLPurchaseBill_SelectCurrentQuantity(Nullable<long> hDId, Nullable<long> itemId)
        {
            var hDIdParameter = hDId.HasValue ?
                new ObjectParameter("HDId", hDId) :
                new ObjectParameter("HDId", typeof(long));
    
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DTLPurchaseBill_SelectCurrentQuantity_Result>("DTLPurchaseBill_SelectCurrentQuantity", hDIdParameter, itemIdParameter);
        }
    
        public virtual ObjectResult<DTLPurchaseBill_SelectOne_Result> DTLPurchaseBill_SelectOne(Nullable<long> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DTLPurchaseBill_SelectOne_Result>("DTLPurchaseBill_SelectOne", idParameter);
        }
    
        public virtual ObjectResult<DTLPurchaseBill_SelectOneGroup_Result> DTLPurchaseBill_SelectOneGroup(Nullable<long> hDId)
        {
            var hDIdParameter = hDId.HasValue ?
                new ObjectParameter("HDId", hDId) :
                new ObjectParameter("HDId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DTLPurchaseBill_SelectOneGroup_Result>("DTLPurchaseBill_SelectOneGroup", hDIdParameter);
        }
    
        public virtual int DTLPurchaseBill_Update(Nullable<long> id, Nullable<long> hDId, Nullable<long> itemId, Nullable<long> unitId, Nullable<double> quantity, Nullable<double> qTYBonus, Nullable<decimal> price, Nullable<decimal> priceCostDiscount, Nullable<decimal> discountValue, Nullable<double> discountPercentage, Nullable<decimal> tPriceAfterDiscount, Nullable<double> currentQuantity, string notes, Nullable<long> lUU, Nullable<System.DateTime> lUD)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var hDIdParameter = hDId.HasValue ?
                new ObjectParameter("HDId", hDId) :
                new ObjectParameter("HDId", typeof(long));
    
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(long));
    
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(long));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(double));
    
            var qTYBonusParameter = qTYBonus.HasValue ?
                new ObjectParameter("QTYBonus", qTYBonus) :
                new ObjectParameter("QTYBonus", typeof(double));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            var priceCostDiscountParameter = priceCostDiscount.HasValue ?
                new ObjectParameter("PriceCostDiscount", priceCostDiscount) :
                new ObjectParameter("PriceCostDiscount", typeof(decimal));
    
            var discountValueParameter = discountValue.HasValue ?
                new ObjectParameter("DiscountValue", discountValue) :
                new ObjectParameter("DiscountValue", typeof(decimal));
    
            var discountPercentageParameter = discountPercentage.HasValue ?
                new ObjectParameter("DiscountPercentage", discountPercentage) :
                new ObjectParameter("DiscountPercentage", typeof(double));
    
            var tPriceAfterDiscountParameter = tPriceAfterDiscount.HasValue ?
                new ObjectParameter("TPriceAfterDiscount", tPriceAfterDiscount) :
                new ObjectParameter("TPriceAfterDiscount", typeof(decimal));
    
            var currentQuantityParameter = currentQuantity.HasValue ?
                new ObjectParameter("CurrentQuantity", currentQuantity) :
                new ObjectParameter("CurrentQuantity", typeof(double));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DTLPurchaseBill_Update", idParameter, hDIdParameter, itemIdParameter, unitIdParameter, quantityParameter, qTYBonusParameter, priceParameter, priceCostDiscountParameter, discountValueParameter, discountPercentageParameter, tPriceAfterDiscountParameter, currentQuantityParameter, notesParameter, lUUParameter, lUDParameter);
        }
    
        public virtual int DTLPurchaseCheckTest_DeleteAllOneGroup(Nullable<long> hDId)
        {
            var hDIdParameter = hDId.HasValue ?
                new ObjectParameter("HDId", hDId) :
                new ObjectParameter("HDId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DTLPurchaseCheckTest_DeleteAllOneGroup", hDIdParameter);
        }
    
        public virtual int DTLPurchaseCheckTest_Insert(Nullable<long> hDId, Nullable<long> itemId, Nullable<long> unitId, Nullable<double> quantity, Nullable<double> returnQuantity, Nullable<decimal> price, Nullable<decimal> priceCost, Nullable<decimal> totalCost, Nullable<long> supplierUnite, Nullable<decimal> total, string notes, Nullable<long> lUU, Nullable<System.DateTime> lUD, ObjectParameter id)
        {
            var hDIdParameter = hDId.HasValue ?
                new ObjectParameter("HDId", hDId) :
                new ObjectParameter("HDId", typeof(long));
    
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(long));
    
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(long));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(double));
    
            var returnQuantityParameter = returnQuantity.HasValue ?
                new ObjectParameter("ReturnQuantity", returnQuantity) :
                new ObjectParameter("ReturnQuantity", typeof(double));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            var priceCostParameter = priceCost.HasValue ?
                new ObjectParameter("priceCost", priceCost) :
                new ObjectParameter("priceCost", typeof(decimal));
    
            var totalCostParameter = totalCost.HasValue ?
                new ObjectParameter("TotalCost", totalCost) :
                new ObjectParameter("TotalCost", typeof(decimal));
    
            var supplierUniteParameter = supplierUnite.HasValue ?
                new ObjectParameter("SupplierUnite", supplierUnite) :
                new ObjectParameter("SupplierUnite", typeof(long));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(decimal));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DTLPurchaseCheckTest_Insert", hDIdParameter, itemIdParameter, unitIdParameter, quantityParameter, returnQuantityParameter, priceParameter, priceCostParameter, totalCostParameter, supplierUniteParameter, totalParameter, notesParameter, lUUParameter, lUDParameter, id);
        }
    
        public virtual ObjectResult<DTLPurchaseCheckTest_SelectOneGroup_Result> DTLPurchaseCheckTest_SelectOneGroup(Nullable<long> hDId)
        {
            var hDIdParameter = hDId.HasValue ?
                new ObjectParameter("HDId", hDId) :
                new ObjectParameter("HDId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DTLPurchaseCheckTest_SelectOneGroup_Result>("DTLPurchaseCheckTest_SelectOneGroup", hDIdParameter);
        }
    
        public virtual int DTLPurchaseOrder_Delete(Nullable<long> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DTLPurchaseOrder_Delete", idParameter);
        }
    
        public virtual int DTLPurchaseOrder_DeleteAllWHDId(Nullable<long> hDId)
        {
            var hDIdParameter = hDId.HasValue ?
                new ObjectParameter("HDId", hDId) :
                new ObjectParameter("HDId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DTLPurchaseOrder_DeleteAllWHDId", hDIdParameter);
        }
    
        public virtual int DTLPurchaseOrder_DeleteUsed(Nullable<long> periodId)
        {
            var periodIdParameter = periodId.HasValue ?
                new ObjectParameter("PeriodId", periodId) :
                new ObjectParameter("PeriodId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DTLPurchaseOrder_DeleteUsed", periodIdParameter);
        }
    
        public virtual int DTLPurchaseOrder_Insert(Nullable<long> hDId, Nullable<long> itemId, Nullable<long> unitId, Nullable<long> supplierUnite, Nullable<long> storeId, Nullable<long> currentQuantity, Nullable<double> quantity, Nullable<decimal> purchasePrice, Nullable<decimal> costPrice, Nullable<decimal> defultPrice, Nullable<decimal> total, Nullable<decimal> totalCost, Nullable<decimal> totalDefultPrice, string notes, Nullable<long> lUU, Nullable<System.DateTime> lUD, ObjectParameter id)
        {
            var hDIdParameter = hDId.HasValue ?
                new ObjectParameter("HDId", hDId) :
                new ObjectParameter("HDId", typeof(long));
    
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(long));
    
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(long));
    
            var supplierUniteParameter = supplierUnite.HasValue ?
                new ObjectParameter("SupplierUnite", supplierUnite) :
                new ObjectParameter("SupplierUnite", typeof(long));
    
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("storeId", storeId) :
                new ObjectParameter("storeId", typeof(long));
    
            var currentQuantityParameter = currentQuantity.HasValue ?
                new ObjectParameter("currentQuantity", currentQuantity) :
                new ObjectParameter("currentQuantity", typeof(long));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(double));
    
            var purchasePriceParameter = purchasePrice.HasValue ?
                new ObjectParameter("PurchasePrice", purchasePrice) :
                new ObjectParameter("PurchasePrice", typeof(decimal));
    
            var costPriceParameter = costPrice.HasValue ?
                new ObjectParameter("CostPrice", costPrice) :
                new ObjectParameter("CostPrice", typeof(decimal));
    
            var defultPriceParameter = defultPrice.HasValue ?
                new ObjectParameter("DefultPrice", defultPrice) :
                new ObjectParameter("DefultPrice", typeof(decimal));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("total", total) :
                new ObjectParameter("total", typeof(decimal));
    
            var totalCostParameter = totalCost.HasValue ?
                new ObjectParameter("TotalCost", totalCost) :
                new ObjectParameter("TotalCost", typeof(decimal));
    
            var totalDefultPriceParameter = totalDefultPrice.HasValue ?
                new ObjectParameter("TotalDefultPrice", totalDefultPrice) :
                new ObjectParameter("TotalDefultPrice", typeof(decimal));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DTLPurchaseOrder_Insert", hDIdParameter, itemIdParameter, unitIdParameter, supplierUniteParameter, storeIdParameter, currentQuantityParameter, quantityParameter, purchasePriceParameter, costPriceParameter, defultPriceParameter, totalParameter, totalCostParameter, totalDefultPriceParameter, notesParameter, lUUParameter, lUDParameter, id);
        }
    
        public virtual ObjectResult<DTLPurchaseOrder_SelectAll_Result> DTLPurchaseOrder_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DTLPurchaseOrder_SelectAll_Result>("DTLPurchaseOrder_SelectAll");
        }
    
        public virtual ObjectResult<Nullable<long>> DTLPurchaseOrder_SelectallItemactiveused()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("DTLPurchaseOrder_SelectallItemactiveused");
        }
    
        public virtual ObjectResult<DTLPurchaseOrder_SelectAllItemNotUsed_Result> DTLPurchaseOrder_SelectAllItemNotUsed(Nullable<long> periodId)
        {
            var periodIdParameter = periodId.HasValue ?
                new ObjectParameter("PeriodId", periodId) :
                new ObjectParameter("PeriodId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DTLPurchaseOrder_SelectAllItemNotUsed_Result>("DTLPurchaseOrder_SelectAllItemNotUsed", periodIdParameter);
        }
    
        public virtual ObjectResult<DTLPurchaseOrder_SelectOne_Result> DTLPurchaseOrder_SelectOne(Nullable<long> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DTLPurchaseOrder_SelectOne_Result>("DTLPurchaseOrder_SelectOne", idParameter);
        }
    
        public virtual ObjectResult<DTLPurchaseOrder_SelectOneGroup_Result> DTLPurchaseOrder_SelectOneGroup(Nullable<long> hDId)
        {
            var hDIdParameter = hDId.HasValue ?
                new ObjectParameter("HDId", hDId) :
                new ObjectParameter("HDId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DTLPurchaseOrder_SelectOneGroup_Result>("DTLPurchaseOrder_SelectOneGroup", hDIdParameter);
        }
    
        public virtual ObjectResult<DTLPurchaseOrder_SelectOneGroupByrealCost_Result> DTLPurchaseOrder_SelectOneGroupByrealCost(Nullable<long> hDId)
        {
            var hDIdParameter = hDId.HasValue ?
                new ObjectParameter("HDId", hDId) :
                new ObjectParameter("HDId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DTLPurchaseOrder_SelectOneGroupByrealCost_Result>("DTLPurchaseOrder_SelectOneGroupByrealCost", hDIdParameter);
        }
    
        public virtual int DTLPurchaseOrder_Update(Nullable<long> id, Nullable<long> hDId, Nullable<long> itemId, Nullable<long> unitId, Nullable<double> quantity, string notes, Nullable<long> lUU, Nullable<System.DateTime> lUD)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var hDIdParameter = hDId.HasValue ?
                new ObjectParameter("HDId", hDId) :
                new ObjectParameter("HDId", typeof(long));
    
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(long));
    
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(long));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(double));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DTLPurchaseOrder_Update", idParameter, hDIdParameter, itemIdParameter, unitIdParameter, quantityParameter, notesParameter, lUUParameter, lUDParameter);
        }
    
        public virtual int DTLPurchaseReturn_Delete(Nullable<long> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DTLPurchaseReturn_Delete", idParameter);
        }
    
        public virtual int DTLPurchaseReturn_DeleteAllWHDIdLogic(Nullable<long> hDId)
        {
            var hDIdParameter = hDId.HasValue ?
                new ObjectParameter("HDId", hDId) :
                new ObjectParameter("HDId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DTLPurchaseReturn_DeleteAllWHDIdLogic", hDIdParameter);
        }
    
        public virtual int DTLPurchaseReturn_Insert(Nullable<long> hDId, Nullable<long> itemId, Nullable<long> unitId, Nullable<double> quantity, Nullable<decimal> price, Nullable<decimal> tPriceBeforeDiscount, Nullable<decimal> totalCostPrice, Nullable<decimal> discountValue, Nullable<double> discountPercentage, Nullable<decimal> tPriceAfterDiscount, Nullable<int> reasonId, Nullable<long> hDPurchaseBillId, string notes, Nullable<long> lUU, Nullable<System.DateTime> lUD, Nullable<long> storeId, Nullable<double> returnQuantity, Nullable<decimal> priceCost, Nullable<decimal> priceCostDiscount, Nullable<decimal> discountValueTotal, Nullable<double> discountPercentageTotal, ObjectParameter id)
        {
            var hDIdParameter = hDId.HasValue ?
                new ObjectParameter("HDId", hDId) :
                new ObjectParameter("HDId", typeof(long));
    
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(long));
    
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(long));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(double));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            var tPriceBeforeDiscountParameter = tPriceBeforeDiscount.HasValue ?
                new ObjectParameter("TPriceBeforeDiscount", tPriceBeforeDiscount) :
                new ObjectParameter("TPriceBeforeDiscount", typeof(decimal));
    
            var totalCostPriceParameter = totalCostPrice.HasValue ?
                new ObjectParameter("TotalCostPrice", totalCostPrice) :
                new ObjectParameter("TotalCostPrice", typeof(decimal));
    
            var discountValueParameter = discountValue.HasValue ?
                new ObjectParameter("DiscountValue", discountValue) :
                new ObjectParameter("DiscountValue", typeof(decimal));
    
            var discountPercentageParameter = discountPercentage.HasValue ?
                new ObjectParameter("DiscountPercentage", discountPercentage) :
                new ObjectParameter("DiscountPercentage", typeof(double));
    
            var tPriceAfterDiscountParameter = tPriceAfterDiscount.HasValue ?
                new ObjectParameter("TPriceAfterDiscount", tPriceAfterDiscount) :
                new ObjectParameter("TPriceAfterDiscount", typeof(decimal));
    
            var reasonIdParameter = reasonId.HasValue ?
                new ObjectParameter("ReasonId", reasonId) :
                new ObjectParameter("ReasonId", typeof(int));
    
            var hDPurchaseBillIdParameter = hDPurchaseBillId.HasValue ?
                new ObjectParameter("HDPurchaseBillId", hDPurchaseBillId) :
                new ObjectParameter("HDPurchaseBillId", typeof(long));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("storeId", storeId) :
                new ObjectParameter("storeId", typeof(long));
    
            var returnQuantityParameter = returnQuantity.HasValue ?
                new ObjectParameter("ReturnQuantity", returnQuantity) :
                new ObjectParameter("ReturnQuantity", typeof(double));
    
            var priceCostParameter = priceCost.HasValue ?
                new ObjectParameter("priceCost", priceCost) :
                new ObjectParameter("priceCost", typeof(decimal));
    
            var priceCostDiscountParameter = priceCostDiscount.HasValue ?
                new ObjectParameter("PriceCostDiscount", priceCostDiscount) :
                new ObjectParameter("PriceCostDiscount", typeof(decimal));
    
            var discountValueTotalParameter = discountValueTotal.HasValue ?
                new ObjectParameter("DiscountValueTotal", discountValueTotal) :
                new ObjectParameter("DiscountValueTotal", typeof(decimal));
    
            var discountPercentageTotalParameter = discountPercentageTotal.HasValue ?
                new ObjectParameter("DiscountPercentageTotal", discountPercentageTotal) :
                new ObjectParameter("DiscountPercentageTotal", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DTLPurchaseReturn_Insert", hDIdParameter, itemIdParameter, unitIdParameter, quantityParameter, priceParameter, tPriceBeforeDiscountParameter, totalCostPriceParameter, discountValueParameter, discountPercentageParameter, tPriceAfterDiscountParameter, reasonIdParameter, hDPurchaseBillIdParameter, notesParameter, lUUParameter, lUDParameter, storeIdParameter, returnQuantityParameter, priceCostParameter, priceCostDiscountParameter, discountValueTotalParameter, discountPercentageTotalParameter, id);
        }
    
        public virtual int DTLPurchaseReturn_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DTLPurchaseReturn_SelectAll");
        }
    
        public virtual int DTLPurchaseReturn_SelectOne(Nullable<long> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DTLPurchaseReturn_SelectOne", idParameter);
        }
    
        public virtual ObjectResult<DTLPurchaseReturn_SelectOneGroup_Result> DTLPurchaseReturn_SelectOneGroup(Nullable<long> hDId)
        {
            var hDIdParameter = hDId.HasValue ?
                new ObjectParameter("HDId", hDId) :
                new ObjectParameter("HDId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DTLPurchaseReturn_SelectOneGroup_Result>("DTLPurchaseReturn_SelectOneGroup", hDIdParameter);
        }
    
        public virtual int DTLPurchaseReturn_Update(Nullable<long> id, Nullable<long> hDId, Nullable<long> itemId, Nullable<long> unitId, Nullable<double> quantity, Nullable<decimal> price, Nullable<decimal> tPriceBeforeDiscount, Nullable<decimal> discountValue, Nullable<double> discountPercentage, Nullable<decimal> tPriceAfterDiscount, Nullable<int> reasonId, Nullable<int> return_type, Nullable<long> hDPurchaseBillId, string notes, Nullable<long> lUU, Nullable<System.DateTime> lUD)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var hDIdParameter = hDId.HasValue ?
                new ObjectParameter("HDId", hDId) :
                new ObjectParameter("HDId", typeof(long));
    
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(long));
    
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(long));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(double));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            var tPriceBeforeDiscountParameter = tPriceBeforeDiscount.HasValue ?
                new ObjectParameter("TPriceBeforeDiscount", tPriceBeforeDiscount) :
                new ObjectParameter("TPriceBeforeDiscount", typeof(decimal));
    
            var discountValueParameter = discountValue.HasValue ?
                new ObjectParameter("DiscountValue", discountValue) :
                new ObjectParameter("DiscountValue", typeof(decimal));
    
            var discountPercentageParameter = discountPercentage.HasValue ?
                new ObjectParameter("DiscountPercentage", discountPercentage) :
                new ObjectParameter("DiscountPercentage", typeof(double));
    
            var tPriceAfterDiscountParameter = tPriceAfterDiscount.HasValue ?
                new ObjectParameter("TPriceAfterDiscount", tPriceAfterDiscount) :
                new ObjectParameter("TPriceAfterDiscount", typeof(decimal));
    
            var reasonIdParameter = reasonId.HasValue ?
                new ObjectParameter("ReasonId", reasonId) :
                new ObjectParameter("ReasonId", typeof(int));
    
            var return_typeParameter = return_type.HasValue ?
                new ObjectParameter("Return_type", return_type) :
                new ObjectParameter("Return_type", typeof(int));
    
            var hDPurchaseBillIdParameter = hDPurchaseBillId.HasValue ?
                new ObjectParameter("HDPurchaseBillId", hDPurchaseBillId) :
                new ObjectParameter("HDPurchaseBillId", typeof(long));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DTLPurchaseReturn_Update", idParameter, hDIdParameter, itemIdParameter, unitIdParameter, quantityParameter, priceParameter, tPriceBeforeDiscountParameter, discountValueParameter, discountPercentageParameter, tPriceAfterDiscountParameter, reasonIdParameter, return_typeParameter, hDPurchaseBillIdParameter, notesParameter, lUUParameter, lUDParameter);
        }
    
        public virtual int DTLTransferMaterialsNew_Delete(Nullable<long> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DTLTransferMaterialsNew_Delete", idParameter);
        }
    
        public virtual int DTLTransferMaterialsNew_DeleteOneGroup(Nullable<long> hDID)
        {
            var hDIDParameter = hDID.HasValue ?
                new ObjectParameter("HDID", hDID) :
                new ObjectParameter("HDID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DTLTransferMaterialsNew_DeleteOneGroup", hDIDParameter);
        }
    
        public virtual int DTLTransferMaterialsNew_Insert(Nullable<long> hDID, Nullable<long> itemID, Nullable<long> unitId, Nullable<double> requestQTY, Nullable<double> transferQTY, string notes, Nullable<long> lUU, Nullable<System.DateTime> lUD, Nullable<decimal> defultPrice, Nullable<decimal> costPrice, Nullable<decimal> purchasePrice, ObjectParameter id)
        {
            var hDIDParameter = hDID.HasValue ?
                new ObjectParameter("HDID", hDID) :
                new ObjectParameter("HDID", typeof(long));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(long));
    
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(long));
    
            var requestQTYParameter = requestQTY.HasValue ?
                new ObjectParameter("RequestQTY", requestQTY) :
                new ObjectParameter("RequestQTY", typeof(double));
    
            var transferQTYParameter = transferQTY.HasValue ?
                new ObjectParameter("TransferQTY", transferQTY) :
                new ObjectParameter("TransferQTY", typeof(double));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            var defultPriceParameter = defultPrice.HasValue ?
                new ObjectParameter("DefultPrice", defultPrice) :
                new ObjectParameter("DefultPrice", typeof(decimal));
    
            var costPriceParameter = costPrice.HasValue ?
                new ObjectParameter("CostPrice", costPrice) :
                new ObjectParameter("CostPrice", typeof(decimal));
    
            var purchasePriceParameter = purchasePrice.HasValue ?
                new ObjectParameter("PurchasePrice", purchasePrice) :
                new ObjectParameter("PurchasePrice", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DTLTransferMaterialsNew_Insert", hDIDParameter, itemIDParameter, unitIdParameter, requestQTYParameter, transferQTYParameter, notesParameter, lUUParameter, lUDParameter, defultPriceParameter, costPriceParameter, purchasePriceParameter, id);
        }
    
        public virtual ObjectResult<DTLTransferMaterialsNew_SelectAll_Result> DTLTransferMaterialsNew_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DTLTransferMaterialsNew_SelectAll_Result>("DTLTransferMaterialsNew_SelectAll");
        }
    
        public virtual ObjectResult<DTLTransferMaterialsNew_SelectOne_Result> DTLTransferMaterialsNew_SelectOne(Nullable<long> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DTLTransferMaterialsNew_SelectOne_Result>("DTLTransferMaterialsNew_SelectOne", idParameter);
        }
    
        public virtual ObjectResult<DTLTransferMaterialsNew_SelectOneGroup_Result> DTLTransferMaterialsNew_SelectOneGroup(Nullable<long> hDID)
        {
            var hDIDParameter = hDID.HasValue ?
                new ObjectParameter("HDID", hDID) :
                new ObjectParameter("HDID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DTLTransferMaterialsNew_SelectOneGroup_Result>("DTLTransferMaterialsNew_SelectOneGroup", hDIDParameter);
        }
    
        public virtual int DTLTransferRequestTest_DeleteAllWHDIdLogic(Nullable<long> hDID)
        {
            var hDIDParameter = hDID.HasValue ?
                new ObjectParameter("HDID", hDID) :
                new ObjectParameter("HDID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DTLTransferRequestTest_DeleteAllWHDIdLogic", hDIDParameter);
        }
    
        public virtual int DTLTransferRequestTest_Insert(Nullable<long> hDId, Nullable<long> itemId, Nullable<long> unitId, Nullable<double> requestQty, Nullable<double> transferQty, Nullable<decimal> defultPrice, Nullable<decimal> costPrice, Nullable<decimal> purchasePrice, string notes, Nullable<long> lUU, Nullable<System.DateTime> lUD, ObjectParameter id)
        {
            var hDIdParameter = hDId.HasValue ?
                new ObjectParameter("HDId", hDId) :
                new ObjectParameter("HDId", typeof(long));
    
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(long));
    
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(long));
    
            var requestQtyParameter = requestQty.HasValue ?
                new ObjectParameter("RequestQty", requestQty) :
                new ObjectParameter("RequestQty", typeof(double));
    
            var transferQtyParameter = transferQty.HasValue ?
                new ObjectParameter("TransferQty", transferQty) :
                new ObjectParameter("TransferQty", typeof(double));
    
            var defultPriceParameter = defultPrice.HasValue ?
                new ObjectParameter("DefultPrice", defultPrice) :
                new ObjectParameter("DefultPrice", typeof(decimal));
    
            var costPriceParameter = costPrice.HasValue ?
                new ObjectParameter("CostPrice", costPrice) :
                new ObjectParameter("CostPrice", typeof(decimal));
    
            var purchasePriceParameter = purchasePrice.HasValue ?
                new ObjectParameter("PurchasePrice", purchasePrice) :
                new ObjectParameter("PurchasePrice", typeof(decimal));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DTLTransferRequestTest_Insert", hDIdParameter, itemIdParameter, unitIdParameter, requestQtyParameter, transferQtyParameter, defultPriceParameter, costPriceParameter, purchasePriceParameter, notesParameter, lUUParameter, lUDParameter, id);
        }
    
        public virtual ObjectResult<DTLTransferRequestTest_SelectOneGroup_Result> DTLTransferRequestTest_SelectOneGroup(Nullable<long> hDId)
        {
            var hDIdParameter = hDId.HasValue ?
                new ObjectParameter("HDId", hDId) :
                new ObjectParameter("HDId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DTLTransferRequestTest_SelectOneGroup_Result>("DTLTransferRequestTest_SelectOneGroup", hDIdParameter);
        }
    
        public virtual int EducationGrades_Delete(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EducationGrades_Delete", iDParameter);
        }
    
        public virtual int EducationGrades_Insert(string name, Nullable<System.DateTime> lUD, Nullable<long> lUU, ObjectParameter iD)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EducationGrades_Insert", nameParameter, lUDParameter, lUUParameter, iD);
        }
    
        public virtual ObjectResult<EducationGrades_SelectAll_Result> EducationGrades_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EducationGrades_SelectAll_Result>("EducationGrades_SelectAll");
        }
    
        public virtual ObjectResult<EducationGrades_SelectOne_Result> EducationGrades_SelectOne(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EducationGrades_SelectOne_Result>("EducationGrades_SelectOne", iDParameter);
        }
    
        public virtual int EducationGrades_Update(Nullable<long> iD, string name, Nullable<System.DateTime> lUD, Nullable<long> lUU)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EducationGrades_Update", iDParameter, nameParameter, lUDParameter, lUUParameter);
        }
    
        public virtual int EmplCours_DeleteAllEmpGroup(Nullable<long> emplIdCode)
        {
            var emplIdCodeParameter = emplIdCode.HasValue ?
                new ObjectParameter("EmplIdCode", emplIdCode) :
                new ObjectParameter("EmplIdCode", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EmplCours_DeleteAllEmpGroup", emplIdCodeParameter);
        }
    
        public virtual int EmplCours_Insert(Nullable<long> emplIdCode, Nullable<long> grade, string courseFeild, string lUU, Nullable<System.DateTime> lUD, ObjectParameter id)
        {
            var emplIdCodeParameter = emplIdCode.HasValue ?
                new ObjectParameter("EmplIdCode", emplIdCode) :
                new ObjectParameter("EmplIdCode", typeof(long));
    
            var gradeParameter = grade.HasValue ?
                new ObjectParameter("Grade", grade) :
                new ObjectParameter("Grade", typeof(long));
    
            var courseFeildParameter = courseFeild != null ?
                new ObjectParameter("CourseFeild", courseFeild) :
                new ObjectParameter("CourseFeild", typeof(string));
    
            var lUUParameter = lUU != null ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(string));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EmplCours_Insert", emplIdCodeParameter, gradeParameter, courseFeildParameter, lUUParameter, lUDParameter, id);
        }
    
        public virtual ObjectResult<EmplCours_SelectAllEmpGroup_Result> EmplCours_SelectAllEmpGroup(Nullable<long> emplIdCode)
        {
            var emplIdCodeParameter = emplIdCode.HasValue ?
                new ObjectParameter("EmplIdCode", emplIdCode) :
                new ObjectParameter("EmplIdCode", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmplCours_SelectAllEmpGroup_Result>("EmplCours_SelectAllEmpGroup", emplIdCodeParameter);
        }
    
        public virtual int EmplCours_Update(Nullable<long> id, Nullable<long> emplIdCode, Nullable<long> grade, string courseFeild, string lUU, Nullable<System.DateTime> lUD)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(long));
    
            var emplIdCodeParameter = emplIdCode.HasValue ?
                new ObjectParameter("EmplIdCode", emplIdCode) :
                new ObjectParameter("EmplIdCode", typeof(long));
    
            var gradeParameter = grade.HasValue ?
                new ObjectParameter("Grade", grade) :
                new ObjectParameter("Grade", typeof(long));
    
            var courseFeildParameter = courseFeild != null ?
                new ObjectParameter("CourseFeild", courseFeild) :
                new ObjectParameter("CourseFeild", typeof(string));
    
            var lUUParameter = lUU != null ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(string));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EmplCours_Update", idParameter, emplIdCodeParameter, gradeParameter, courseFeildParameter, lUUParameter, lUDParameter);
        }
    
        public virtual int EmplLanguge_DeleteAllEmpGroup(Nullable<long> emplIdCode)
        {
            var emplIdCodeParameter = emplIdCode.HasValue ?
                new ObjectParameter("EmplIdCode", emplIdCode) :
                new ObjectParameter("EmplIdCode", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EmplLanguge_DeleteAllEmpGroup", emplIdCodeParameter);
        }
    
        public virtual int EmplLanguge_Insert(Nullable<long> emplIdCode, Nullable<long> langugeName, string reading, string listener, string write, string speaking, string lUU, Nullable<System.DateTime> lUD, ObjectParameter id)
        {
            var emplIdCodeParameter = emplIdCode.HasValue ?
                new ObjectParameter("EmplIdCode", emplIdCode) :
                new ObjectParameter("EmplIdCode", typeof(long));
    
            var langugeNameParameter = langugeName.HasValue ?
                new ObjectParameter("LangugeName", langugeName) :
                new ObjectParameter("LangugeName", typeof(long));
    
            var readingParameter = reading != null ?
                new ObjectParameter("Reading", reading) :
                new ObjectParameter("Reading", typeof(string));
    
            var listenerParameter = listener != null ?
                new ObjectParameter("listener", listener) :
                new ObjectParameter("listener", typeof(string));
    
            var writeParameter = write != null ?
                new ObjectParameter("Write", write) :
                new ObjectParameter("Write", typeof(string));
    
            var speakingParameter = speaking != null ?
                new ObjectParameter("Speaking", speaking) :
                new ObjectParameter("Speaking", typeof(string));
    
            var lUUParameter = lUU != null ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(string));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EmplLanguge_Insert", emplIdCodeParameter, langugeNameParameter, readingParameter, listenerParameter, writeParameter, speakingParameter, lUUParameter, lUDParameter, id);
        }
    
        public virtual ObjectResult<EmplLanguge_SelectAllEmpGroup_Result> EmplLanguge_SelectAllEmpGroup(Nullable<long> emplIdCode)
        {
            var emplIdCodeParameter = emplIdCode.HasValue ?
                new ObjectParameter("EmplIdCode", emplIdCode) :
                new ObjectParameter("EmplIdCode", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmplLanguge_SelectAllEmpGroup_Result>("EmplLanguge_SelectAllEmpGroup", emplIdCodeParameter);
        }
    
        public virtual int EmplLanguge_Update(Nullable<long> id, Nullable<long> emplIdCode, Nullable<long> langugeName, string reading, string listener, string write, string speaking, string lUU, Nullable<System.DateTime> lUD)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(long));
    
            var emplIdCodeParameter = emplIdCode.HasValue ?
                new ObjectParameter("EmplIdCode", emplIdCode) :
                new ObjectParameter("EmplIdCode", typeof(long));
    
            var langugeNameParameter = langugeName.HasValue ?
                new ObjectParameter("LangugeName", langugeName) :
                new ObjectParameter("LangugeName", typeof(long));
    
            var readingParameter = reading != null ?
                new ObjectParameter("Reading", reading) :
                new ObjectParameter("Reading", typeof(string));
    
            var listenerParameter = listener != null ?
                new ObjectParameter("listener", listener) :
                new ObjectParameter("listener", typeof(string));
    
            var writeParameter = write != null ?
                new ObjectParameter("Write", write) :
                new ObjectParameter("Write", typeof(string));
    
            var speakingParameter = speaking != null ?
                new ObjectParameter("Speaking", speaking) :
                new ObjectParameter("Speaking", typeof(string));
    
            var lUUParameter = lUU != null ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(string));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EmplLanguge_Update", idParameter, emplIdCodeParameter, langugeNameParameter, readingParameter, listenerParameter, writeParameter, speakingParameter, lUUParameter, lUDParameter);
        }
    
        public virtual int EmployeDepartment_DeleteEmpGroup(Nullable<long> employeIdCode)
        {
            var employeIdCodeParameter = employeIdCode.HasValue ?
                new ObjectParameter("EmployeIdCode", employeIdCode) :
                new ObjectParameter("EmployeIdCode", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EmployeDepartment_DeleteEmpGroup", employeIdCodeParameter);
        }
    
        public virtual int EmployeDepartment_Insert(Nullable<long> employeIdCode, Nullable<long> hRDepartmentID, Nullable<long> lUU, Nullable<System.DateTime> lUD, ObjectParameter id)
        {
            var employeIdCodeParameter = employeIdCode.HasValue ?
                new ObjectParameter("EmployeIdCode", employeIdCode) :
                new ObjectParameter("EmployeIdCode", typeof(long));
    
            var hRDepartmentIDParameter = hRDepartmentID.HasValue ?
                new ObjectParameter("HRDepartmentID", hRDepartmentID) :
                new ObjectParameter("HRDepartmentID", typeof(long));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EmployeDepartment_Insert", employeIdCodeParameter, hRDepartmentIDParameter, lUUParameter, lUDParameter, id);
        }
    
        public virtual ObjectResult<EmployeDepartment_SelectEmpGroup_Result> EmployeDepartment_SelectEmpGroup(Nullable<long> employeIdCode)
        {
            var employeIdCodeParameter = employeIdCode.HasValue ?
                new ObjectParameter("EmployeIdCode", employeIdCode) :
                new ObjectParameter("EmployeIdCode", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmployeDepartment_SelectEmpGroup_Result>("EmployeDepartment_SelectEmpGroup", employeIdCodeParameter);
        }
    
        public virtual int EmployeDepartment_Update(Nullable<long> id, Nullable<long> employeIdCode, Nullable<long> hRDepartmentID, Nullable<long> lUU, Nullable<System.DateTime> lUD)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var employeIdCodeParameter = employeIdCode.HasValue ?
                new ObjectParameter("EmployeIdCode", employeIdCode) :
                new ObjectParameter("EmployeIdCode", typeof(long));
    
            var hRDepartmentIDParameter = hRDepartmentID.HasValue ?
                new ObjectParameter("HRDepartmentID", hRDepartmentID) :
                new ObjectParameter("HRDepartmentID", typeof(long));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EmployeDepartment_Update", idParameter, employeIdCodeParameter, hRDepartmentIDParameter, lUUParameter, lUDParameter);
        }
    
        public virtual int EmployedInfo_Delete(Nullable<long> idCode)
        {
            var idCodeParameter = idCode.HasValue ?
                new ObjectParameter("IdCode", idCode) :
                new ObjectParameter("IdCode", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EmployedInfo_Delete", idCodeParameter);
        }
    
        public virtual int EmployedInfo_Insert(string name, Nullable<int> statusID, Nullable<long> carID, string department, Nullable<System.DateTime> birthdate, Nullable<long> nationalty, Nullable<long> militaryState, Nullable<long> maritalState, Nullable<long> relgion, Nullable<long> gender, Nullable<long> employmentStatusID, string licenseCarNum, string licenseGun, string passportNum, string nationalNum, string sectionName, string branch, Nullable<int> contractWorkType, string sectorName, string levelOccupation, string occupation, Nullable<long> contractPeriod, Nullable<long> quetReason, string countRenewContract, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string otherQuetReason, Nullable<System.DateTime> quietDate, string projectGraduate, string urlSite, string email, byte[] signatureImage, string systemEmail, string cellPhone, string phoneWork, string phoneHome, string fax, string postelCode, string senderAdress, string streat, Nullable<long> state, Nullable<long> towan, Nullable<long> hRJobID, Nullable<System.DateTime> licenseCarNumStart, Nullable<System.DateTime> licenseCarNumEnd, Nullable<System.DateTime> licenseGunStart, Nullable<System.DateTime> licenseGunEnd, Nullable<System.DateTime> passportNumStart, Nullable<System.DateTime> passportNumEnd, Nullable<System.DateTime> nationalNumStart, Nullable<System.DateTime> nationalNumEnd, Nullable<long> country, Nullable<double> percentMony, Nullable<long> lUU, Nullable<System.DateTime> lUD, Nullable<long> accountID, Nullable<int> shiftID, Nullable<byte> frequency, Nullable<byte> children, string path, Nullable<bool> notActive, Nullable<int> sponsorID, ObjectParameter idCode)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(long));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var birthdateParameter = birthdate.HasValue ?
                new ObjectParameter("Birthdate", birthdate) :
                new ObjectParameter("Birthdate", typeof(System.DateTime));
    
            var nationaltyParameter = nationalty.HasValue ?
                new ObjectParameter("Nationalty", nationalty) :
                new ObjectParameter("Nationalty", typeof(long));
    
            var militaryStateParameter = militaryState.HasValue ?
                new ObjectParameter("MilitaryState", militaryState) :
                new ObjectParameter("MilitaryState", typeof(long));
    
            var maritalStateParameter = maritalState.HasValue ?
                new ObjectParameter("MaritalState", maritalState) :
                new ObjectParameter("MaritalState", typeof(long));
    
            var relgionParameter = relgion.HasValue ?
                new ObjectParameter("Relgion", relgion) :
                new ObjectParameter("Relgion", typeof(long));
    
            var genderParameter = gender.HasValue ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(long));
    
            var employmentStatusIDParameter = employmentStatusID.HasValue ?
                new ObjectParameter("EmploymentStatusID", employmentStatusID) :
                new ObjectParameter("EmploymentStatusID", typeof(long));
    
            var licenseCarNumParameter = licenseCarNum != null ?
                new ObjectParameter("licenseCarNum", licenseCarNum) :
                new ObjectParameter("licenseCarNum", typeof(string));
    
            var licenseGunParameter = licenseGun != null ?
                new ObjectParameter("licenseGun", licenseGun) :
                new ObjectParameter("licenseGun", typeof(string));
    
            var passportNumParameter = passportNum != null ?
                new ObjectParameter("passportNum", passportNum) :
                new ObjectParameter("passportNum", typeof(string));
    
            var nationalNumParameter = nationalNum != null ?
                new ObjectParameter("NationalNum", nationalNum) :
                new ObjectParameter("NationalNum", typeof(string));
    
            var sectionNameParameter = sectionName != null ?
                new ObjectParameter("SectionName", sectionName) :
                new ObjectParameter("SectionName", typeof(string));
    
            var branchParameter = branch != null ?
                new ObjectParameter("Branch", branch) :
                new ObjectParameter("Branch", typeof(string));
    
            var contractWorkTypeParameter = contractWorkType.HasValue ?
                new ObjectParameter("ContractWorkType", contractWorkType) :
                new ObjectParameter("ContractWorkType", typeof(int));
    
            var sectorNameParameter = sectorName != null ?
                new ObjectParameter("SectorName", sectorName) :
                new ObjectParameter("SectorName", typeof(string));
    
            var levelOccupationParameter = levelOccupation != null ?
                new ObjectParameter("LevelOccupation", levelOccupation) :
                new ObjectParameter("LevelOccupation", typeof(string));
    
            var occupationParameter = occupation != null ?
                new ObjectParameter("Occupation", occupation) :
                new ObjectParameter("Occupation", typeof(string));
    
            var contractPeriodParameter = contractPeriod.HasValue ?
                new ObjectParameter("ContractPeriod", contractPeriod) :
                new ObjectParameter("ContractPeriod", typeof(long));
    
            var quetReasonParameter = quetReason.HasValue ?
                new ObjectParameter("QuetReason", quetReason) :
                new ObjectParameter("QuetReason", typeof(long));
    
            var countRenewContractParameter = countRenewContract != null ?
                new ObjectParameter("CountRenewContract", countRenewContract) :
                new ObjectParameter("CountRenewContract", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var otherQuetReasonParameter = otherQuetReason != null ?
                new ObjectParameter("OtherQuetReason", otherQuetReason) :
                new ObjectParameter("OtherQuetReason", typeof(string));
    
            var quietDateParameter = quietDate.HasValue ?
                new ObjectParameter("QuietDate", quietDate) :
                new ObjectParameter("QuietDate", typeof(System.DateTime));
    
            var projectGraduateParameter = projectGraduate != null ?
                new ObjectParameter("ProjectGraduate", projectGraduate) :
                new ObjectParameter("ProjectGraduate", typeof(string));
    
            var urlSiteParameter = urlSite != null ?
                new ObjectParameter("UrlSite", urlSite) :
                new ObjectParameter("UrlSite", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var signatureImageParameter = signatureImage != null ?
                new ObjectParameter("SignatureImage", signatureImage) :
                new ObjectParameter("SignatureImage", typeof(byte[]));
    
            var systemEmailParameter = systemEmail != null ?
                new ObjectParameter("SystemEmail", systemEmail) :
                new ObjectParameter("SystemEmail", typeof(string));
    
            var cellPhoneParameter = cellPhone != null ?
                new ObjectParameter("CellPhone", cellPhone) :
                new ObjectParameter("CellPhone", typeof(string));
    
            var phoneWorkParameter = phoneWork != null ?
                new ObjectParameter("PhoneWork", phoneWork) :
                new ObjectParameter("PhoneWork", typeof(string));
    
            var phoneHomeParameter = phoneHome != null ?
                new ObjectParameter("PhoneHome", phoneHome) :
                new ObjectParameter("PhoneHome", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var postelCodeParameter = postelCode != null ?
                new ObjectParameter("PostelCode", postelCode) :
                new ObjectParameter("PostelCode", typeof(string));
    
            var senderAdressParameter = senderAdress != null ?
                new ObjectParameter("SenderAdress", senderAdress) :
                new ObjectParameter("SenderAdress", typeof(string));
    
            var streatParameter = streat != null ?
                new ObjectParameter("Streat", streat) :
                new ObjectParameter("Streat", typeof(string));
    
            var stateParameter = state.HasValue ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(long));
    
            var towanParameter = towan.HasValue ?
                new ObjectParameter("Towan", towan) :
                new ObjectParameter("Towan", typeof(long));
    
            var hRJobIDParameter = hRJobID.HasValue ?
                new ObjectParameter("HRJobID", hRJobID) :
                new ObjectParameter("HRJobID", typeof(long));
    
            var licenseCarNumStartParameter = licenseCarNumStart.HasValue ?
                new ObjectParameter("licenseCarNumStart", licenseCarNumStart) :
                new ObjectParameter("licenseCarNumStart", typeof(System.DateTime));
    
            var licenseCarNumEndParameter = licenseCarNumEnd.HasValue ?
                new ObjectParameter("licenseCarNumEnd", licenseCarNumEnd) :
                new ObjectParameter("licenseCarNumEnd", typeof(System.DateTime));
    
            var licenseGunStartParameter = licenseGunStart.HasValue ?
                new ObjectParameter("licenseGunStart", licenseGunStart) :
                new ObjectParameter("licenseGunStart", typeof(System.DateTime));
    
            var licenseGunEndParameter = licenseGunEnd.HasValue ?
                new ObjectParameter("licenseGunEnd", licenseGunEnd) :
                new ObjectParameter("licenseGunEnd", typeof(System.DateTime));
    
            var passportNumStartParameter = passportNumStart.HasValue ?
                new ObjectParameter("passportNumStart", passportNumStart) :
                new ObjectParameter("passportNumStart", typeof(System.DateTime));
    
            var passportNumEndParameter = passportNumEnd.HasValue ?
                new ObjectParameter("passportNumEnd", passportNumEnd) :
                new ObjectParameter("passportNumEnd", typeof(System.DateTime));
    
            var nationalNumStartParameter = nationalNumStart.HasValue ?
                new ObjectParameter("NationalNumStart", nationalNumStart) :
                new ObjectParameter("NationalNumStart", typeof(System.DateTime));
    
            var nationalNumEndParameter = nationalNumEnd.HasValue ?
                new ObjectParameter("NationalNumEnd", nationalNumEnd) :
                new ObjectParameter("NationalNumEnd", typeof(System.DateTime));
    
            var countryParameter = country.HasValue ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(long));
    
            var percentMonyParameter = percentMony.HasValue ?
                new ObjectParameter("PercentMony", percentMony) :
                new ObjectParameter("PercentMony", typeof(double));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(long));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var frequencyParameter = frequency.HasValue ?
                new ObjectParameter("Frequency", frequency) :
                new ObjectParameter("Frequency", typeof(byte));
    
            var childrenParameter = children.HasValue ?
                new ObjectParameter("Children", children) :
                new ObjectParameter("Children", typeof(byte));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var notActiveParameter = notActive.HasValue ?
                new ObjectParameter("NotActive", notActive) :
                new ObjectParameter("NotActive", typeof(bool));
    
            var sponsorIDParameter = sponsorID.HasValue ?
                new ObjectParameter("SponsorID", sponsorID) :
                new ObjectParameter("SponsorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EmployedInfo_Insert", nameParameter, statusIDParameter, carIDParameter, departmentParameter, birthdateParameter, nationaltyParameter, militaryStateParameter, maritalStateParameter, relgionParameter, genderParameter, employmentStatusIDParameter, licenseCarNumParameter, licenseGunParameter, passportNumParameter, nationalNumParameter, sectionNameParameter, branchParameter, contractWorkTypeParameter, sectorNameParameter, levelOccupationParameter, occupationParameter, contractPeriodParameter, quetReasonParameter, countRenewContractParameter, fromDateParameter, toDateParameter, otherQuetReasonParameter, quietDateParameter, projectGraduateParameter, urlSiteParameter, emailParameter, signatureImageParameter, systemEmailParameter, cellPhoneParameter, phoneWorkParameter, phoneHomeParameter, faxParameter, postelCodeParameter, senderAdressParameter, streatParameter, stateParameter, towanParameter, hRJobIDParameter, licenseCarNumStartParameter, licenseCarNumEndParameter, licenseGunStartParameter, licenseGunEndParameter, passportNumStartParameter, passportNumEndParameter, nationalNumStartParameter, nationalNumEndParameter, countryParameter, percentMonyParameter, lUUParameter, lUDParameter, accountIDParameter, shiftIDParameter, frequencyParameter, childrenParameter, pathParameter, notActiveParameter, sponsorIDParameter, idCode);
        }
    
        public virtual ObjectResult<EmployedInfo_SelectAll_Result> EmployedInfo_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmployedInfo_SelectAll_Result>("EmployedInfo_SelectAll");
        }
    
        public virtual ObjectResult<EmployedInfo_SelectByDepartment_Result> EmployedInfo_SelectByDepartment(Nullable<long> hRDepartmentID)
        {
            var hRDepartmentIDParameter = hRDepartmentID.HasValue ?
                new ObjectParameter("HRDepartmentID", hRDepartmentID) :
                new ObjectParameter("HRDepartmentID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmployedInfo_SelectByDepartment_Result>("EmployedInfo_SelectByDepartment", hRDepartmentIDParameter);
        }
    
        public virtual ObjectResult<EmployedInfo_SelectOne_Result> EmployedInfo_SelectOne(Nullable<long> idCode)
        {
            var idCodeParameter = idCode.HasValue ?
                new ObjectParameter("IdCode", idCode) :
                new ObjectParameter("IdCode", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmployedInfo_SelectOne_Result>("EmployedInfo_SelectOne", idCodeParameter);
        }
    
        public virtual int EmployedInfo_Update(Nullable<long> idCode, string name, Nullable<int> statusID, Nullable<long> carID, string department, Nullable<System.DateTime> birthdate, Nullable<long> nationalty, Nullable<long> militaryState, Nullable<long> maritalState, Nullable<long> relgion, Nullable<long> gender, Nullable<long> employmentStatusID, string licenseCarNum, string licenseGun, string passportNum, string nationalNum, string sectionName, string branch, Nullable<int> contractWorkType, string sectorName, string levelOccupation, string occupation, Nullable<long> contractPeriod, Nullable<long> quetReason, string countRenewContract, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string otherQuetReason, Nullable<System.DateTime> quietDate, string projectGraduate, string urlSite, string email, byte[] signatureImage, string systemEmail, string cellPhone, string phoneWork, string phoneHome, string fax, string postelCode, string senderAdress, string streat, Nullable<long> state, Nullable<long> towan, Nullable<long> hRJobID, Nullable<System.DateTime> licenseCarNumStart, Nullable<System.DateTime> licenseCarNumEnd, Nullable<System.DateTime> licenseGunStart, Nullable<System.DateTime> licenseGunEnd, Nullable<System.DateTime> passportNumStart, Nullable<System.DateTime> passportNumEnd, Nullable<System.DateTime> nationalNumStart, Nullable<System.DateTime> nationalNumEnd, Nullable<long> country, Nullable<double> percentMony, Nullable<long> lUU, Nullable<System.DateTime> lUD, Nullable<long> accountID, Nullable<int> shiftID, Nullable<byte> frequency, Nullable<byte> children, string path, Nullable<bool> notActive, Nullable<int> sponsorID)
        {
            var idCodeParameter = idCode.HasValue ?
                new ObjectParameter("IdCode", idCode) :
                new ObjectParameter("IdCode", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(long));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var birthdateParameter = birthdate.HasValue ?
                new ObjectParameter("Birthdate", birthdate) :
                new ObjectParameter("Birthdate", typeof(System.DateTime));
    
            var nationaltyParameter = nationalty.HasValue ?
                new ObjectParameter("Nationalty", nationalty) :
                new ObjectParameter("Nationalty", typeof(long));
    
            var militaryStateParameter = militaryState.HasValue ?
                new ObjectParameter("MilitaryState", militaryState) :
                new ObjectParameter("MilitaryState", typeof(long));
    
            var maritalStateParameter = maritalState.HasValue ?
                new ObjectParameter("MaritalState", maritalState) :
                new ObjectParameter("MaritalState", typeof(long));
    
            var relgionParameter = relgion.HasValue ?
                new ObjectParameter("Relgion", relgion) :
                new ObjectParameter("Relgion", typeof(long));
    
            var genderParameter = gender.HasValue ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(long));
    
            var employmentStatusIDParameter = employmentStatusID.HasValue ?
                new ObjectParameter("EmploymentStatusID", employmentStatusID) :
                new ObjectParameter("EmploymentStatusID", typeof(long));
    
            var licenseCarNumParameter = licenseCarNum != null ?
                new ObjectParameter("licenseCarNum", licenseCarNum) :
                new ObjectParameter("licenseCarNum", typeof(string));
    
            var licenseGunParameter = licenseGun != null ?
                new ObjectParameter("licenseGun", licenseGun) :
                new ObjectParameter("licenseGun", typeof(string));
    
            var passportNumParameter = passportNum != null ?
                new ObjectParameter("passportNum", passportNum) :
                new ObjectParameter("passportNum", typeof(string));
    
            var nationalNumParameter = nationalNum != null ?
                new ObjectParameter("NationalNum", nationalNum) :
                new ObjectParameter("NationalNum", typeof(string));
    
            var sectionNameParameter = sectionName != null ?
                new ObjectParameter("SectionName", sectionName) :
                new ObjectParameter("SectionName", typeof(string));
    
            var branchParameter = branch != null ?
                new ObjectParameter("Branch", branch) :
                new ObjectParameter("Branch", typeof(string));
    
            var contractWorkTypeParameter = contractWorkType.HasValue ?
                new ObjectParameter("ContractWorkType", contractWorkType) :
                new ObjectParameter("ContractWorkType", typeof(int));
    
            var sectorNameParameter = sectorName != null ?
                new ObjectParameter("SectorName", sectorName) :
                new ObjectParameter("SectorName", typeof(string));
    
            var levelOccupationParameter = levelOccupation != null ?
                new ObjectParameter("LevelOccupation", levelOccupation) :
                new ObjectParameter("LevelOccupation", typeof(string));
    
            var occupationParameter = occupation != null ?
                new ObjectParameter("Occupation", occupation) :
                new ObjectParameter("Occupation", typeof(string));
    
            var contractPeriodParameter = contractPeriod.HasValue ?
                new ObjectParameter("ContractPeriod", contractPeriod) :
                new ObjectParameter("ContractPeriod", typeof(long));
    
            var quetReasonParameter = quetReason.HasValue ?
                new ObjectParameter("QuetReason", quetReason) :
                new ObjectParameter("QuetReason", typeof(long));
    
            var countRenewContractParameter = countRenewContract != null ?
                new ObjectParameter("CountRenewContract", countRenewContract) :
                new ObjectParameter("CountRenewContract", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var otherQuetReasonParameter = otherQuetReason != null ?
                new ObjectParameter("OtherQuetReason", otherQuetReason) :
                new ObjectParameter("OtherQuetReason", typeof(string));
    
            var quietDateParameter = quietDate.HasValue ?
                new ObjectParameter("QuietDate", quietDate) :
                new ObjectParameter("QuietDate", typeof(System.DateTime));
    
            var projectGraduateParameter = projectGraduate != null ?
                new ObjectParameter("ProjectGraduate", projectGraduate) :
                new ObjectParameter("ProjectGraduate", typeof(string));
    
            var urlSiteParameter = urlSite != null ?
                new ObjectParameter("UrlSite", urlSite) :
                new ObjectParameter("UrlSite", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var signatureImageParameter = signatureImage != null ?
                new ObjectParameter("SignatureImage", signatureImage) :
                new ObjectParameter("SignatureImage", typeof(byte[]));
    
            var systemEmailParameter = systemEmail != null ?
                new ObjectParameter("SystemEmail", systemEmail) :
                new ObjectParameter("SystemEmail", typeof(string));
    
            var cellPhoneParameter = cellPhone != null ?
                new ObjectParameter("CellPhone", cellPhone) :
                new ObjectParameter("CellPhone", typeof(string));
    
            var phoneWorkParameter = phoneWork != null ?
                new ObjectParameter("PhoneWork", phoneWork) :
                new ObjectParameter("PhoneWork", typeof(string));
    
            var phoneHomeParameter = phoneHome != null ?
                new ObjectParameter("PhoneHome", phoneHome) :
                new ObjectParameter("PhoneHome", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var postelCodeParameter = postelCode != null ?
                new ObjectParameter("PostelCode", postelCode) :
                new ObjectParameter("PostelCode", typeof(string));
    
            var senderAdressParameter = senderAdress != null ?
                new ObjectParameter("SenderAdress", senderAdress) :
                new ObjectParameter("SenderAdress", typeof(string));
    
            var streatParameter = streat != null ?
                new ObjectParameter("Streat", streat) :
                new ObjectParameter("Streat", typeof(string));
    
            var stateParameter = state.HasValue ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(long));
    
            var towanParameter = towan.HasValue ?
                new ObjectParameter("Towan", towan) :
                new ObjectParameter("Towan", typeof(long));
    
            var hRJobIDParameter = hRJobID.HasValue ?
                new ObjectParameter("HRJobID", hRJobID) :
                new ObjectParameter("HRJobID", typeof(long));
    
            var licenseCarNumStartParameter = licenseCarNumStart.HasValue ?
                new ObjectParameter("licenseCarNumStart", licenseCarNumStart) :
                new ObjectParameter("licenseCarNumStart", typeof(System.DateTime));
    
            var licenseCarNumEndParameter = licenseCarNumEnd.HasValue ?
                new ObjectParameter("licenseCarNumEnd", licenseCarNumEnd) :
                new ObjectParameter("licenseCarNumEnd", typeof(System.DateTime));
    
            var licenseGunStartParameter = licenseGunStart.HasValue ?
                new ObjectParameter("licenseGunStart", licenseGunStart) :
                new ObjectParameter("licenseGunStart", typeof(System.DateTime));
    
            var licenseGunEndParameter = licenseGunEnd.HasValue ?
                new ObjectParameter("licenseGunEnd", licenseGunEnd) :
                new ObjectParameter("licenseGunEnd", typeof(System.DateTime));
    
            var passportNumStartParameter = passportNumStart.HasValue ?
                new ObjectParameter("passportNumStart", passportNumStart) :
                new ObjectParameter("passportNumStart", typeof(System.DateTime));
    
            var passportNumEndParameter = passportNumEnd.HasValue ?
                new ObjectParameter("passportNumEnd", passportNumEnd) :
                new ObjectParameter("passportNumEnd", typeof(System.DateTime));
    
            var nationalNumStartParameter = nationalNumStart.HasValue ?
                new ObjectParameter("NationalNumStart", nationalNumStart) :
                new ObjectParameter("NationalNumStart", typeof(System.DateTime));
    
            var nationalNumEndParameter = nationalNumEnd.HasValue ?
                new ObjectParameter("NationalNumEnd", nationalNumEnd) :
                new ObjectParameter("NationalNumEnd", typeof(System.DateTime));
    
            var countryParameter = country.HasValue ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(long));
    
            var percentMonyParameter = percentMony.HasValue ?
                new ObjectParameter("PercentMony", percentMony) :
                new ObjectParameter("PercentMony", typeof(double));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(long));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var frequencyParameter = frequency.HasValue ?
                new ObjectParameter("Frequency", frequency) :
                new ObjectParameter("Frequency", typeof(byte));
    
            var childrenParameter = children.HasValue ?
                new ObjectParameter("Children", children) :
                new ObjectParameter("Children", typeof(byte));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var notActiveParameter = notActive.HasValue ?
                new ObjectParameter("NotActive", notActive) :
                new ObjectParameter("NotActive", typeof(bool));
    
            var sponsorIDParameter = sponsorID.HasValue ?
                new ObjectParameter("SponsorID", sponsorID) :
                new ObjectParameter("SponsorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EmployedInfo_Update", idCodeParameter, nameParameter, statusIDParameter, carIDParameter, departmentParameter, birthdateParameter, nationaltyParameter, militaryStateParameter, maritalStateParameter, relgionParameter, genderParameter, employmentStatusIDParameter, licenseCarNumParameter, licenseGunParameter, passportNumParameter, nationalNumParameter, sectionNameParameter, branchParameter, contractWorkTypeParameter, sectorNameParameter, levelOccupationParameter, occupationParameter, contractPeriodParameter, quetReasonParameter, countRenewContractParameter, fromDateParameter, toDateParameter, otherQuetReasonParameter, quietDateParameter, projectGraduateParameter, urlSiteParameter, emailParameter, signatureImageParameter, systemEmailParameter, cellPhoneParameter, phoneWorkParameter, phoneHomeParameter, faxParameter, postelCodeParameter, senderAdressParameter, streatParameter, stateParameter, towanParameter, hRJobIDParameter, licenseCarNumStartParameter, licenseCarNumEndParameter, licenseGunStartParameter, licenseGunEndParameter, passportNumStartParameter, passportNumEndParameter, nationalNumStartParameter, nationalNumEndParameter, countryParameter, percentMonyParameter, lUUParameter, lUDParameter, accountIDParameter, shiftIDParameter, frequencyParameter, childrenParameter, pathParameter, notActiveParameter, sponsorIDParameter);
        }
    
        public virtual int EmployeeSalaryItem_DeleteEmpGroup(Nullable<long> emplIdCode)
        {
            var emplIdCodeParameter = emplIdCode.HasValue ?
                new ObjectParameter("EmplIdCode", emplIdCode) :
                new ObjectParameter("EmplIdCode", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EmployeeSalaryItem_DeleteEmpGroup", emplIdCodeParameter);
        }
    
        public virtual int EmployeeSalaryItem_Insert(Nullable<long> emplIdCode, Nullable<long> salaryItemID, Nullable<decimal> itemValue, Nullable<long> lUU, Nullable<System.DateTime> lUD, ObjectParameter id)
        {
            var emplIdCodeParameter = emplIdCode.HasValue ?
                new ObjectParameter("EmplIdCode", emplIdCode) :
                new ObjectParameter("EmplIdCode", typeof(long));
    
            var salaryItemIDParameter = salaryItemID.HasValue ?
                new ObjectParameter("SalaryItemID", salaryItemID) :
                new ObjectParameter("SalaryItemID", typeof(long));
    
            var itemValueParameter = itemValue.HasValue ?
                new ObjectParameter("ItemValue", itemValue) :
                new ObjectParameter("ItemValue", typeof(decimal));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EmployeeSalaryItem_Insert", emplIdCodeParameter, salaryItemIDParameter, itemValueParameter, lUUParameter, lUDParameter, id);
        }
    
        public virtual ObjectResult<EmployeeSalaryItem_SelectEmpGroup_Result> EmployeeSalaryItem_SelectEmpGroup(Nullable<long> emplIdCode)
        {
            var emplIdCodeParameter = emplIdCode.HasValue ?
                new ObjectParameter("EmplIdCode", emplIdCode) :
                new ObjectParameter("EmplIdCode", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmployeeSalaryItem_SelectEmpGroup_Result>("EmployeeSalaryItem_SelectEmpGroup", emplIdCodeParameter);
        }
    
        public virtual int EmployeeSalaryItem_Update(Nullable<long> id, Nullable<long> emplIdCode, Nullable<long> salaryItemID, Nullable<decimal> itemValue, Nullable<long> lUU, Nullable<System.DateTime> lUD)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var emplIdCodeParameter = emplIdCode.HasValue ?
                new ObjectParameter("EmplIdCode", emplIdCode) :
                new ObjectParameter("EmplIdCode", typeof(long));
    
            var salaryItemIDParameter = salaryItemID.HasValue ?
                new ObjectParameter("SalaryItemID", salaryItemID) :
                new ObjectParameter("SalaryItemID", typeof(long));
    
            var itemValueParameter = itemValue.HasValue ?
                new ObjectParameter("ItemValue", itemValue) :
                new ObjectParameter("ItemValue", typeof(decimal));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EmployeeSalaryItem_Update", idParameter, emplIdCodeParameter, salaryItemIDParameter, itemValueParameter, lUUParameter, lUDParameter);
        }
    
        public virtual int EmployeesShift_Delete(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EmployeesShift_Delete", iDParameter);
        }
    
        public virtual int EmployeesShift_DeleteShiftGroup(Nullable<long> shiftID)
        {
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EmployeesShift_DeleteShiftGroup", shiftIDParameter);
        }
    
        public virtual int EmployeesShift_Insert(Nullable<long> empID, Nullable<long> shiftID, Nullable<System.DateTime> lUD, Nullable<long> lUU, ObjectParameter iD)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(long));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(long));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EmployeesShift_Insert", empIDParameter, shiftIDParameter, lUDParameter, lUUParameter, iD);
        }
    
        public virtual ObjectResult<EmployeesShift_SelectAll_Result> EmployeesShift_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmployeesShift_SelectAll_Result>("EmployeesShift_SelectAll");
        }
    
        public virtual ObjectResult<EmployeesShift_SelectOne_Result> EmployeesShift_SelectOne(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmployeesShift_SelectOne_Result>("EmployeesShift_SelectOne", iDParameter);
        }
    
        public virtual ObjectResult<EmployeesShift_SelectShiftGroup_Result> EmployeesShift_SelectShiftGroup(Nullable<long> shiftID)
        {
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmployeesShift_SelectShiftGroup_Result>("EmployeesShift_SelectShiftGroup", shiftIDParameter);
        }
    
        public virtual int EmployeesShift_Update(Nullable<long> iD, Nullable<long> empID, Nullable<long> shiftID, Nullable<System.DateTime> lUD, Nullable<long> lUU)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(long));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(long));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EmployeesShift_Update", iDParameter, empIDParameter, shiftIDParameter, lUDParameter, lUUParameter);
        }
    
        public virtual int EmploymentStatus_Delete(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EmploymentStatus_Delete", iDParameter);
        }
    
        public virtual int EmploymentStatus_Insert(string name, Nullable<System.DateTime> lUD, Nullable<long> lUU, ObjectParameter iD)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EmploymentStatus_Insert", nameParameter, lUDParameter, lUUParameter, iD);
        }
    
        public virtual ObjectResult<EmploymentStatus_SelectAll_Result> EmploymentStatus_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmploymentStatus_SelectAll_Result>("EmploymentStatus_SelectAll");
        }
    
        public virtual ObjectResult<EmploymentStatus_SelectOne_Result> EmploymentStatus_SelectOne(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmploymentStatus_SelectOne_Result>("EmploymentStatus_SelectOne", iDParameter);
        }
    
        public virtual int EmploymentStatus_Update(Nullable<long> iD, string name, Nullable<System.DateTime> lUD, Nullable<long> lUU)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EmploymentStatus_Update", iDParameter, nameParameter, lUDParameter, lUUParameter);
        }
    
        public virtual int EmplScholastic_DeleteAllEmpGroup(Nullable<long> emplIdCode)
        {
            var emplIdCodeParameter = emplIdCode.HasValue ?
                new ObjectParameter("EmplIdCode", emplIdCode) :
                new ObjectParameter("EmplIdCode", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EmplScholastic_DeleteAllEmpGroup", emplIdCodeParameter);
        }
    
        public virtual int EmplScholastic_Insert(Nullable<long> emplIdCode, string grad, string collageName, string schoolName, string leavlGrad, string department, Nullable<System.DateTime> inDate, string lUU, Nullable<System.DateTime> lUD, ObjectParameter id)
        {
            var emplIdCodeParameter = emplIdCode.HasValue ?
                new ObjectParameter("EmplIdCode", emplIdCode) :
                new ObjectParameter("EmplIdCode", typeof(long));
    
            var gradParameter = grad != null ?
                new ObjectParameter("Grad", grad) :
                new ObjectParameter("Grad", typeof(string));
    
            var collageNameParameter = collageName != null ?
                new ObjectParameter("CollageName", collageName) :
                new ObjectParameter("CollageName", typeof(string));
    
            var schoolNameParameter = schoolName != null ?
                new ObjectParameter("SchoolName", schoolName) :
                new ObjectParameter("SchoolName", typeof(string));
    
            var leavlGradParameter = leavlGrad != null ?
                new ObjectParameter("LeavlGrad", leavlGrad) :
                new ObjectParameter("LeavlGrad", typeof(string));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var inDateParameter = inDate.HasValue ?
                new ObjectParameter("InDate", inDate) :
                new ObjectParameter("InDate", typeof(System.DateTime));
    
            var lUUParameter = lUU != null ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(string));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EmplScholastic_Insert", emplIdCodeParameter, gradParameter, collageNameParameter, schoolNameParameter, leavlGradParameter, departmentParameter, inDateParameter, lUUParameter, lUDParameter, id);
        }
    
        public virtual ObjectResult<EmplScholastic_SelectAllEmpGroup_Result> EmplScholastic_SelectAllEmpGroup(Nullable<long> emplIdCode)
        {
            var emplIdCodeParameter = emplIdCode.HasValue ?
                new ObjectParameter("EmplIdCode", emplIdCode) :
                new ObjectParameter("EmplIdCode", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmplScholastic_SelectAllEmpGroup_Result>("EmplScholastic_SelectAllEmpGroup", emplIdCodeParameter);
        }
    
        public virtual int EmplScholastic_Update(Nullable<long> id, Nullable<long> emplIdCode, string grad, string collageName, string schoolName, string leavlGrad, string department, Nullable<System.DateTime> inDate, string lUU, Nullable<System.DateTime> lUD)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(long));
    
            var emplIdCodeParameter = emplIdCode.HasValue ?
                new ObjectParameter("EmplIdCode", emplIdCode) :
                new ObjectParameter("EmplIdCode", typeof(long));
    
            var gradParameter = grad != null ?
                new ObjectParameter("Grad", grad) :
                new ObjectParameter("Grad", typeof(string));
    
            var collageNameParameter = collageName != null ?
                new ObjectParameter("CollageName", collageName) :
                new ObjectParameter("CollageName", typeof(string));
    
            var schoolNameParameter = schoolName != null ?
                new ObjectParameter("SchoolName", schoolName) :
                new ObjectParameter("SchoolName", typeof(string));
    
            var leavlGradParameter = leavlGrad != null ?
                new ObjectParameter("LeavlGrad", leavlGrad) :
                new ObjectParameter("LeavlGrad", typeof(string));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var inDateParameter = inDate.HasValue ?
                new ObjectParameter("InDate", inDate) :
                new ObjectParameter("InDate", typeof(System.DateTime));
    
            var lUUParameter = lUU != null ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(string));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EmplScholastic_Update", idParameter, emplIdCodeParameter, gradParameter, collageNameParameter, schoolNameParameter, leavlGradParameter, departmentParameter, inDateParameter, lUUParameter, lUDParameter);
        }
    
        public virtual int EmplWorkExperince_DeleteAllEmpGroup(Nullable<long> emplIdCode)
        {
            var emplIdCodeParameter = emplIdCode.HasValue ?
                new ObjectParameter("EmplIdCode", emplIdCode) :
                new ObjectParameter("EmplIdCode", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EmplWorkExperince_DeleteAllEmpGroup", emplIdCodeParameter);
        }
    
        public virtual int EmplWorkExperince_Insert(Nullable<long> emplIdCode, string workFeild, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> todate, string lastPosition, Nullable<decimal> lastSallary, string lUU, Nullable<System.DateTime> lUD, ObjectParameter id)
        {
            var emplIdCodeParameter = emplIdCode.HasValue ?
                new ObjectParameter("EmplIdCode", emplIdCode) :
                new ObjectParameter("EmplIdCode", typeof(long));
    
            var workFeildParameter = workFeild != null ?
                new ObjectParameter("WorkFeild", workFeild) :
                new ObjectParameter("WorkFeild", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var lastPositionParameter = lastPosition != null ?
                new ObjectParameter("LastPosition", lastPosition) :
                new ObjectParameter("LastPosition", typeof(string));
    
            var lastSallaryParameter = lastSallary.HasValue ?
                new ObjectParameter("LastSallary", lastSallary) :
                new ObjectParameter("LastSallary", typeof(decimal));
    
            var lUUParameter = lUU != null ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(string));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EmplWorkExperince_Insert", emplIdCodeParameter, workFeildParameter, fromDateParameter, todateParameter, lastPositionParameter, lastSallaryParameter, lUUParameter, lUDParameter, id);
        }
    
        public virtual ObjectResult<EmplWorkExperince_SelectAllEmpGroup_Result> EmplWorkExperince_SelectAllEmpGroup(Nullable<long> emplIdCode)
        {
            var emplIdCodeParameter = emplIdCode.HasValue ?
                new ObjectParameter("EmplIdCode", emplIdCode) :
                new ObjectParameter("EmplIdCode", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmplWorkExperince_SelectAllEmpGroup_Result>("EmplWorkExperince_SelectAllEmpGroup", emplIdCodeParameter);
        }
    
        public virtual int EmplWorkExperince_Update(Nullable<long> id, Nullable<long> emplIdCode, string workFeild, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> todate, string lastPosition, Nullable<decimal> lastSallary, string lUU, Nullable<System.DateTime> lUD)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(long));
    
            var emplIdCodeParameter = emplIdCode.HasValue ?
                new ObjectParameter("EmplIdCode", emplIdCode) :
                new ObjectParameter("EmplIdCode", typeof(long));
    
            var workFeildParameter = workFeild != null ?
                new ObjectParameter("WorkFeild", workFeild) :
                new ObjectParameter("WorkFeild", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var lastPositionParameter = lastPosition != null ?
                new ObjectParameter("LastPosition", lastPosition) :
                new ObjectParameter("LastPosition", typeof(string));
    
            var lastSallaryParameter = lastSallary.HasValue ?
                new ObjectParameter("LastSallary", lastSallary) :
                new ObjectParameter("LastSallary", typeof(decimal));
    
            var lUUParameter = lUU != null ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(string));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EmplWorkExperince_Update", idParameter, emplIdCodeParameter, workFeildParameter, fromDateParameter, todateParameter, lastPositionParameter, lastSallaryParameter, lUUParameter, lUDParameter);
        }
    
        public virtual int EmpSponsor_Delete(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EmpSponsor_Delete", iDParameter);
        }
    
        public virtual int EmpSponsor_Insert(string name, Nullable<long> lUU, Nullable<System.DateTime> lUD, ObjectParameter iD)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EmpSponsor_Insert", nameParameter, lUUParameter, lUDParameter, iD);
        }
    
        public virtual ObjectResult<EmpSponsor_SelectAll_Result> EmpSponsor_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmpSponsor_SelectAll_Result>("EmpSponsor_SelectAll");
        }
    
        public virtual ObjectResult<EmpSponsor_SelectOne_Result> EmpSponsor_SelectOne(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmpSponsor_SelectOne_Result>("EmpSponsor_SelectOne", iDParameter);
        }
    
        public virtual int EmpSponsor_Update(Nullable<int> iD, string name, Nullable<long> lUU, Nullable<System.DateTime> lUD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EmpSponsor_Update", iDParameter, nameParameter, lUUParameter, lUDParameter);
        }
    
        public virtual ObjectResult<GetHDSales_CustID_Result> GetHDSales_CustID(Nullable<long> custID)
        {
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetHDSales_CustID_Result>("GetHDSales_CustID", custIDParameter);
        }
    
        public virtual ObjectResult<GetHDSales_HdSalesID_Result> GetHDSales_HdSalesID(Nullable<long> hdSalesID)
        {
            var hdSalesIDParameter = hdSalesID.HasValue ?
                new ObjectParameter("HdSalesID", hdSalesID) :
                new ObjectParameter("HdSalesID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetHDSales_HdSalesID_Result>("GetHDSales_HdSalesID", hdSalesIDParameter);
        }
    
        public virtual ObjectResult<GetItemCart_Result> GetItemCart(Nullable<long> itemID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetItemCart_Result>("GetItemCart", itemIDParameter);
        }
    
        public virtual int GetItemCart_UpdateImage(Nullable<long> iD, string path)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetItemCart_UpdateImage", iDParameter, pathParameter);
        }
    
        public virtual ObjectResult<GetItemCartStoresBalance_Result> GetItemCartStoresBalance(Nullable<long> itemID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetItemCartStoresBalance_Result>("GetItemCartStoresBalance", itemIDParameter);
        }
    
        public virtual ObjectResult<GetItemCartSuppliers_Result> GetItemCartSuppliers(Nullable<long> itemID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetItemCartSuppliers_Result>("GetItemCartSuppliers", itemIDParameter);
        }
    
        public virtual ObjectResult<GetSalesDataBy_CustID_Result> GetSalesDataBy_CustID(Nullable<long> custID)
        {
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSalesDataBy_CustID_Result>("GetSalesDataBy_CustID", custIDParameter);
        }
    
        public virtual int HDPeriodicalInventory_Delete(Nullable<long> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("HDPeriodicalInventory_Delete", idParameter);
        }
    
        public virtual int HDPeriodicalInventory_Insert(Nullable<long> idCode, Nullable<System.DateTime> dateHDPeriodicalInventory, Nullable<long> storeID, Nullable<long> empID, string notes, Nullable<long> lUU, Nullable<System.DateTime> lUD, Nullable<long> periodId, ObjectParameter id)
        {
            var idCodeParameter = idCode.HasValue ?
                new ObjectParameter("IdCode", idCode) :
                new ObjectParameter("IdCode", typeof(long));
    
            var dateHDPeriodicalInventoryParameter = dateHDPeriodicalInventory.HasValue ?
                new ObjectParameter("DateHDPeriodicalInventory", dateHDPeriodicalInventory) :
                new ObjectParameter("DateHDPeriodicalInventory", typeof(System.DateTime));
    
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("StoreID", storeID) :
                new ObjectParameter("StoreID", typeof(long));
    
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(long));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            var periodIdParameter = periodId.HasValue ?
                new ObjectParameter("PeriodId", periodId) :
                new ObjectParameter("PeriodId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("HDPeriodicalInventory_Insert", idCodeParameter, dateHDPeriodicalInventoryParameter, storeIDParameter, empIDParameter, notesParameter, lUUParameter, lUDParameter, periodIdParameter, id);
        }
    
        public virtual ObjectResult<HDPeriodicalInventory_SelectAll_Result> HDPeriodicalInventory_SelectAll(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<long> periodId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var periodIdParameter = periodId.HasValue ?
                new ObjectParameter("PeriodId", periodId) :
                new ObjectParameter("PeriodId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<HDPeriodicalInventory_SelectAll_Result>("HDPeriodicalInventory_SelectAll", fromDateParameter, toDateParameter, periodIdParameter);
        }
    
        public virtual ObjectResult<HDPeriodicalInventory_SelectOne_Result> HDPeriodicalInventory_SelectOne(Nullable<long> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<HDPeriodicalInventory_SelectOne_Result>("HDPeriodicalInventory_SelectOne", idParameter);
        }
    
        public virtual int HDPeriodicalInventory_Update(Nullable<long> id, Nullable<long> idCode, Nullable<System.DateTime> dateHDPeriodicalInventory, Nullable<long> storeID, Nullable<long> empID, string notes, Nullable<long> lUU, Nullable<System.DateTime> lUD, Nullable<long> periodId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var idCodeParameter = idCode.HasValue ?
                new ObjectParameter("IdCode", idCode) :
                new ObjectParameter("IdCode", typeof(long));
    
            var dateHDPeriodicalInventoryParameter = dateHDPeriodicalInventory.HasValue ?
                new ObjectParameter("DateHDPeriodicalInventory", dateHDPeriodicalInventory) :
                new ObjectParameter("DateHDPeriodicalInventory", typeof(System.DateTime));
    
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("StoreID", storeID) :
                new ObjectParameter("StoreID", typeof(long));
    
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(long));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            var periodIdParameter = periodId.HasValue ?
                new ObjectParameter("PeriodId", periodId) :
                new ObjectParameter("PeriodId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("HDPeriodicalInventory_Update", idParameter, idCodeParameter, dateHDPeriodicalInventoryParameter, storeIDParameter, empIDParameter, notesParameter, lUUParameter, lUDParameter, periodIdParameter);
        }
    
        public virtual int HDPurchaseBill_Delete(Nullable<long> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("HDPurchaseBill_Delete", idParameter);
        }
    
        public virtual int HDPurchaseBill_Insert(string idCode, Nullable<System.DateTime> dayDate, Nullable<long> hDPurchaseOrderId, Nullable<long> storeId, Nullable<long> suppId, Nullable<long> periodId, string codeBillSupplier, Nullable<decimal> price, Nullable<decimal> discountVal, Nullable<decimal> discountPercent, Nullable<decimal> expenses, Nullable<decimal> netPrice, string notes, Nullable<long> lUU, Nullable<System.DateTime> lUD, Nullable<bool> isDiscount, Nullable<bool> isBonus, ObjectParameter id)
        {
            var idCodeParameter = idCode != null ?
                new ObjectParameter("IdCode", idCode) :
                new ObjectParameter("IdCode", typeof(string));
    
            var dayDateParameter = dayDate.HasValue ?
                new ObjectParameter("DayDate", dayDate) :
                new ObjectParameter("DayDate", typeof(System.DateTime));
    
            var hDPurchaseOrderIdParameter = hDPurchaseOrderId.HasValue ?
                new ObjectParameter("HDPurchaseOrderId", hDPurchaseOrderId) :
                new ObjectParameter("HDPurchaseOrderId", typeof(long));
    
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("StoreId", storeId) :
                new ObjectParameter("StoreId", typeof(long));
    
            var suppIdParameter = suppId.HasValue ?
                new ObjectParameter("SuppId", suppId) :
                new ObjectParameter("SuppId", typeof(long));
    
            var periodIdParameter = periodId.HasValue ?
                new ObjectParameter("PeriodId", periodId) :
                new ObjectParameter("PeriodId", typeof(long));
    
            var codeBillSupplierParameter = codeBillSupplier != null ?
                new ObjectParameter("codeBillSupplier", codeBillSupplier) :
                new ObjectParameter("codeBillSupplier", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var discountValParameter = discountVal.HasValue ?
                new ObjectParameter("DiscountVal", discountVal) :
                new ObjectParameter("DiscountVal", typeof(decimal));
    
            var discountPercentParameter = discountPercent.HasValue ?
                new ObjectParameter("DiscountPercent", discountPercent) :
                new ObjectParameter("DiscountPercent", typeof(decimal));
    
            var expensesParameter = expenses.HasValue ?
                new ObjectParameter("Expenses", expenses) :
                new ObjectParameter("Expenses", typeof(decimal));
    
            var netPriceParameter = netPrice.HasValue ?
                new ObjectParameter("NetPrice", netPrice) :
                new ObjectParameter("NetPrice", typeof(decimal));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            var isDiscountParameter = isDiscount.HasValue ?
                new ObjectParameter("IsDiscount", isDiscount) :
                new ObjectParameter("IsDiscount", typeof(bool));
    
            var isBonusParameter = isBonus.HasValue ?
                new ObjectParameter("IsBonus", isBonus) :
                new ObjectParameter("IsBonus", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("HDPurchaseBill_Insert", idCodeParameter, dayDateParameter, hDPurchaseOrderIdParameter, storeIdParameter, suppIdParameter, periodIdParameter, codeBillSupplierParameter, priceParameter, discountValParameter, discountPercentParameter, expensesParameter, netPriceParameter, notesParameter, lUUParameter, lUDParameter, isDiscountParameter, isBonusParameter, id);
        }
    
        public virtual ObjectResult<HDPurchaseBill_SelectAll_Result> HDPurchaseBill_SelectAll(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<long> periodId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var periodIdParameter = periodId.HasValue ?
                new ObjectParameter("PeriodId", periodId) :
                new ObjectParameter("PeriodId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<HDPurchaseBill_SelectAll_Result>("HDPurchaseBill_SelectAll", fromDateParameter, toDateParameter, periodIdParameter);
        }
    
        public virtual ObjectResult<HDPurchaseBill_SelectAllByPeriod_Result> HDPurchaseBill_SelectAllByPeriod(Nullable<long> periodId)
        {
            var periodIdParameter = periodId.HasValue ?
                new ObjectParameter("PeriodId", periodId) :
                new ObjectParameter("PeriodId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<HDPurchaseBill_SelectAllByPeriod_Result>("HDPurchaseBill_SelectAllByPeriod", periodIdParameter);
        }
    
        public virtual ObjectResult<HDPurchaseBill_SelectOne_Result> HDPurchaseBill_SelectOne(Nullable<long> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<HDPurchaseBill_SelectOne_Result>("HDPurchaseBill_SelectOne", idParameter);
        }
    
        public virtual int HDPurchaseBill_Update(Nullable<long> id, string idCode, Nullable<System.DateTime> dayDate, Nullable<long> hDPurchaseOrderId, Nullable<long> storeId, Nullable<long> suppId, Nullable<long> periodId, string codeBillSupplier, Nullable<decimal> price, Nullable<decimal> discountVal, Nullable<decimal> discountPercent, Nullable<decimal> expenses, Nullable<decimal> netPrice, string notes, Nullable<long> lUU, Nullable<System.DateTime> lUD, Nullable<bool> isDiscount, Nullable<bool> isBonus)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var idCodeParameter = idCode != null ?
                new ObjectParameter("IdCode", idCode) :
                new ObjectParameter("IdCode", typeof(string));
    
            var dayDateParameter = dayDate.HasValue ?
                new ObjectParameter("DayDate", dayDate) :
                new ObjectParameter("DayDate", typeof(System.DateTime));
    
            var hDPurchaseOrderIdParameter = hDPurchaseOrderId.HasValue ?
                new ObjectParameter("HDPurchaseOrderId", hDPurchaseOrderId) :
                new ObjectParameter("HDPurchaseOrderId", typeof(long));
    
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("StoreId", storeId) :
                new ObjectParameter("StoreId", typeof(long));
    
            var suppIdParameter = suppId.HasValue ?
                new ObjectParameter("SuppId", suppId) :
                new ObjectParameter("SuppId", typeof(long));
    
            var periodIdParameter = periodId.HasValue ?
                new ObjectParameter("PeriodId", periodId) :
                new ObjectParameter("PeriodId", typeof(long));
    
            var codeBillSupplierParameter = codeBillSupplier != null ?
                new ObjectParameter("codeBillSupplier", codeBillSupplier) :
                new ObjectParameter("codeBillSupplier", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var discountValParameter = discountVal.HasValue ?
                new ObjectParameter("DiscountVal", discountVal) :
                new ObjectParameter("DiscountVal", typeof(decimal));
    
            var discountPercentParameter = discountPercent.HasValue ?
                new ObjectParameter("DiscountPercent", discountPercent) :
                new ObjectParameter("DiscountPercent", typeof(decimal));
    
            var expensesParameter = expenses.HasValue ?
                new ObjectParameter("Expenses", expenses) :
                new ObjectParameter("Expenses", typeof(decimal));
    
            var netPriceParameter = netPrice.HasValue ?
                new ObjectParameter("NetPrice", netPrice) :
                new ObjectParameter("NetPrice", typeof(decimal));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            var isDiscountParameter = isDiscount.HasValue ?
                new ObjectParameter("IsDiscount", isDiscount) :
                new ObjectParameter("IsDiscount", typeof(bool));
    
            var isBonusParameter = isBonus.HasValue ?
                new ObjectParameter("IsBonus", isBonus) :
                new ObjectParameter("IsBonus", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("HDPurchaseBill_Update", idParameter, idCodeParameter, dayDateParameter, hDPurchaseOrderIdParameter, storeIdParameter, suppIdParameter, periodIdParameter, codeBillSupplierParameter, priceParameter, discountValParameter, discountPercentParameter, expensesParameter, netPriceParameter, notesParameter, lUUParameter, lUDParameter, isDiscountParameter, isBonusParameter);
        }
    
        public virtual int HDPurchaseCheck_Delete(Nullable<long> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("HDPurchaseCheck_Delete", idParameter);
        }
    
        public virtual int HDPurchaseCheck_Insert(Nullable<long> idCode, Nullable<long> hDPurchaseBillId, Nullable<long> empId, Nullable<long> supplierId, Nullable<System.DateTime> checkDate, Nullable<long> storeId, Nullable<long> periodId, string notes, Nullable<long> lUU, Nullable<System.DateTime> lUD, ObjectParameter id)
        {
            var idCodeParameter = idCode.HasValue ?
                new ObjectParameter("idCode", idCode) :
                new ObjectParameter("idCode", typeof(long));
    
            var hDPurchaseBillIdParameter = hDPurchaseBillId.HasValue ?
                new ObjectParameter("HDPurchaseBillId", hDPurchaseBillId) :
                new ObjectParameter("HDPurchaseBillId", typeof(long));
    
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(long));
    
            var supplierIdParameter = supplierId.HasValue ?
                new ObjectParameter("supplierId", supplierId) :
                new ObjectParameter("supplierId", typeof(long));
    
            var checkDateParameter = checkDate.HasValue ?
                new ObjectParameter("CheckDate", checkDate) :
                new ObjectParameter("CheckDate", typeof(System.DateTime));
    
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("storeId", storeId) :
                new ObjectParameter("storeId", typeof(long));
    
            var periodIdParameter = periodId.HasValue ?
                new ObjectParameter("PeriodId", periodId) :
                new ObjectParameter("PeriodId", typeof(long));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("HDPurchaseCheck_Insert", idCodeParameter, hDPurchaseBillIdParameter, empIdParameter, supplierIdParameter, checkDateParameter, storeIdParameter, periodIdParameter, notesParameter, lUUParameter, lUDParameter, id);
        }
    
        public virtual ObjectResult<HDPurchaseCheck_SelectAll_Result> HDPurchaseCheck_SelectAll(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<long> periodId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var periodIdParameter = periodId.HasValue ?
                new ObjectParameter("PeriodId", periodId) :
                new ObjectParameter("PeriodId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<HDPurchaseCheck_SelectAll_Result>("HDPurchaseCheck_SelectAll", fromDateParameter, toDateParameter, periodIdParameter);
        }
    
        public virtual ObjectResult<HDPurchaseCheck_SelectOne_Result> HDPurchaseCheck_SelectOne(Nullable<long> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<HDPurchaseCheck_SelectOne_Result>("HDPurchaseCheck_SelectOne", idParameter);
        }
    
        public virtual int HDPurchaseCheck_Update(Nullable<long> id, Nullable<long> idCode, Nullable<long> hDPurchaseBillId, Nullable<long> empId, Nullable<long> supplierId, Nullable<System.DateTime> checkDate, Nullable<long> storeId, Nullable<long> periodId, string notes, Nullable<long> lUU, Nullable<System.DateTime> lUD)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var idCodeParameter = idCode.HasValue ?
                new ObjectParameter("idCode", idCode) :
                new ObjectParameter("idCode", typeof(long));
    
            var hDPurchaseBillIdParameter = hDPurchaseBillId.HasValue ?
                new ObjectParameter("HDPurchaseBillId", hDPurchaseBillId) :
                new ObjectParameter("HDPurchaseBillId", typeof(long));
    
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(long));
    
            var supplierIdParameter = supplierId.HasValue ?
                new ObjectParameter("supplierId", supplierId) :
                new ObjectParameter("supplierId", typeof(long));
    
            var checkDateParameter = checkDate.HasValue ?
                new ObjectParameter("CheckDate", checkDate) :
                new ObjectParameter("CheckDate", typeof(System.DateTime));
    
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("storeId", storeId) :
                new ObjectParameter("storeId", typeof(long));
    
            var periodIdParameter = periodId.HasValue ?
                new ObjectParameter("PeriodId", periodId) :
                new ObjectParameter("PeriodId", typeof(long));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("HDPurchaseCheck_Update", idParameter, idCodeParameter, hDPurchaseBillIdParameter, empIdParameter, supplierIdParameter, checkDateParameter, storeIdParameter, periodIdParameter, notesParameter, lUUParameter, lUDParameter);
        }
    
        public virtual int HDPurchaseOrder_Delete(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("HDPurchaseOrder_Delete", iDParameter);
        }
    
        public virtual int HDPurchaseOrder_Insert(Nullable<long> idCode, Nullable<System.DateTime> purchaseDate, Nullable<long> supplierId, Nullable<decimal> total, Nullable<bool> auto, Nullable<bool> active, Nullable<long> periodId, string notes, Nullable<long> lUU, Nullable<System.DateTime> lUD, ObjectParameter iD)
        {
            var idCodeParameter = idCode.HasValue ?
                new ObjectParameter("idCode", idCode) :
                new ObjectParameter("idCode", typeof(long));
    
            var purchaseDateParameter = purchaseDate.HasValue ?
                new ObjectParameter("PurchaseDate", purchaseDate) :
                new ObjectParameter("PurchaseDate", typeof(System.DateTime));
    
            var supplierIdParameter = supplierId.HasValue ?
                new ObjectParameter("supplierId", supplierId) :
                new ObjectParameter("supplierId", typeof(long));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(decimal));
    
            var autoParameter = auto.HasValue ?
                new ObjectParameter("auto", auto) :
                new ObjectParameter("auto", typeof(bool));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("active", active) :
                new ObjectParameter("active", typeof(bool));
    
            var periodIdParameter = periodId.HasValue ?
                new ObjectParameter("PeriodId", periodId) :
                new ObjectParameter("PeriodId", typeof(long));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("HDPurchaseOrder_Insert", idCodeParameter, purchaseDateParameter, supplierIdParameter, totalParameter, autoParameter, activeParameter, periodIdParameter, notesParameter, lUUParameter, lUDParameter, iD);
        }
    
        public virtual int HDPurchaseOrder_isUsedItemNotActive(Nullable<bool> isUsedItemNotActive, Nullable<long> periodId)
        {
            var isUsedItemNotActiveParameter = isUsedItemNotActive.HasValue ?
                new ObjectParameter("isUsedItemNotActive", isUsedItemNotActive) :
                new ObjectParameter("isUsedItemNotActive", typeof(bool));
    
            var periodIdParameter = periodId.HasValue ?
                new ObjectParameter("PeriodId", periodId) :
                new ObjectParameter("PeriodId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("HDPurchaseOrder_isUsedItemNotActive", isUsedItemNotActiveParameter, periodIdParameter);
        }
    
        public virtual ObjectResult<HDPurchaseOrder_SelectAll_Result> HDPurchaseOrder_SelectAll(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<long> periodId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var periodIdParameter = periodId.HasValue ?
                new ObjectParameter("PeriodId", periodId) :
                new ObjectParameter("PeriodId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<HDPurchaseOrder_SelectAll_Result>("HDPurchaseOrder_SelectAll", fromDateParameter, toDateParameter, periodIdParameter);
        }
    
        public virtual ObjectResult<HDPurchaseOrder_SelectByPeriodId_Result> HDPurchaseOrder_SelectByPeriodId(Nullable<long> periodId)
        {
            var periodIdParameter = periodId.HasValue ?
                new ObjectParameter("PeriodId", periodId) :
                new ObjectParameter("PeriodId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<HDPurchaseOrder_SelectByPeriodId_Result>("HDPurchaseOrder_SelectByPeriodId", periodIdParameter);
        }
    
        public virtual ObjectResult<HDPurchaseOrder_SelectIdsupplierByAutoAndUsed_Result> HDPurchaseOrder_SelectIdsupplierByAutoAndUsed(Nullable<long> supplierId)
        {
            var supplierIdParameter = supplierId.HasValue ?
                new ObjectParameter("supplierId", supplierId) :
                new ObjectParameter("supplierId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<HDPurchaseOrder_SelectIdsupplierByAutoAndUsed_Result>("HDPurchaseOrder_SelectIdsupplierByAutoAndUsed", supplierIdParameter);
        }
    
        public virtual ObjectResult<HDPurchaseOrder_SelectOne_Result> HDPurchaseOrder_SelectOne(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<HDPurchaseOrder_SelectOne_Result>("HDPurchaseOrder_SelectOne", iDParameter);
        }
    
        public virtual int HDPurchaseOrder_Update(Nullable<long> iD, Nullable<long> idCode, Nullable<System.DateTime> purchaseDate, Nullable<long> supplierId, Nullable<decimal> total, Nullable<bool> auto, Nullable<bool> active, Nullable<long> periodId, string notes, Nullable<long> lUU, Nullable<System.DateTime> lUD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var idCodeParameter = idCode.HasValue ?
                new ObjectParameter("idCode", idCode) :
                new ObjectParameter("idCode", typeof(long));
    
            var purchaseDateParameter = purchaseDate.HasValue ?
                new ObjectParameter("PurchaseDate", purchaseDate) :
                new ObjectParameter("PurchaseDate", typeof(System.DateTime));
    
            var supplierIdParameter = supplierId.HasValue ?
                new ObjectParameter("supplierId", supplierId) :
                new ObjectParameter("supplierId", typeof(long));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(decimal));
    
            var autoParameter = auto.HasValue ?
                new ObjectParameter("auto", auto) :
                new ObjectParameter("auto", typeof(bool));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("active", active) :
                new ObjectParameter("active", typeof(bool));
    
            var periodIdParameter = periodId.HasValue ?
                new ObjectParameter("PeriodId", periodId) :
                new ObjectParameter("PeriodId", typeof(long));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("HDPurchaseOrder_Update", iDParameter, idCodeParameter, purchaseDateParameter, supplierIdParameter, totalParameter, autoParameter, activeParameter, periodIdParameter, notesParameter, lUUParameter, lUDParameter);
        }
    
        public virtual int HDPurchaseOrder_UpdateNotDate(Nullable<long> iD, Nullable<long> idCode, Nullable<long> supplierId, Nullable<decimal> total, Nullable<bool> auto, Nullable<bool> active, Nullable<long> periodId, string notes, Nullable<long> lUU, Nullable<System.DateTime> lUD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var idCodeParameter = idCode.HasValue ?
                new ObjectParameter("idCode", idCode) :
                new ObjectParameter("idCode", typeof(long));
    
            var supplierIdParameter = supplierId.HasValue ?
                new ObjectParameter("supplierId", supplierId) :
                new ObjectParameter("supplierId", typeof(long));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(decimal));
    
            var autoParameter = auto.HasValue ?
                new ObjectParameter("auto", auto) :
                new ObjectParameter("auto", typeof(bool));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("active", active) :
                new ObjectParameter("active", typeof(bool));
    
            var periodIdParameter = periodId.HasValue ?
                new ObjectParameter("PeriodId", periodId) :
                new ObjectParameter("PeriodId", typeof(long));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("HDPurchaseOrder_UpdateNotDate", iDParameter, idCodeParameter, supplierIdParameter, totalParameter, autoParameter, activeParameter, periodIdParameter, notesParameter, lUUParameter, lUDParameter);
        }
    
        public virtual int HDPurchaseOrderSetting_Update(Nullable<int> iD, Nullable<bool> isItemRequiredInOrder, Nullable<bool> isUsedItemNotActive)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var isItemRequiredInOrderParameter = isItemRequiredInOrder.HasValue ?
                new ObjectParameter("IsItemRequiredInOrder", isItemRequiredInOrder) :
                new ObjectParameter("IsItemRequiredInOrder", typeof(bool));
    
            var isUsedItemNotActiveParameter = isUsedItemNotActive.HasValue ?
                new ObjectParameter("isUsedItemNotActive", isUsedItemNotActive) :
                new ObjectParameter("isUsedItemNotActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("HDPurchaseOrderSetting_Update", iDParameter, isItemRequiredInOrderParameter, isUsedItemNotActiveParameter);
        }
    
        public virtual int HDPurchaseReturn_Delete(Nullable<long> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("HDPurchaseReturn_Delete", idParameter);
        }
    
        public virtual int HDPurchaseReturn_Insert(string idCode, Nullable<long> suppId, Nullable<long> empId, Nullable<bool> isReturn, Nullable<System.DateTime> returnDate, Nullable<decimal> price, Nullable<decimal> discountVal, Nullable<double> discountPercent, Nullable<decimal> expenses, Nullable<decimal> netPrice, Nullable<int> returnsMoneyAction, Nullable<long> safeId, string notes, Nullable<long> periodId, Nullable<long> lUU, Nullable<System.DateTime> lUD, ObjectParameter id)
        {
            var idCodeParameter = idCode != null ?
                new ObjectParameter("IdCode", idCode) :
                new ObjectParameter("IdCode", typeof(string));
    
            var suppIdParameter = suppId.HasValue ?
                new ObjectParameter("SuppId", suppId) :
                new ObjectParameter("SuppId", typeof(long));
    
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(long));
    
            var isReturnParameter = isReturn.HasValue ?
                new ObjectParameter("IsReturn", isReturn) :
                new ObjectParameter("IsReturn", typeof(bool));
    
            var returnDateParameter = returnDate.HasValue ?
                new ObjectParameter("ReturnDate", returnDate) :
                new ObjectParameter("ReturnDate", typeof(System.DateTime));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var discountValParameter = discountVal.HasValue ?
                new ObjectParameter("DiscountVal", discountVal) :
                new ObjectParameter("DiscountVal", typeof(decimal));
    
            var discountPercentParameter = discountPercent.HasValue ?
                new ObjectParameter("DiscountPercent", discountPercent) :
                new ObjectParameter("DiscountPercent", typeof(double));
    
            var expensesParameter = expenses.HasValue ?
                new ObjectParameter("Expenses", expenses) :
                new ObjectParameter("Expenses", typeof(decimal));
    
            var netPriceParameter = netPrice.HasValue ?
                new ObjectParameter("NetPrice", netPrice) :
                new ObjectParameter("NetPrice", typeof(decimal));
    
            var returnsMoneyActionParameter = returnsMoneyAction.HasValue ?
                new ObjectParameter("ReturnsMoneyAction", returnsMoneyAction) :
                new ObjectParameter("ReturnsMoneyAction", typeof(int));
    
            var safeIdParameter = safeId.HasValue ?
                new ObjectParameter("SafeId", safeId) :
                new ObjectParameter("SafeId", typeof(long));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var periodIdParameter = periodId.HasValue ?
                new ObjectParameter("PeriodId", periodId) :
                new ObjectParameter("PeriodId", typeof(long));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("HDPurchaseReturn_Insert", idCodeParameter, suppIdParameter, empIdParameter, isReturnParameter, returnDateParameter, priceParameter, discountValParameter, discountPercentParameter, expensesParameter, netPriceParameter, returnsMoneyActionParameter, safeIdParameter, notesParameter, periodIdParameter, lUUParameter, lUDParameter, id);
        }
    
        public virtual ObjectResult<HDPurchaseReturn_SelectAll_Result> HDPurchaseReturn_SelectAll(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<long> periodId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var periodIdParameter = periodId.HasValue ?
                new ObjectParameter("PeriodId", periodId) :
                new ObjectParameter("PeriodId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<HDPurchaseReturn_SelectAll_Result>("HDPurchaseReturn_SelectAll", fromDateParameter, toDateParameter, periodIdParameter);
        }
    
        public virtual ObjectResult<HDPurchaseReturn_SelectOne_Result> HDPurchaseReturn_SelectOne(Nullable<long> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<HDPurchaseReturn_SelectOne_Result>("HDPurchaseReturn_SelectOne", idParameter);
        }
    
        public virtual int HDPurchaseReturn_Update(Nullable<long> id, string idCode, Nullable<long> suppId, Nullable<long> empId, Nullable<bool> isReturn, Nullable<System.DateTime> returnDate, Nullable<decimal> price, Nullable<decimal> discountVal, Nullable<double> discountPercent, Nullable<decimal> expenses, Nullable<decimal> netPrice, Nullable<int> returnsMoneyAction, Nullable<long> safeId, string notes, Nullable<long> periodId, Nullable<long> lUU, Nullable<System.DateTime> lUD)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var idCodeParameter = idCode != null ?
                new ObjectParameter("IdCode", idCode) :
                new ObjectParameter("IdCode", typeof(string));
    
            var suppIdParameter = suppId.HasValue ?
                new ObjectParameter("SuppId", suppId) :
                new ObjectParameter("SuppId", typeof(long));
    
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(long));
    
            var isReturnParameter = isReturn.HasValue ?
                new ObjectParameter("IsReturn", isReturn) :
                new ObjectParameter("IsReturn", typeof(bool));
    
            var returnDateParameter = returnDate.HasValue ?
                new ObjectParameter("ReturnDate", returnDate) :
                new ObjectParameter("ReturnDate", typeof(System.DateTime));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var discountValParameter = discountVal.HasValue ?
                new ObjectParameter("DiscountVal", discountVal) :
                new ObjectParameter("DiscountVal", typeof(decimal));
    
            var discountPercentParameter = discountPercent.HasValue ?
                new ObjectParameter("DiscountPercent", discountPercent) :
                new ObjectParameter("DiscountPercent", typeof(double));
    
            var expensesParameter = expenses.HasValue ?
                new ObjectParameter("Expenses", expenses) :
                new ObjectParameter("Expenses", typeof(decimal));
    
            var netPriceParameter = netPrice.HasValue ?
                new ObjectParameter("NetPrice", netPrice) :
                new ObjectParameter("NetPrice", typeof(decimal));
    
            var returnsMoneyActionParameter = returnsMoneyAction.HasValue ?
                new ObjectParameter("ReturnsMoneyAction", returnsMoneyAction) :
                new ObjectParameter("ReturnsMoneyAction", typeof(int));
    
            var safeIdParameter = safeId.HasValue ?
                new ObjectParameter("SafeId", safeId) :
                new ObjectParameter("SafeId", typeof(long));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var periodIdParameter = periodId.HasValue ?
                new ObjectParameter("PeriodId", periodId) :
                new ObjectParameter("PeriodId", typeof(long));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("HDPurchaseReturn_Update", idParameter, idCodeParameter, suppIdParameter, empIdParameter, isReturnParameter, returnDateParameter, priceParameter, discountValParameter, discountPercentParameter, expensesParameter, netPriceParameter, returnsMoneyActionParameter, safeIdParameter, notesParameter, periodIdParameter, lUUParameter, lUDParameter);
        }
    
        public virtual int HDTransferMaterials_Delete(Nullable<long> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("HDTransferMaterials_Delete", idParameter);
        }
    
        public virtual int HDTransferMaterials_Insert(Nullable<long> idCode, Nullable<System.DateTime> dateHDTransferMaterials, Nullable<long> hDTransferRequest, Nullable<long> requestStoreID, Nullable<long> receiveStoreID, Nullable<long> requestEmpID, Nullable<long> receiveEmpID, Nullable<long> periodId, string notes, Nullable<long> lUU, Nullable<System.DateTime> lUD, ObjectParameter id)
        {
            var idCodeParameter = idCode.HasValue ?
                new ObjectParameter("IdCode", idCode) :
                new ObjectParameter("IdCode", typeof(long));
    
            var dateHDTransferMaterialsParameter = dateHDTransferMaterials.HasValue ?
                new ObjectParameter("DateHDTransferMaterials", dateHDTransferMaterials) :
                new ObjectParameter("DateHDTransferMaterials", typeof(System.DateTime));
    
            var hDTransferRequestParameter = hDTransferRequest.HasValue ?
                new ObjectParameter("HDTransferRequest", hDTransferRequest) :
                new ObjectParameter("HDTransferRequest", typeof(long));
    
            var requestStoreIDParameter = requestStoreID.HasValue ?
                new ObjectParameter("RequestStoreID", requestStoreID) :
                new ObjectParameter("RequestStoreID", typeof(long));
    
            var receiveStoreIDParameter = receiveStoreID.HasValue ?
                new ObjectParameter("ReceiveStoreID", receiveStoreID) :
                new ObjectParameter("ReceiveStoreID", typeof(long));
    
            var requestEmpIDParameter = requestEmpID.HasValue ?
                new ObjectParameter("RequestEmpID", requestEmpID) :
                new ObjectParameter("RequestEmpID", typeof(long));
    
            var receiveEmpIDParameter = receiveEmpID.HasValue ?
                new ObjectParameter("ReceiveEmpID", receiveEmpID) :
                new ObjectParameter("ReceiveEmpID", typeof(long));
    
            var periodIdParameter = periodId.HasValue ?
                new ObjectParameter("PeriodId", periodId) :
                new ObjectParameter("PeriodId", typeof(long));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("HDTransferMaterials_Insert", idCodeParameter, dateHDTransferMaterialsParameter, hDTransferRequestParameter, requestStoreIDParameter, receiveStoreIDParameter, requestEmpIDParameter, receiveEmpIDParameter, periodIdParameter, notesParameter, lUUParameter, lUDParameter, id);
        }
    
        public virtual ObjectResult<HDTransferMaterials_SelectAll_Result> HDTransferMaterials_SelectAll(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<long> periodId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var periodIdParameter = periodId.HasValue ?
                new ObjectParameter("PeriodId", periodId) :
                new ObjectParameter("PeriodId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<HDTransferMaterials_SelectAll_Result>("HDTransferMaterials_SelectAll", fromDateParameter, toDateParameter, periodIdParameter);
        }
    
        public virtual ObjectResult<HDTransferMaterials_SelectOne_Result> HDTransferMaterials_SelectOne(Nullable<long> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<HDTransferMaterials_SelectOne_Result>("HDTransferMaterials_SelectOne", idParameter);
        }
    
        public virtual int HDTransferMaterials_Update(Nullable<long> id, Nullable<long> idCode, Nullable<System.DateTime> dateHDTransferMaterials, Nullable<long> hDTransferRequest, Nullable<long> requestStoreID, Nullable<long> receiveStoreID, Nullable<long> requestEmpID, Nullable<long> receiveEmpID, Nullable<long> periodId, string notes, Nullable<long> lUU, Nullable<System.DateTime> lUD)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var idCodeParameter = idCode.HasValue ?
                new ObjectParameter("IdCode", idCode) :
                new ObjectParameter("IdCode", typeof(long));
    
            var dateHDTransferMaterialsParameter = dateHDTransferMaterials.HasValue ?
                new ObjectParameter("DateHDTransferMaterials", dateHDTransferMaterials) :
                new ObjectParameter("DateHDTransferMaterials", typeof(System.DateTime));
    
            var hDTransferRequestParameter = hDTransferRequest.HasValue ?
                new ObjectParameter("HDTransferRequest", hDTransferRequest) :
                new ObjectParameter("HDTransferRequest", typeof(long));
    
            var requestStoreIDParameter = requestStoreID.HasValue ?
                new ObjectParameter("RequestStoreID", requestStoreID) :
                new ObjectParameter("RequestStoreID", typeof(long));
    
            var receiveStoreIDParameter = receiveStoreID.HasValue ?
                new ObjectParameter("ReceiveStoreID", receiveStoreID) :
                new ObjectParameter("ReceiveStoreID", typeof(long));
    
            var requestEmpIDParameter = requestEmpID.HasValue ?
                new ObjectParameter("RequestEmpID", requestEmpID) :
                new ObjectParameter("RequestEmpID", typeof(long));
    
            var receiveEmpIDParameter = receiveEmpID.HasValue ?
                new ObjectParameter("ReceiveEmpID", receiveEmpID) :
                new ObjectParameter("ReceiveEmpID", typeof(long));
    
            var periodIdParameter = periodId.HasValue ?
                new ObjectParameter("PeriodId", periodId) :
                new ObjectParameter("PeriodId", typeof(long));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("HDTransferMaterials_Update", idParameter, idCodeParameter, dateHDTransferMaterialsParameter, hDTransferRequestParameter, requestStoreIDParameter, receiveStoreIDParameter, requestEmpIDParameter, receiveEmpIDParameter, periodIdParameter, notesParameter, lUUParameter, lUDParameter);
        }
    
        public virtual int HDTransferRequest_Delete(Nullable<long> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("HDTransferRequest_Delete", idParameter);
        }
    
        public virtual int HDTransferRequest_Insert(Nullable<long> idCode, Nullable<System.DateTime> dateRequest, Nullable<long> requestStoreId, Nullable<long> recieveStoreId, Nullable<long> requestEmpId, Nullable<long> recieveEmpId, Nullable<long> periodId, string notes, Nullable<long> lUU, Nullable<System.DateTime> lUD, Nullable<bool> active, ObjectParameter id)
        {
            var idCodeParameter = idCode.HasValue ?
                new ObjectParameter("idCode", idCode) :
                new ObjectParameter("idCode", typeof(long));
    
            var dateRequestParameter = dateRequest.HasValue ?
                new ObjectParameter("DateRequest", dateRequest) :
                new ObjectParameter("DateRequest", typeof(System.DateTime));
    
            var requestStoreIdParameter = requestStoreId.HasValue ?
                new ObjectParameter("RequestStoreId", requestStoreId) :
                new ObjectParameter("RequestStoreId", typeof(long));
    
            var recieveStoreIdParameter = recieveStoreId.HasValue ?
                new ObjectParameter("RecieveStoreId", recieveStoreId) :
                new ObjectParameter("RecieveStoreId", typeof(long));
    
            var requestEmpIdParameter = requestEmpId.HasValue ?
                new ObjectParameter("RequestEmpId", requestEmpId) :
                new ObjectParameter("RequestEmpId", typeof(long));
    
            var recieveEmpIdParameter = recieveEmpId.HasValue ?
                new ObjectParameter("RecieveEmpId", recieveEmpId) :
                new ObjectParameter("RecieveEmpId", typeof(long));
    
            var periodIdParameter = periodId.HasValue ?
                new ObjectParameter("PeriodId", periodId) :
                new ObjectParameter("PeriodId", typeof(long));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("active", active) :
                new ObjectParameter("active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("HDTransferRequest_Insert", idCodeParameter, dateRequestParameter, requestStoreIdParameter, recieveStoreIdParameter, requestEmpIdParameter, recieveEmpIdParameter, periodIdParameter, notesParameter, lUUParameter, lUDParameter, activeParameter, id);
        }
    
        public virtual ObjectResult<HDTransferRequest_SelectAll_Result> HDTransferRequest_SelectAll(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<HDTransferRequest_SelectAll_Result>("HDTransferRequest_SelectAll", fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<HDTransferRequest_SelectAllPeriodId_Result> HDTransferRequest_SelectAllPeriodId(Nullable<long> periodId)
        {
            var periodIdParameter = periodId.HasValue ?
                new ObjectParameter("PeriodId", periodId) :
                new ObjectParameter("PeriodId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<HDTransferRequest_SelectAllPeriodId_Result>("HDTransferRequest_SelectAllPeriodId", periodIdParameter);
        }
    
        public virtual ObjectResult<HDTransferRequest_SelectOne_Result> HDTransferRequest_SelectOne(Nullable<long> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<HDTransferRequest_SelectOne_Result>("HDTransferRequest_SelectOne", idParameter);
        }
    
        public virtual int HDTransferRequest_Update(Nullable<long> id, Nullable<long> idCode, Nullable<System.DateTime> dateRequest, Nullable<long> requestStoreId, Nullable<long> recieveStoreId, Nullable<long> requestEmpId, Nullable<long> recieveEmpId, Nullable<long> periodId, string notes, Nullable<bool> active, Nullable<long> lUU, Nullable<System.DateTime> lUD)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var idCodeParameter = idCode.HasValue ?
                new ObjectParameter("idCode", idCode) :
                new ObjectParameter("idCode", typeof(long));
    
            var dateRequestParameter = dateRequest.HasValue ?
                new ObjectParameter("DateRequest", dateRequest) :
                new ObjectParameter("DateRequest", typeof(System.DateTime));
    
            var requestStoreIdParameter = requestStoreId.HasValue ?
                new ObjectParameter("RequestStoreId", requestStoreId) :
                new ObjectParameter("RequestStoreId", typeof(long));
    
            var recieveStoreIdParameter = recieveStoreId.HasValue ?
                new ObjectParameter("RecieveStoreId", recieveStoreId) :
                new ObjectParameter("RecieveStoreId", typeof(long));
    
            var requestEmpIdParameter = requestEmpId.HasValue ?
                new ObjectParameter("RequestEmpId", requestEmpId) :
                new ObjectParameter("RequestEmpId", typeof(long));
    
            var recieveEmpIdParameter = recieveEmpId.HasValue ?
                new ObjectParameter("RecieveEmpId", recieveEmpId) :
                new ObjectParameter("RecieveEmpId", typeof(long));
    
            var periodIdParameter = periodId.HasValue ?
                new ObjectParameter("PeriodId", periodId) :
                new ObjectParameter("PeriodId", typeof(long));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("active", active) :
                new ObjectParameter("active", typeof(bool));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("HDTransferRequest_Update", idParameter, idCodeParameter, dateRequestParameter, requestStoreIdParameter, recieveStoreIdParameter, requestEmpIdParameter, recieveEmpIdParameter, periodIdParameter, notesParameter, activeParameter, lUUParameter, lUDParameter);
        }
    
        public virtual int HRDepartments_Delete(Nullable<long> hRDepartmentID)
        {
            var hRDepartmentIDParameter = hRDepartmentID.HasValue ?
                new ObjectParameter("HRDepartmentID", hRDepartmentID) :
                new ObjectParameter("HRDepartmentID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("HRDepartments_Delete", hRDepartmentIDParameter);
        }
    
        public virtual int HRDepartments_Insert(string hRDepartmentName, Nullable<long> idParant, string path, Nullable<int> pathLevel, Nullable<long> lUU, Nullable<System.DateTime> lUD, ObjectParameter hRDepartmentID)
        {
            var hRDepartmentNameParameter = hRDepartmentName != null ?
                new ObjectParameter("HRDepartmentName", hRDepartmentName) :
                new ObjectParameter("HRDepartmentName", typeof(string));
    
            var idParantParameter = idParant.HasValue ?
                new ObjectParameter("IdParant", idParant) :
                new ObjectParameter("IdParant", typeof(long));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var pathLevelParameter = pathLevel.HasValue ?
                new ObjectParameter("PathLevel", pathLevel) :
                new ObjectParameter("PathLevel", typeof(int));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("HRDepartments_Insert", hRDepartmentNameParameter, idParantParameter, pathParameter, pathLevelParameter, lUUParameter, lUDParameter, hRDepartmentID);
        }
    
        public virtual ObjectResult<HRDepartments_SelectAll_Result> HRDepartments_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<HRDepartments_SelectAll_Result>("HRDepartments_SelectAll");
        }
    
        public virtual ObjectResult<HRDepartments_SelectOne_Result> HRDepartments_SelectOne(Nullable<long> hRDepartmentID)
        {
            var hRDepartmentIDParameter = hRDepartmentID.HasValue ?
                new ObjectParameter("HRDepartmentID", hRDepartmentID) :
                new ObjectParameter("HRDepartmentID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<HRDepartments_SelectOne_Result>("HRDepartments_SelectOne", hRDepartmentIDParameter);
        }
    
        public virtual int HRDepartments_Update(Nullable<long> hRDepartmentID, string hRDepartmentName, Nullable<long> idParant, string path, Nullable<int> pathLevel, Nullable<long> lUU, Nullable<System.DateTime> lUD)
        {
            var hRDepartmentIDParameter = hRDepartmentID.HasValue ?
                new ObjectParameter("HRDepartmentID", hRDepartmentID) :
                new ObjectParameter("HRDepartmentID", typeof(long));
    
            var hRDepartmentNameParameter = hRDepartmentName != null ?
                new ObjectParameter("HRDepartmentName", hRDepartmentName) :
                new ObjectParameter("HRDepartmentName", typeof(string));
    
            var idParantParameter = idParant.HasValue ?
                new ObjectParameter("IdParant", idParant) :
                new ObjectParameter("IdParant", typeof(long));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var pathLevelParameter = pathLevel.HasValue ?
                new ObjectParameter("PathLevel", pathLevel) :
                new ObjectParameter("PathLevel", typeof(int));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("HRDepartments_Update", hRDepartmentIDParameter, hRDepartmentNameParameter, idParantParameter, pathParameter, pathLevelParameter, lUUParameter, lUDParameter);
        }
    
        public virtual int HRJobs_Delete(Nullable<long> hRJobID)
        {
            var hRJobIDParameter = hRJobID.HasValue ?
                new ObjectParameter("HRJobID", hRJobID) :
                new ObjectParameter("HRJobID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("HRJobs_Delete", hRJobIDParameter);
        }
    
        public virtual int HRJobs_Insert(string hRJobName, Nullable<long> idParant, string path, Nullable<int> pathLevel, Nullable<long> lUU, Nullable<System.DateTime> lUD, ObjectParameter hRJobID)
        {
            var hRJobNameParameter = hRJobName != null ?
                new ObjectParameter("HRJobName", hRJobName) :
                new ObjectParameter("HRJobName", typeof(string));
    
            var idParantParameter = idParant.HasValue ?
                new ObjectParameter("IdParant", idParant) :
                new ObjectParameter("IdParant", typeof(long));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var pathLevelParameter = pathLevel.HasValue ?
                new ObjectParameter("PathLevel", pathLevel) :
                new ObjectParameter("PathLevel", typeof(int));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("HRJobs_Insert", hRJobNameParameter, idParantParameter, pathParameter, pathLevelParameter, lUUParameter, lUDParameter, hRJobID);
        }
    
        public virtual ObjectResult<HRJobs_SelectAll_Result> HRJobs_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<HRJobs_SelectAll_Result>("HRJobs_SelectAll");
        }
    
        public virtual ObjectResult<HRJobs_SelectOne_Result> HRJobs_SelectOne(Nullable<long> hRJobID)
        {
            var hRJobIDParameter = hRJobID.HasValue ?
                new ObjectParameter("HRJobID", hRJobID) :
                new ObjectParameter("HRJobID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<HRJobs_SelectOne_Result>("HRJobs_SelectOne", hRJobIDParameter);
        }
    
        public virtual int HRJobs_Update(Nullable<long> hRJobID, string hRJobName, Nullable<long> idParant, string path, Nullable<int> pathLevel, Nullable<long> lUU, Nullable<System.DateTime> lUD)
        {
            var hRJobIDParameter = hRJobID.HasValue ?
                new ObjectParameter("HRJobID", hRJobID) :
                new ObjectParameter("HRJobID", typeof(long));
    
            var hRJobNameParameter = hRJobName != null ?
                new ObjectParameter("HRJobName", hRJobName) :
                new ObjectParameter("HRJobName", typeof(string));
    
            var idParantParameter = idParant.HasValue ?
                new ObjectParameter("IdParant", idParant) :
                new ObjectParameter("IdParant", typeof(long));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var pathLevelParameter = pathLevel.HasValue ?
                new ObjectParameter("PathLevel", pathLevel) :
                new ObjectParameter("PathLevel", typeof(int));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("HRJobs_Update", hRJobIDParameter, hRJobNameParameter, idParantParameter, pathParameter, pathLevelParameter, lUUParameter, lUDParameter);
        }
    
        public virtual int insertBadlatlog(Nullable<int> monthNUM, Nullable<int> year, Nullable<long> hRDepartmentID, Nullable<long> mosiratHDID, Nullable<long> lUU)
        {
            var monthNUMParameter = monthNUM.HasValue ?
                new ObjectParameter("MonthNUM", monthNUM) :
                new ObjectParameter("MonthNUM", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var hRDepartmentIDParameter = hRDepartmentID.HasValue ?
                new ObjectParameter("HRDepartmentID", hRDepartmentID) :
                new ObjectParameter("HRDepartmentID", typeof(long));
    
            var mosiratHDIDParameter = mosiratHDID.HasValue ?
                new ObjectParameter("mosiratHDID", mosiratHDID) :
                new ObjectParameter("mosiratHDID", typeof(long));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertBadlatlog", monthNUMParameter, yearParameter, hRDepartmentIDParameter, mosiratHDIDParameter, lUUParameter);
        }
    
        public virtual int insertBadlatlogVal(Nullable<int> monthNUM, Nullable<int> year, Nullable<long> hRDepartmentID, Nullable<long> mosiratHDID, Nullable<long> lUU)
        {
            var monthNUMParameter = monthNUM.HasValue ?
                new ObjectParameter("MonthNUM", monthNUM) :
                new ObjectParameter("MonthNUM", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var hRDepartmentIDParameter = hRDepartmentID.HasValue ?
                new ObjectParameter("HRDepartmentID", hRDepartmentID) :
                new ObjectParameter("HRDepartmentID", typeof(long));
    
            var mosiratHDIDParameter = mosiratHDID.HasValue ?
                new ObjectParameter("mosiratHDID", mosiratHDID) :
                new ObjectParameter("mosiratHDID", typeof(long));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertBadlatlogVal", monthNUMParameter, yearParameter, hRDepartmentIDParameter, mosiratHDIDParameter, lUUParameter);
        }
    
        public virtual int InsertUserLogInTransaction(Nullable<long> emplIdCode, string @case)
        {
            var emplIdCodeParameter = emplIdCode.HasValue ?
                new ObjectParameter("EmplIdCode", emplIdCode) :
                new ObjectParameter("EmplIdCode", typeof(long));
    
            var caseParameter = @case != null ?
                new ObjectParameter("Case", @case) :
                new ObjectParameter("Case", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUserLogInTransaction", emplIdCodeParameter, caseParameter);
        }
    
        public virtual int InventoriesCompare_Delete(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InventoriesCompare_Delete", iDParameter);
        }
    
        public virtual int InventoriesCompare_Insert(Nullable<long> inventoryID, Nullable<int> salesInventoryID, ObjectParameter iD)
        {
            var inventoryIDParameter = inventoryID.HasValue ?
                new ObjectParameter("InventoryID", inventoryID) :
                new ObjectParameter("InventoryID", typeof(long));
    
            var salesInventoryIDParameter = salesInventoryID.HasValue ?
                new ObjectParameter("SalesInventoryID", salesInventoryID) :
                new ObjectParameter("SalesInventoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InventoriesCompare_Insert", inventoryIDParameter, salesInventoryIDParameter, iD);
        }
    
        public virtual ObjectResult<InventoriesCompare_SelectAll_Result> InventoriesCompare_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InventoriesCompare_SelectAll_Result>("InventoriesCompare_SelectAll");
        }
    
        public virtual ObjectResult<InventoriesCompare_SelectOne_Result> InventoriesCompare_SelectOne(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InventoriesCompare_SelectOne_Result>("InventoriesCompare_SelectOne", iDParameter);
        }
    
        public virtual int InventoriesCompare_Update(Nullable<int> iD, Nullable<long> inventoryID, Nullable<int> salesInventoryID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var inventoryIDParameter = inventoryID.HasValue ?
                new ObjectParameter("InventoryID", inventoryID) :
                new ObjectParameter("InventoryID", typeof(long));
    
            var salesInventoryIDParameter = salesInventoryID.HasValue ?
                new ObjectParameter("SalesInventoryID", salesInventoryID) :
                new ObjectParameter("SalesInventoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InventoriesCompare_Update", iDParameter, inventoryIDParameter, salesInventoryIDParameter);
        }
    
        public virtual int InventoryDataLog_Delete(Nullable<long> storeId, Nullable<int> idBillType, Nullable<long> periodId)
        {
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("StoreId", storeId) :
                new ObjectParameter("StoreId", typeof(long));
    
            var idBillTypeParameter = idBillType.HasValue ?
                new ObjectParameter("IdBillType", idBillType) :
                new ObjectParameter("IdBillType", typeof(int));
    
            var periodIdParameter = periodId.HasValue ?
                new ObjectParameter("PeriodId", periodId) :
                new ObjectParameter("PeriodId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InventoryDataLog_Delete", storeIdParameter, idBillTypeParameter, periodIdParameter);
        }
    
        public virtual int InventoryDataLog_Delete_by_idbill(Nullable<int> idBillType, Nullable<long> periodId, Nullable<long> idBill)
        {
            var idBillTypeParameter = idBillType.HasValue ?
                new ObjectParameter("IdBillType", idBillType) :
                new ObjectParameter("IdBillType", typeof(int));
    
            var periodIdParameter = periodId.HasValue ?
                new ObjectParameter("PeriodId", periodId) :
                new ObjectParameter("PeriodId", typeof(long));
    
            var idBillParameter = idBill.HasValue ?
                new ObjectParameter("IdBill", idBill) :
                new ObjectParameter("IdBill", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InventoryDataLog_Delete_by_idbill", idBillTypeParameter, periodIdParameter, idBillParameter);
        }
    
        public virtual int InventoryDataLog_Insert(Nullable<long> inventoryId, Nullable<long> idBill, Nullable<int> idBillType, Nullable<long> storeId, Nullable<long> purchaseIdCode, Nullable<long> salesIdCode, Nullable<long> returnsPurchaseIdCode, Nullable<int> sortSubtract, Nullable<long> itemCode, Nullable<long> amount, Nullable<float> amountUnitBefore, Nullable<float> amountUnit, Nullable<decimal> priceUnit, string operationType, Nullable<long> lUU, Nullable<System.DateTime> lUD, Nullable<long> periodId, Nullable<long> unitID, Nullable<System.DateTime> dateBill, ObjectParameter id)
        {
            var inventoryIdParameter = inventoryId.HasValue ?
                new ObjectParameter("InventoryId", inventoryId) :
                new ObjectParameter("InventoryId", typeof(long));
    
            var idBillParameter = idBill.HasValue ?
                new ObjectParameter("IdBill", idBill) :
                new ObjectParameter("IdBill", typeof(long));
    
            var idBillTypeParameter = idBillType.HasValue ?
                new ObjectParameter("IdBillType", idBillType) :
                new ObjectParameter("IdBillType", typeof(int));
    
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("StoreId", storeId) :
                new ObjectParameter("StoreId", typeof(long));
    
            var purchaseIdCodeParameter = purchaseIdCode.HasValue ?
                new ObjectParameter("PurchaseIdCode", purchaseIdCode) :
                new ObjectParameter("PurchaseIdCode", typeof(long));
    
            var salesIdCodeParameter = salesIdCode.HasValue ?
                new ObjectParameter("SalesIdCode", salesIdCode) :
                new ObjectParameter("SalesIdCode", typeof(long));
    
            var returnsPurchaseIdCodeParameter = returnsPurchaseIdCode.HasValue ?
                new ObjectParameter("ReturnsPurchaseIdCode", returnsPurchaseIdCode) :
                new ObjectParameter("ReturnsPurchaseIdCode", typeof(long));
    
            var sortSubtractParameter = sortSubtract.HasValue ?
                new ObjectParameter("SortSubtract", sortSubtract) :
                new ObjectParameter("SortSubtract", typeof(int));
    
            var itemCodeParameter = itemCode.HasValue ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(long));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(long));
    
            var amountUnitBeforeParameter = amountUnitBefore.HasValue ?
                new ObjectParameter("AmountUnitBefore", amountUnitBefore) :
                new ObjectParameter("AmountUnitBefore", typeof(float));
    
            var amountUnitParameter = amountUnit.HasValue ?
                new ObjectParameter("AmountUnit", amountUnit) :
                new ObjectParameter("AmountUnit", typeof(float));
    
            var priceUnitParameter = priceUnit.HasValue ?
                new ObjectParameter("PriceUnit", priceUnit) :
                new ObjectParameter("PriceUnit", typeof(decimal));
    
            var operationTypeParameter = operationType != null ?
                new ObjectParameter("OperationType", operationType) :
                new ObjectParameter("OperationType", typeof(string));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            var periodIdParameter = periodId.HasValue ?
                new ObjectParameter("PeriodId", periodId) :
                new ObjectParameter("PeriodId", typeof(long));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(long));
    
            var dateBillParameter = dateBill.HasValue ?
                new ObjectParameter("DateBill", dateBill) :
                new ObjectParameter("DateBill", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InventoryDataLog_Insert", inventoryIdParameter, idBillParameter, idBillTypeParameter, storeIdParameter, purchaseIdCodeParameter, salesIdCodeParameter, returnsPurchaseIdCodeParameter, sortSubtractParameter, itemCodeParameter, amountParameter, amountUnitBeforeParameter, amountUnitParameter, priceUnitParameter, operationTypeParameter, lUUParameter, lUDParameter, periodIdParameter, unitIDParameter, dateBillParameter, id);
        }
    
        public virtual ObjectResult<InventoryDataLog_SelectAll_Result> InventoryDataLog_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InventoryDataLog_SelectAll_Result>("InventoryDataLog_SelectAll");
        }
    
        public virtual ObjectResult<Nullable<long>> InventoryDataLog_SelectBalancedFirstTime(Nullable<long> itemCode, Nullable<System.DateTime> date)
        {
            var itemCodeParameter = itemCode.HasValue ?
                new ObjectParameter("itemCode", itemCode) :
                new ObjectParameter("itemCode", typeof(long));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("InventoryDataLog_SelectBalancedFirstTime", itemCodeParameter, dateParameter);
        }
    
        public virtual ObjectResult<InventoryDataLog_SelectOne_Result> InventoryDataLog_SelectOne(Nullable<long> storeId, Nullable<int> idBillType, Nullable<long> periodId)
        {
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("StoreId", storeId) :
                new ObjectParameter("StoreId", typeof(long));
    
            var idBillTypeParameter = idBillType.HasValue ?
                new ObjectParameter("IdBillType", idBillType) :
                new ObjectParameter("IdBillType", typeof(int));
    
            var periodIdParameter = periodId.HasValue ?
                new ObjectParameter("PeriodId", periodId) :
                new ObjectParameter("PeriodId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InventoryDataLog_SelectOne_Result>("InventoryDataLog_SelectOne", storeIdParameter, idBillTypeParameter, periodIdParameter);
        }
    
        public virtual ObjectResult<InventoryDataLog_SelectOneGroupForFirst_Result> InventoryDataLog_SelectOneGroupForFirst(Nullable<long> storeId, Nullable<int> idBillType, Nullable<long> periodId)
        {
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("StoreId", storeId) :
                new ObjectParameter("StoreId", typeof(long));
    
            var idBillTypeParameter = idBillType.HasValue ?
                new ObjectParameter("IdBillType", idBillType) :
                new ObjectParameter("IdBillType", typeof(int));
    
            var periodIdParameter = periodId.HasValue ?
                new ObjectParameter("PeriodId", periodId) :
                new ObjectParameter("PeriodId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InventoryDataLog_SelectOneGroupForFirst_Result>("InventoryDataLog_SelectOneGroupForFirst", storeIdParameter, idBillTypeParameter, periodIdParameter);
        }
    
        public virtual int ItemControl_Delete(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ItemControl_Delete", iDParameter);
        }
    
        public virtual int ItemControl_Insert(Nullable<long> catID, Nullable<long> catIDFK, Nullable<long> itemID, Nullable<long> itemIDFk, Nullable<long> companyID, Nullable<long> id_itemName, string itemName, string itemFullName, Nullable<System.DateTime> dateWork, Nullable<System.DateTime> dateStop, Nullable<bool> isStillWork, Nullable<bool> isSingle, Nullable<bool> isValid, Nullable<int> year, Nullable<int> month, Nullable<int> day, Nullable<bool> isWarntley, Nullable<int> yearW, Nullable<int> monthW, Nullable<int> dayW, string limitOrderUnit, Nullable<int> countLimitOrder, string origin, string exporter, string barCodeProduct, Nullable<bool> chkSecur1, Nullable<bool> chkSecur2, Nullable<bool> chkSecur3, Nullable<bool> chkSecur4, Nullable<bool> chkSecur5, Nullable<bool> chkSecur6, Nullable<bool> chkSecur7, string maxDurabilityAmunt, Nullable<int> maxDurabilityUnit, string storeNotic, Nullable<long> inventoryProcess, string lUU, Nullable<System.DateTime> lUD, Nullable<long> unitModelID, Nullable<long> inventoryID, Nullable<double> purchasePrice, Nullable<double> defultPrice, Nullable<double> costPrice, string userID, Nullable<long> uniteMountName, Nullable<long> modelUnitID, Nullable<long> insertticks, Nullable<bool> isActive, Nullable<decimal> orderLimit, Nullable<decimal> maxQuantity, string prefix, string suffix, string supplierCode, Nullable<bool> useSupplierCodeForSales, string freeItemID, Nullable<int> freeItemCount, Nullable<int> freeOfferID, Nullable<long> companyID_Sup, string path, string iDCode, ObjectParameter iD)
        {
            var catIDParameter = catID.HasValue ?
                new ObjectParameter("CatID", catID) :
                new ObjectParameter("CatID", typeof(long));
    
            var catIDFKParameter = catIDFK.HasValue ?
                new ObjectParameter("CatIDFK", catIDFK) :
                new ObjectParameter("CatIDFK", typeof(long));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(long));
    
            var itemIDFkParameter = itemIDFk.HasValue ?
                new ObjectParameter("ItemIDFk", itemIDFk) :
                new ObjectParameter("ItemIDFk", typeof(long));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(long));
    
            var id_itemNameParameter = id_itemName.HasValue ?
                new ObjectParameter("id_itemName", id_itemName) :
                new ObjectParameter("id_itemName", typeof(long));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var itemFullNameParameter = itemFullName != null ?
                new ObjectParameter("itemFullName", itemFullName) :
                new ObjectParameter("itemFullName", typeof(string));
    
            var dateWorkParameter = dateWork.HasValue ?
                new ObjectParameter("DateWork", dateWork) :
                new ObjectParameter("DateWork", typeof(System.DateTime));
    
            var dateStopParameter = dateStop.HasValue ?
                new ObjectParameter("DateStop", dateStop) :
                new ObjectParameter("DateStop", typeof(System.DateTime));
    
            var isStillWorkParameter = isStillWork.HasValue ?
                new ObjectParameter("IsStillWork", isStillWork) :
                new ObjectParameter("IsStillWork", typeof(bool));
    
            var isSingleParameter = isSingle.HasValue ?
                new ObjectParameter("IsSingle", isSingle) :
                new ObjectParameter("IsSingle", typeof(bool));
    
            var isValidParameter = isValid.HasValue ?
                new ObjectParameter("IsValid", isValid) :
                new ObjectParameter("IsValid", typeof(bool));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            var dayParameter = day.HasValue ?
                new ObjectParameter("Day", day) :
                new ObjectParameter("Day", typeof(int));
    
            var isWarntleyParameter = isWarntley.HasValue ?
                new ObjectParameter("IsWarntley", isWarntley) :
                new ObjectParameter("IsWarntley", typeof(bool));
    
            var yearWParameter = yearW.HasValue ?
                new ObjectParameter("YearW", yearW) :
                new ObjectParameter("YearW", typeof(int));
    
            var monthWParameter = monthW.HasValue ?
                new ObjectParameter("MonthW", monthW) :
                new ObjectParameter("MonthW", typeof(int));
    
            var dayWParameter = dayW.HasValue ?
                new ObjectParameter("DayW", dayW) :
                new ObjectParameter("DayW", typeof(int));
    
            var limitOrderUnitParameter = limitOrderUnit != null ?
                new ObjectParameter("LimitOrderUnit", limitOrderUnit) :
                new ObjectParameter("LimitOrderUnit", typeof(string));
    
            var countLimitOrderParameter = countLimitOrder.HasValue ?
                new ObjectParameter("CountLimitOrder", countLimitOrder) :
                new ObjectParameter("CountLimitOrder", typeof(int));
    
            var originParameter = origin != null ?
                new ObjectParameter("Origin", origin) :
                new ObjectParameter("Origin", typeof(string));
    
            var exporterParameter = exporter != null ?
                new ObjectParameter("Exporter", exporter) :
                new ObjectParameter("Exporter", typeof(string));
    
            var barCodeProductParameter = barCodeProduct != null ?
                new ObjectParameter("BarCodeProduct", barCodeProduct) :
                new ObjectParameter("BarCodeProduct", typeof(string));
    
            var chkSecur1Parameter = chkSecur1.HasValue ?
                new ObjectParameter("chkSecur1", chkSecur1) :
                new ObjectParameter("chkSecur1", typeof(bool));
    
            var chkSecur2Parameter = chkSecur2.HasValue ?
                new ObjectParameter("chkSecur2", chkSecur2) :
                new ObjectParameter("chkSecur2", typeof(bool));
    
            var chkSecur3Parameter = chkSecur3.HasValue ?
                new ObjectParameter("chkSecur3", chkSecur3) :
                new ObjectParameter("chkSecur3", typeof(bool));
    
            var chkSecur4Parameter = chkSecur4.HasValue ?
                new ObjectParameter("chkSecur4", chkSecur4) :
                new ObjectParameter("chkSecur4", typeof(bool));
    
            var chkSecur5Parameter = chkSecur5.HasValue ?
                new ObjectParameter("chkSecur5", chkSecur5) :
                new ObjectParameter("chkSecur5", typeof(bool));
    
            var chkSecur6Parameter = chkSecur6.HasValue ?
                new ObjectParameter("chkSecur6", chkSecur6) :
                new ObjectParameter("chkSecur6", typeof(bool));
    
            var chkSecur7Parameter = chkSecur7.HasValue ?
                new ObjectParameter("chkSecur7", chkSecur7) :
                new ObjectParameter("chkSecur7", typeof(bool));
    
            var maxDurabilityAmuntParameter = maxDurabilityAmunt != null ?
                new ObjectParameter("MaxDurabilityAmunt", maxDurabilityAmunt) :
                new ObjectParameter("MaxDurabilityAmunt", typeof(string));
    
            var maxDurabilityUnitParameter = maxDurabilityUnit.HasValue ?
                new ObjectParameter("MaxDurabilityUnit", maxDurabilityUnit) :
                new ObjectParameter("MaxDurabilityUnit", typeof(int));
    
            var storeNoticParameter = storeNotic != null ?
                new ObjectParameter("StoreNotic", storeNotic) :
                new ObjectParameter("StoreNotic", typeof(string));
    
            var inventoryProcessParameter = inventoryProcess.HasValue ?
                new ObjectParameter("InventoryProcess", inventoryProcess) :
                new ObjectParameter("InventoryProcess", typeof(long));
    
            var lUUParameter = lUU != null ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(string));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            var unitModelIDParameter = unitModelID.HasValue ?
                new ObjectParameter("UnitModelID", unitModelID) :
                new ObjectParameter("UnitModelID", typeof(long));
    
            var inventoryIDParameter = inventoryID.HasValue ?
                new ObjectParameter("InventoryID", inventoryID) :
                new ObjectParameter("InventoryID", typeof(long));
    
            var purchasePriceParameter = purchasePrice.HasValue ?
                new ObjectParameter("PurchasePrice", purchasePrice) :
                new ObjectParameter("PurchasePrice", typeof(double));
    
            var defultPriceParameter = defultPrice.HasValue ?
                new ObjectParameter("DefultPrice", defultPrice) :
                new ObjectParameter("DefultPrice", typeof(double));
    
            var costPriceParameter = costPrice.HasValue ?
                new ObjectParameter("CostPrice", costPrice) :
                new ObjectParameter("CostPrice", typeof(double));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var uniteMountNameParameter = uniteMountName.HasValue ?
                new ObjectParameter("uniteMountName", uniteMountName) :
                new ObjectParameter("uniteMountName", typeof(long));
    
            var modelUnitIDParameter = modelUnitID.HasValue ?
                new ObjectParameter("ModelUnitID", modelUnitID) :
                new ObjectParameter("ModelUnitID", typeof(long));
    
            var insertticksParameter = insertticks.HasValue ?
                new ObjectParameter("Insertticks", insertticks) :
                new ObjectParameter("Insertticks", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var orderLimitParameter = orderLimit.HasValue ?
                new ObjectParameter("OrderLimit", orderLimit) :
                new ObjectParameter("OrderLimit", typeof(decimal));
    
            var maxQuantityParameter = maxQuantity.HasValue ?
                new ObjectParameter("MaxQuantity", maxQuantity) :
                new ObjectParameter("MaxQuantity", typeof(decimal));
    
            var prefixParameter = prefix != null ?
                new ObjectParameter("Prefix", prefix) :
                new ObjectParameter("Prefix", typeof(string));
    
            var suffixParameter = suffix != null ?
                new ObjectParameter("Suffix", suffix) :
                new ObjectParameter("Suffix", typeof(string));
    
            var supplierCodeParameter = supplierCode != null ?
                new ObjectParameter("SupplierCode", supplierCode) :
                new ObjectParameter("SupplierCode", typeof(string));
    
            var useSupplierCodeForSalesParameter = useSupplierCodeForSales.HasValue ?
                new ObjectParameter("UseSupplierCodeForSales", useSupplierCodeForSales) :
                new ObjectParameter("UseSupplierCodeForSales", typeof(bool));
    
            var freeItemIDParameter = freeItemID != null ?
                new ObjectParameter("FreeItemID", freeItemID) :
                new ObjectParameter("FreeItemID", typeof(string));
    
            var freeItemCountParameter = freeItemCount.HasValue ?
                new ObjectParameter("FreeItemCount", freeItemCount) :
                new ObjectParameter("FreeItemCount", typeof(int));
    
            var freeOfferIDParameter = freeOfferID.HasValue ?
                new ObjectParameter("FreeOfferID", freeOfferID) :
                new ObjectParameter("FreeOfferID", typeof(int));
    
            var companyID_SupParameter = companyID_Sup.HasValue ?
                new ObjectParameter("CompanyID_Sup", companyID_Sup) :
                new ObjectParameter("CompanyID_Sup", typeof(long));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var iDCodeParameter = iDCode != null ?
                new ObjectParameter("IDCode", iDCode) :
                new ObjectParameter("IDCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ItemControl_Insert", catIDParameter, catIDFKParameter, itemIDParameter, itemIDFkParameter, companyIDParameter, id_itemNameParameter, itemNameParameter, itemFullNameParameter, dateWorkParameter, dateStopParameter, isStillWorkParameter, isSingleParameter, isValidParameter, yearParameter, monthParameter, dayParameter, isWarntleyParameter, yearWParameter, monthWParameter, dayWParameter, limitOrderUnitParameter, countLimitOrderParameter, originParameter, exporterParameter, barCodeProductParameter, chkSecur1Parameter, chkSecur2Parameter, chkSecur3Parameter, chkSecur4Parameter, chkSecur5Parameter, chkSecur6Parameter, chkSecur7Parameter, maxDurabilityAmuntParameter, maxDurabilityUnitParameter, storeNoticParameter, inventoryProcessParameter, lUUParameter, lUDParameter, unitModelIDParameter, inventoryIDParameter, purchasePriceParameter, defultPriceParameter, costPriceParameter, userIDParameter, uniteMountNameParameter, modelUnitIDParameter, insertticksParameter, isActiveParameter, orderLimitParameter, maxQuantityParameter, prefixParameter, suffixParameter, supplierCodeParameter, useSupplierCodeForSalesParameter, freeItemIDParameter, freeItemCountParameter, freeOfferIDParameter, companyID_SupParameter, pathParameter, iDCodeParameter, iD);
        }
    
        public virtual ObjectResult<ItemControl_NameByBarcode_Result> ItemControl_NameByBarcode(string barcode)
        {
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ItemControl_NameByBarcode_Result>("ItemControl_NameByBarcode", barcodeParameter);
        }
    
        public virtual ObjectResult<ItemControl_SelectAll_Result> ItemControl_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ItemControl_SelectAll_Result>("ItemControl_SelectAll");
        }
    
        public virtual ObjectResult<ItemControl_SelectAllForSearch_Result> ItemControl_SelectAllForSearch()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ItemControl_SelectAllForSearch_Result>("ItemControl_SelectAllForSearch");
        }
    
        public virtual ObjectResult<ItemControl_SelectLimitItem_Result> ItemControl_SelectLimitItem()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ItemControl_SelectLimitItem_Result>("ItemControl_SelectLimitItem");
        }
    
        public virtual ObjectResult<ItemControl_SelectLimitItemByIdSupplier_Result> ItemControl_SelectLimitItemByIdSupplier(Nullable<long> idSupplier)
        {
            var idSupplierParameter = idSupplier.HasValue ?
                new ObjectParameter("IdSupplier", idSupplier) :
                new ObjectParameter("IdSupplier", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ItemControl_SelectLimitItemByIdSupplier_Result>("ItemControl_SelectLimitItemByIdSupplier", idSupplierParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> ItemControl_SelectMaxModel(Nullable<long> catIDFK, Nullable<long> itemIDFk)
        {
            var catIDFKParameter = catIDFK.HasValue ?
                new ObjectParameter("CatIDFK", catIDFK) :
                new ObjectParameter("CatIDFK", typeof(long));
    
            var itemIDFkParameter = itemIDFk.HasValue ?
                new ObjectParameter("ItemIDFk", itemIDFk) :
                new ObjectParameter("ItemIDFk", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("ItemControl_SelectMaxModel", catIDFKParameter, itemIDFkParameter);
        }
    
        public virtual ObjectResult<ItemControl_SelectOne_Result> ItemControl_SelectOne(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ItemControl_SelectOne_Result>("ItemControl_SelectOne", iDParameter);
        }
    
        public virtual int ItemControl_Update(Nullable<long> iD, Nullable<long> catID, Nullable<long> catIDFK, Nullable<long> itemID, Nullable<long> itemIDFk, Nullable<long> companyID, Nullable<long> id_itemName, string itemName, string itemFullName, Nullable<System.DateTime> dateWork, Nullable<System.DateTime> dateStop, Nullable<bool> isStillWork, Nullable<bool> isSingle, Nullable<bool> isValid, Nullable<int> year, Nullable<int> month, Nullable<int> day, Nullable<bool> isWarntley, Nullable<int> yearW, Nullable<int> monthW, Nullable<int> dayW, string limitOrderUnit, Nullable<int> countLimitOrder, string origin, string exporter, string barCodeProduct, Nullable<bool> chkSecur1, Nullable<bool> chkSecur2, Nullable<bool> chkSecur3, Nullable<bool> chkSecur4, Nullable<bool> chkSecur5, Nullable<bool> chkSecur6, Nullable<bool> chkSecur7, string maxDurabilityAmunt, Nullable<int> maxDurabilityUnit, string storeNotic, Nullable<long> inventoryProcess, string lUU, Nullable<System.DateTime> lUD, Nullable<long> unitModelID, Nullable<long> inventoryID, Nullable<double> purchasePrice, Nullable<double> defultPrice, Nullable<double> costPrice, string userID, Nullable<long> uniteMountName, Nullable<long> modelUnitID, Nullable<long> insertticks, Nullable<bool> isActive, Nullable<decimal> orderLimit, Nullable<decimal> maxQuantity, string prefix, string suffix, string supplierCode, Nullable<bool> useSupplierCodeForSales, string freeItemID, Nullable<int> freeItemCount, Nullable<long> companyID_Sup, string path, Nullable<int> freeOfferID, string iDCode)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var catIDParameter = catID.HasValue ?
                new ObjectParameter("CatID", catID) :
                new ObjectParameter("CatID", typeof(long));
    
            var catIDFKParameter = catIDFK.HasValue ?
                new ObjectParameter("CatIDFK", catIDFK) :
                new ObjectParameter("CatIDFK", typeof(long));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(long));
    
            var itemIDFkParameter = itemIDFk.HasValue ?
                new ObjectParameter("ItemIDFk", itemIDFk) :
                new ObjectParameter("ItemIDFk", typeof(long));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(long));
    
            var id_itemNameParameter = id_itemName.HasValue ?
                new ObjectParameter("id_itemName", id_itemName) :
                new ObjectParameter("id_itemName", typeof(long));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var itemFullNameParameter = itemFullName != null ?
                new ObjectParameter("itemFullName", itemFullName) :
                new ObjectParameter("itemFullName", typeof(string));
    
            var dateWorkParameter = dateWork.HasValue ?
                new ObjectParameter("DateWork", dateWork) :
                new ObjectParameter("DateWork", typeof(System.DateTime));
    
            var dateStopParameter = dateStop.HasValue ?
                new ObjectParameter("DateStop", dateStop) :
                new ObjectParameter("DateStop", typeof(System.DateTime));
    
            var isStillWorkParameter = isStillWork.HasValue ?
                new ObjectParameter("IsStillWork", isStillWork) :
                new ObjectParameter("IsStillWork", typeof(bool));
    
            var isSingleParameter = isSingle.HasValue ?
                new ObjectParameter("IsSingle", isSingle) :
                new ObjectParameter("IsSingle", typeof(bool));
    
            var isValidParameter = isValid.HasValue ?
                new ObjectParameter("IsValid", isValid) :
                new ObjectParameter("IsValid", typeof(bool));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            var dayParameter = day.HasValue ?
                new ObjectParameter("Day", day) :
                new ObjectParameter("Day", typeof(int));
    
            var isWarntleyParameter = isWarntley.HasValue ?
                new ObjectParameter("IsWarntley", isWarntley) :
                new ObjectParameter("IsWarntley", typeof(bool));
    
            var yearWParameter = yearW.HasValue ?
                new ObjectParameter("YearW", yearW) :
                new ObjectParameter("YearW", typeof(int));
    
            var monthWParameter = monthW.HasValue ?
                new ObjectParameter("MonthW", monthW) :
                new ObjectParameter("MonthW", typeof(int));
    
            var dayWParameter = dayW.HasValue ?
                new ObjectParameter("DayW", dayW) :
                new ObjectParameter("DayW", typeof(int));
    
            var limitOrderUnitParameter = limitOrderUnit != null ?
                new ObjectParameter("LimitOrderUnit", limitOrderUnit) :
                new ObjectParameter("LimitOrderUnit", typeof(string));
    
            var countLimitOrderParameter = countLimitOrder.HasValue ?
                new ObjectParameter("CountLimitOrder", countLimitOrder) :
                new ObjectParameter("CountLimitOrder", typeof(int));
    
            var originParameter = origin != null ?
                new ObjectParameter("Origin", origin) :
                new ObjectParameter("Origin", typeof(string));
    
            var exporterParameter = exporter != null ?
                new ObjectParameter("Exporter", exporter) :
                new ObjectParameter("Exporter", typeof(string));
    
            var barCodeProductParameter = barCodeProduct != null ?
                new ObjectParameter("BarCodeProduct", barCodeProduct) :
                new ObjectParameter("BarCodeProduct", typeof(string));
    
            var chkSecur1Parameter = chkSecur1.HasValue ?
                new ObjectParameter("chkSecur1", chkSecur1) :
                new ObjectParameter("chkSecur1", typeof(bool));
    
            var chkSecur2Parameter = chkSecur2.HasValue ?
                new ObjectParameter("chkSecur2", chkSecur2) :
                new ObjectParameter("chkSecur2", typeof(bool));
    
            var chkSecur3Parameter = chkSecur3.HasValue ?
                new ObjectParameter("chkSecur3", chkSecur3) :
                new ObjectParameter("chkSecur3", typeof(bool));
    
            var chkSecur4Parameter = chkSecur4.HasValue ?
                new ObjectParameter("chkSecur4", chkSecur4) :
                new ObjectParameter("chkSecur4", typeof(bool));
    
            var chkSecur5Parameter = chkSecur5.HasValue ?
                new ObjectParameter("chkSecur5", chkSecur5) :
                new ObjectParameter("chkSecur5", typeof(bool));
    
            var chkSecur6Parameter = chkSecur6.HasValue ?
                new ObjectParameter("chkSecur6", chkSecur6) :
                new ObjectParameter("chkSecur6", typeof(bool));
    
            var chkSecur7Parameter = chkSecur7.HasValue ?
                new ObjectParameter("chkSecur7", chkSecur7) :
                new ObjectParameter("chkSecur7", typeof(bool));
    
            var maxDurabilityAmuntParameter = maxDurabilityAmunt != null ?
                new ObjectParameter("MaxDurabilityAmunt", maxDurabilityAmunt) :
                new ObjectParameter("MaxDurabilityAmunt", typeof(string));
    
            var maxDurabilityUnitParameter = maxDurabilityUnit.HasValue ?
                new ObjectParameter("MaxDurabilityUnit", maxDurabilityUnit) :
                new ObjectParameter("MaxDurabilityUnit", typeof(int));
    
            var storeNoticParameter = storeNotic != null ?
                new ObjectParameter("StoreNotic", storeNotic) :
                new ObjectParameter("StoreNotic", typeof(string));
    
            var inventoryProcessParameter = inventoryProcess.HasValue ?
                new ObjectParameter("InventoryProcess", inventoryProcess) :
                new ObjectParameter("InventoryProcess", typeof(long));
    
            var lUUParameter = lUU != null ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(string));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            var unitModelIDParameter = unitModelID.HasValue ?
                new ObjectParameter("UnitModelID", unitModelID) :
                new ObjectParameter("UnitModelID", typeof(long));
    
            var inventoryIDParameter = inventoryID.HasValue ?
                new ObjectParameter("InventoryID", inventoryID) :
                new ObjectParameter("InventoryID", typeof(long));
    
            var purchasePriceParameter = purchasePrice.HasValue ?
                new ObjectParameter("PurchasePrice", purchasePrice) :
                new ObjectParameter("PurchasePrice", typeof(double));
    
            var defultPriceParameter = defultPrice.HasValue ?
                new ObjectParameter("DefultPrice", defultPrice) :
                new ObjectParameter("DefultPrice", typeof(double));
    
            var costPriceParameter = costPrice.HasValue ?
                new ObjectParameter("CostPrice", costPrice) :
                new ObjectParameter("CostPrice", typeof(double));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var uniteMountNameParameter = uniteMountName.HasValue ?
                new ObjectParameter("uniteMountName", uniteMountName) :
                new ObjectParameter("uniteMountName", typeof(long));
    
            var modelUnitIDParameter = modelUnitID.HasValue ?
                new ObjectParameter("ModelUnitID", modelUnitID) :
                new ObjectParameter("ModelUnitID", typeof(long));
    
            var insertticksParameter = insertticks.HasValue ?
                new ObjectParameter("Insertticks", insertticks) :
                new ObjectParameter("Insertticks", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var orderLimitParameter = orderLimit.HasValue ?
                new ObjectParameter("OrderLimit", orderLimit) :
                new ObjectParameter("OrderLimit", typeof(decimal));
    
            var maxQuantityParameter = maxQuantity.HasValue ?
                new ObjectParameter("MaxQuantity", maxQuantity) :
                new ObjectParameter("MaxQuantity", typeof(decimal));
    
            var prefixParameter = prefix != null ?
                new ObjectParameter("Prefix", prefix) :
                new ObjectParameter("Prefix", typeof(string));
    
            var suffixParameter = suffix != null ?
                new ObjectParameter("Suffix", suffix) :
                new ObjectParameter("Suffix", typeof(string));
    
            var supplierCodeParameter = supplierCode != null ?
                new ObjectParameter("SupplierCode", supplierCode) :
                new ObjectParameter("SupplierCode", typeof(string));
    
            var useSupplierCodeForSalesParameter = useSupplierCodeForSales.HasValue ?
                new ObjectParameter("UseSupplierCodeForSales", useSupplierCodeForSales) :
                new ObjectParameter("UseSupplierCodeForSales", typeof(bool));
    
            var freeItemIDParameter = freeItemID != null ?
                new ObjectParameter("FreeItemID", freeItemID) :
                new ObjectParameter("FreeItemID", typeof(string));
    
            var freeItemCountParameter = freeItemCount.HasValue ?
                new ObjectParameter("FreeItemCount", freeItemCount) :
                new ObjectParameter("FreeItemCount", typeof(int));
    
            var companyID_SupParameter = companyID_Sup.HasValue ?
                new ObjectParameter("CompanyID_Sup", companyID_Sup) :
                new ObjectParameter("CompanyID_Sup", typeof(long));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var freeOfferIDParameter = freeOfferID.HasValue ?
                new ObjectParameter("FreeOfferID", freeOfferID) :
                new ObjectParameter("FreeOfferID", typeof(int));
    
            var iDCodeParameter = iDCode != null ?
                new ObjectParameter("IDCode", iDCode) :
                new ObjectParameter("IDCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ItemControl_Update", iDParameter, catIDParameter, catIDFKParameter, itemIDParameter, itemIDFkParameter, companyIDParameter, id_itemNameParameter, itemNameParameter, itemFullNameParameter, dateWorkParameter, dateStopParameter, isStillWorkParameter, isSingleParameter, isValidParameter, yearParameter, monthParameter, dayParameter, isWarntleyParameter, yearWParameter, monthWParameter, dayWParameter, limitOrderUnitParameter, countLimitOrderParameter, originParameter, exporterParameter, barCodeProductParameter, chkSecur1Parameter, chkSecur2Parameter, chkSecur3Parameter, chkSecur4Parameter, chkSecur5Parameter, chkSecur6Parameter, chkSecur7Parameter, maxDurabilityAmuntParameter, maxDurabilityUnitParameter, storeNoticParameter, inventoryProcessParameter, lUUParameter, lUDParameter, unitModelIDParameter, inventoryIDParameter, purchasePriceParameter, defultPriceParameter, costPriceParameter, userIDParameter, uniteMountNameParameter, modelUnitIDParameter, insertticksParameter, isActiveParameter, orderLimitParameter, maxQuantityParameter, prefixParameter, suffixParameter, supplierCodeParameter, useSupplierCodeForSalesParameter, freeItemIDParameter, freeItemCountParameter, companyID_SupParameter, pathParameter, freeOfferIDParameter, iDCodeParameter);
        }
    
        public virtual int ItemControl_UpdateCostPrice(Nullable<long> iD, Nullable<double> costPrice)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var costPriceParameter = costPrice.HasValue ?
                new ObjectParameter("CostPrice", costPrice) :
                new ObjectParameter("CostPrice", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ItemControl_UpdateCostPrice", iDParameter, costPriceParameter);
        }
    
        public virtual int ItemControl_UpdateIsItemRequiredInOrder(Nullable<bool> isItemRequiredInOrder)
        {
            var isItemRequiredInOrderParameter = isItemRequiredInOrder.HasValue ?
                new ObjectParameter("IsItemRequiredInOrder", isItemRequiredInOrder) :
                new ObjectParameter("IsItemRequiredInOrder", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ItemControl_UpdateIsItemRequiredInOrder", isItemRequiredInOrderParameter);
        }
    
        public virtual int ItemControl_UpdateIsItemRequiredInOrderByID(Nullable<long> iD, Nullable<bool> isItemRequiredInOrder)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var isItemRequiredInOrderParameter = isItemRequiredInOrder.HasValue ?
                new ObjectParameter("IsItemRequiredInOrder", isItemRequiredInOrder) :
                new ObjectParameter("IsItemRequiredInOrder", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ItemControl_UpdateIsItemRequiredInOrderByID", iDParameter, isItemRequiredInOrderParameter);
        }
    
        public virtual int ItemPriceLog_Delete(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ItemPriceLog_Delete", iDParameter);
        }
    
        public virtual int ItemPriceLog_DeletebyItemControl(Nullable<long> itemAmountID)
        {
            var itemAmountIDParameter = itemAmountID.HasValue ?
                new ObjectParameter("ItemAmountID", itemAmountID) :
                new ObjectParameter("ItemAmountID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ItemPriceLog_DeletebyItemControl", itemAmountIDParameter);
        }
    
        public virtual int ItemPriceLog_Insert(Nullable<long> itemAmountID, Nullable<double> purchasePrice, Nullable<double> defultPrice, Nullable<double> costPrice, Nullable<long> lUU, Nullable<System.DateTime> changeDate, ObjectParameter iD)
        {
            var itemAmountIDParameter = itemAmountID.HasValue ?
                new ObjectParameter("ItemAmountID", itemAmountID) :
                new ObjectParameter("ItemAmountID", typeof(long));
    
            var purchasePriceParameter = purchasePrice.HasValue ?
                new ObjectParameter("PurchasePrice", purchasePrice) :
                new ObjectParameter("PurchasePrice", typeof(double));
    
            var defultPriceParameter = defultPrice.HasValue ?
                new ObjectParameter("DefultPrice", defultPrice) :
                new ObjectParameter("DefultPrice", typeof(double));
    
            var costPriceParameter = costPrice.HasValue ?
                new ObjectParameter("CostPrice", costPrice) :
                new ObjectParameter("CostPrice", typeof(double));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            var changeDateParameter = changeDate.HasValue ?
                new ObjectParameter("ChangeDate", changeDate) :
                new ObjectParameter("ChangeDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ItemPriceLog_Insert", itemAmountIDParameter, purchasePriceParameter, defultPriceParameter, costPriceParameter, lUUParameter, changeDateParameter, iD);
        }
    
        public virtual ObjectResult<ItemPriceLog_SelectAll_Result> ItemPriceLog_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ItemPriceLog_SelectAll_Result>("ItemPriceLog_SelectAll");
        }
    
        public virtual ObjectResult<ItemPriceLog_SelectOne_Result> ItemPriceLog_SelectOne(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ItemPriceLog_SelectOne_Result>("ItemPriceLog_SelectOne", iDParameter);
        }
    
        public virtual int ItemPriceLog_Update(Nullable<long> iD, Nullable<long> itemAmountID, Nullable<double> purchasePrice, Nullable<double> defultPrice, Nullable<double> costPrice, Nullable<long> lUU, Nullable<System.DateTime> changeDate)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var itemAmountIDParameter = itemAmountID.HasValue ?
                new ObjectParameter("ItemAmountID", itemAmountID) :
                new ObjectParameter("ItemAmountID", typeof(long));
    
            var purchasePriceParameter = purchasePrice.HasValue ?
                new ObjectParameter("PurchasePrice", purchasePrice) :
                new ObjectParameter("PurchasePrice", typeof(double));
    
            var defultPriceParameter = defultPrice.HasValue ?
                new ObjectParameter("DefultPrice", defultPrice) :
                new ObjectParameter("DefultPrice", typeof(double));
    
            var costPriceParameter = costPrice.HasValue ?
                new ObjectParameter("CostPrice", costPrice) :
                new ObjectParameter("CostPrice", typeof(double));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            var changeDateParameter = changeDate.HasValue ?
                new ObjectParameter("ChangeDate", changeDate) :
                new ObjectParameter("ChangeDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ItemPriceLog_Update", iDParameter, itemAmountIDParameter, purchasePriceParameter, defultPriceParameter, costPriceParameter, lUUParameter, changeDateParameter);
        }
    
        public virtual int Items_Delete(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Items_Delete", iDParameter);
        }
    
        public virtual int Items_DeleteOneGroup(Nullable<long> catIDFk)
        {
            var catIDFkParameter = catIDFk.HasValue ?
                new ObjectParameter("CatIDFk", catIDFk) :
                new ObjectParameter("CatIDFk", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Items_DeleteOneGroup", catIDFkParameter);
        }
    
        public virtual int Items_Insert(Nullable<long> catID, Nullable<long> catIDFk, string itemName, Nullable<long> id_Item, ObjectParameter iD)
        {
            var catIDParameter = catID.HasValue ?
                new ObjectParameter("CatID", catID) :
                new ObjectParameter("CatID", typeof(long));
    
            var catIDFkParameter = catIDFk.HasValue ?
                new ObjectParameter("CatIDFk", catIDFk) :
                new ObjectParameter("CatIDFk", typeof(long));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var id_ItemParameter = id_Item.HasValue ?
                new ObjectParameter("id_Item", id_Item) :
                new ObjectParameter("id_Item", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Items_Insert", catIDParameter, catIDFkParameter, itemNameParameter, id_ItemParameter, iD);
        }
    
        public virtual ObjectResult<Items_SelectAll_Result> Items_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Items_SelectAll_Result>("Items_SelectAll");
        }
    
        public virtual ObjectResult<Items_SelectOne_Result> Items_SelectOne(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Items_SelectOne_Result>("Items_SelectOne", iDParameter);
        }
    
        public virtual ObjectResult<Items_SelectOneGroup_Result> Items_SelectOneGroup(Nullable<long> catIDFk)
        {
            var catIDFkParameter = catIDFk.HasValue ?
                new ObjectParameter("CatIDFk", catIDFk) :
                new ObjectParameter("CatIDFk", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Items_SelectOneGroup_Result>("Items_SelectOneGroup", catIDFkParameter);
        }
    
        public virtual int Items_Update(Nullable<long> iD, Nullable<long> catID, Nullable<long> catIDFk, string itemName, Nullable<long> id_Item)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var catIDParameter = catID.HasValue ?
                new ObjectParameter("CatID", catID) :
                new ObjectParameter("CatID", typeof(long));
    
            var catIDFkParameter = catIDFk.HasValue ?
                new ObjectParameter("CatIDFk", catIDFk) :
                new ObjectParameter("CatIDFk", typeof(long));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var id_ItemParameter = id_Item.HasValue ?
                new ObjectParameter("id_Item", id_Item) :
                new ObjectParameter("id_Item", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Items_Update", iDParameter, catIDParameter, catIDFkParameter, itemNameParameter, id_ItemParameter);
        }
    
        public virtual int Items_UpdateOneGroup(Nullable<long> catIDFk, Nullable<long> catIDFkOld)
        {
            var catIDFkParameter = catIDFk.HasValue ?
                new ObjectParameter("CatIDFk", catIDFk) :
                new ObjectParameter("CatIDFk", typeof(long));
    
            var catIDFkOldParameter = catIDFkOld.HasValue ?
                new ObjectParameter("CatIDFkOld", catIDFkOld) :
                new ObjectParameter("CatIDFkOld", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Items_UpdateOneGroup", catIDFkParameter, catIDFkOldParameter);
        }
    
        public virtual int ItemSource_Delete(Nullable<long> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ItemSource_Delete", idParameter);
        }
    
        public virtual int ItemSource_DeleteOneGroup(Nullable<long> idItemContro)
        {
            var idItemControParameter = idItemContro.HasValue ?
                new ObjectParameter("IdItemContro", idItemContro) :
                new ObjectParameter("IdItemContro", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ItemSource_DeleteOneGroup", idItemControParameter);
        }
    
        public virtual int ItemSource_Insert(Nullable<long> idItemContro, Nullable<long> idSupplier, Nullable<int> priority, string lUU, Nullable<System.DateTime> lUD, string itemCode)
        {
            var idItemControParameter = idItemContro.HasValue ?
                new ObjectParameter("IdItemContro", idItemContro) :
                new ObjectParameter("IdItemContro", typeof(long));
    
            var idSupplierParameter = idSupplier.HasValue ?
                new ObjectParameter("IdSupplier", idSupplier) :
                new ObjectParameter("IdSupplier", typeof(long));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("priority", priority) :
                new ObjectParameter("priority", typeof(int));
    
            var lUUParameter = lUU != null ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(string));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ItemSource_Insert", idItemControParameter, idSupplierParameter, priorityParameter, lUUParameter, lUDParameter, itemCodeParameter);
        }
    
        public virtual ObjectResult<ItemSource_SelectAll_Result> ItemSource_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ItemSource_SelectAll_Result>("ItemSource_SelectAll");
        }
    
        public virtual ObjectResult<ItemSource_SelectOne_Result> ItemSource_SelectOne(Nullable<long> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ItemSource_SelectOne_Result>("ItemSource_SelectOne", idParameter);
        }
    
        public virtual ObjectResult<ItemSource_SelectOneGroup_Result> ItemSource_SelectOneGroup(Nullable<long> idItemContro)
        {
            var idItemControParameter = idItemContro.HasValue ?
                new ObjectParameter("IdItemContro", idItemContro) :
                new ObjectParameter("IdItemContro", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ItemSource_SelectOneGroup_Result>("ItemSource_SelectOneGroup", idItemControParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> ItemSource_SelectOneItemCode(string itemCode, Nullable<long> iD)
        {
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("ItemSource_SelectOneItemCode", itemCodeParameter, iDParameter);
        }
    
        public virtual int ItemSource_Update(Nullable<long> id, Nullable<long> idItemContro, Nullable<long> idSupplier, Nullable<int> priority, string lUU, Nullable<System.DateTime> lUD, string itemCode)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(long));
    
            var idItemControParameter = idItemContro.HasValue ?
                new ObjectParameter("IdItemContro", idItemContro) :
                new ObjectParameter("IdItemContro", typeof(long));
    
            var idSupplierParameter = idSupplier.HasValue ?
                new ObjectParameter("IdSupplier", idSupplier) :
                new ObjectParameter("IdSupplier", typeof(long));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("priority", priority) :
                new ObjectParameter("priority", typeof(int));
    
            var lUUParameter = lUU != null ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(string));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ItemSource_Update", idParameter, idItemControParameter, idSupplierParameter, priorityParameter, lUUParameter, lUDParameter, itemCodeParameter);
        }
    
        public virtual ObjectResult<ItemStoreLog_SelectbyItemAndStore_Result> ItemStoreLog_SelectbyItemAndStore(Nullable<long> storeID, Nullable<long> itemControlID)
        {
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("StoreID", storeID) :
                new ObjectParameter("StoreID", typeof(long));
    
            var itemControlIDParameter = itemControlID.HasValue ?
                new ObjectParameter("ItemControlID", itemControlID) :
                new ObjectParameter("ItemControlID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ItemStoreLog_SelectbyItemAndStore_Result>("ItemStoreLog_SelectbyItemAndStore", storeIDParameter, itemControlIDParameter);
        }
    
        public virtual int ItemStoreLog_SelectbyItemAndStore_UpdatebyItemStore(Nullable<long> itemControlID, Nullable<long> storeID, Nullable<System.DateTime> lastGardDate, string itemLocation)
        {
            var itemControlIDParameter = itemControlID.HasValue ?
                new ObjectParameter("ItemControlID", itemControlID) :
                new ObjectParameter("ItemControlID", typeof(long));
    
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("StoreID", storeID) :
                new ObjectParameter("StoreID", typeof(long));
    
            var lastGardDateParameter = lastGardDate.HasValue ?
                new ObjectParameter("LastGardDate", lastGardDate) :
                new ObjectParameter("LastGardDate", typeof(System.DateTime));
    
            var itemLocationParameter = itemLocation != null ?
                new ObjectParameter("ItemLocation", itemLocation) :
                new ObjectParameter("ItemLocation", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ItemStoreLog_SelectbyItemAndStore_UpdatebyItemStore", itemControlIDParameter, storeIDParameter, lastGardDateParameter, itemLocationParameter);
        }
    
        public virtual ObjectResult<ItemStoreLog_SelectbyStore_Result> ItemStoreLog_SelectbyStore(Nullable<long> storeID)
        {
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("StoreID", storeID) :
                new ObjectParameter("StoreID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ItemStoreLog_SelectbyStore_Result>("ItemStoreLog_SelectbyStore", storeIDParameter);
        }
    
        public virtual ObjectResult<ItemStoreLog_SelectbyStoreAndBarcode_Result> ItemStoreLog_SelectbyStoreAndBarcode(Nullable<long> storeID, Nullable<long> barcode)
        {
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("StoreID", storeID) :
                new ObjectParameter("StoreID", typeof(long));
    
            var barcodeParameter = barcode.HasValue ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ItemStoreLog_SelectbyStoreAndBarcode_Result>("ItemStoreLog_SelectbyStoreAndBarcode", storeIDParameter, barcodeParameter);
        }
    
        public virtual ObjectResult<ItemStoreLog_SelectbyStoreAndCat_Result> ItemStoreLog_SelectbyStoreAndCat(Nullable<long> storeID, Nullable<long> catIDFK)
        {
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("StoreID", storeID) :
                new ObjectParameter("StoreID", typeof(long));
    
            var catIDFKParameter = catIDFK.HasValue ?
                new ObjectParameter("CatIDFK", catIDFK) :
                new ObjectParameter("CatIDFK", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ItemStoreLog_SelectbyStoreAndCat_Result>("ItemStoreLog_SelectbyStoreAndCat", storeIDParameter, catIDFKParameter);
        }
    
        public virtual ObjectResult<ItemStoreLog_SelectbyStoreAndCompanyID_Result> ItemStoreLog_SelectbyStoreAndCompanyID(Nullable<long> storeID, Nullable<long> companyID)
        {
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("StoreID", storeID) :
                new ObjectParameter("StoreID", typeof(long));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ItemStoreLog_SelectbyStoreAndCompanyID_Result>("ItemStoreLog_SelectbyStoreAndCompanyID", storeIDParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<ItemStoreLog_SelectbyStoreAndIdSupplier_Result> ItemStoreLog_SelectbyStoreAndIdSupplier(Nullable<long> storeID, Nullable<long> idSupplier)
        {
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("StoreID", storeID) :
                new ObjectParameter("StoreID", typeof(long));
    
            var idSupplierParameter = idSupplier.HasValue ?
                new ObjectParameter("IdSupplier", idSupplier) :
                new ObjectParameter("IdSupplier", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ItemStoreLog_SelectbyStoreAndIdSupplier_Result>("ItemStoreLog_SelectbyStoreAndIdSupplier", storeIDParameter, idSupplierParameter);
        }
    
        public virtual ObjectResult<ItemStoreLog_SelectbyStoreAndMainItem_Result> ItemStoreLog_SelectbyStoreAndMainItem(Nullable<long> storeID, Nullable<long> itemIDFk)
        {
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("StoreID", storeID) :
                new ObjectParameter("StoreID", typeof(long));
    
            var itemIDFkParameter = itemIDFk.HasValue ?
                new ObjectParameter("ItemIDFk", itemIDFk) :
                new ObjectParameter("ItemIDFk", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ItemStoreLog_SelectbyStoreAndMainItem_Result>("ItemStoreLog_SelectbyStoreAndMainItem", storeIDParameter, itemIDFkParameter);
        }
    
        public virtual ObjectResult<ItemStoreLog_SelectbyStoreItemNotSales_Result> ItemStoreLog_SelectbyStoreItemNotSales(Nullable<long> storeID, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("StoreID", storeID) :
                new ObjectParameter("StoreID", typeof(long));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ItemStoreLog_SelectbyStoreItemNotSales_Result>("ItemStoreLog_SelectbyStoreItemNotSales", storeIDParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual int Languages_Delete(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Languages_Delete", iDParameter);
        }
    
        public virtual int Languages_Insert(string name, Nullable<long> lUU, Nullable<System.DateTime> lUD, ObjectParameter iD)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Languages_Insert", nameParameter, lUUParameter, lUDParameter, iD);
        }
    
        public virtual ObjectResult<Languages_SelectAll_Result> Languages_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Languages_SelectAll_Result>("Languages_SelectAll");
        }
    
        public virtual ObjectResult<Languages_SelectOne_Result> Languages_SelectOne(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Languages_SelectOne_Result>("Languages_SelectOne", iDParameter);
        }
    
        public virtual int Languages_Update(Nullable<long> iD, string name, Nullable<long> lUU, Nullable<System.DateTime> lUD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Languages_Update", iDParameter, nameParameter, lUUParameter, lUDParameter);
        }
    
        public virtual int MAccountantTreeCreate()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MAccountantTreeCreate");
        }
    
        public virtual int MemberShips_Delete(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MemberShips_Delete", iDParameter);
        }
    
        public virtual int MemberShips_Insert(string name, Nullable<System.DateTime> lUD, Nullable<long> lUU, ObjectParameter iD)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MemberShips_Insert", nameParameter, lUDParameter, lUUParameter, iD);
        }
    
        public virtual ObjectResult<MemberShips_SelectAll_Result> MemberShips_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MemberShips_SelectAll_Result>("MemberShips_SelectAll");
        }
    
        public virtual ObjectResult<MemberShips_SelectOne_Result> MemberShips_SelectOne(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MemberShips_SelectOne_Result>("MemberShips_SelectOne", iDParameter);
        }
    
        public virtual int MemberShips_Update(Nullable<long> iD, string name, Nullable<System.DateTime> lUD, Nullable<long> lUU)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MemberShips_Update", iDParameter, nameParameter, lUDParameter, lUUParameter);
        }
    
        public virtual int ModelUnits_Delete(Nullable<long> modelUnitID)
        {
            var modelUnitIDParameter = modelUnitID.HasValue ?
                new ObjectParameter("ModelUnitID", modelUnitID) :
                new ObjectParameter("ModelUnitID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ModelUnits_Delete", modelUnitIDParameter);
        }
    
        public virtual int ModelUnits_DeleteOneGroup(Nullable<long> unitModelID)
        {
            var unitModelIDParameter = unitModelID.HasValue ?
                new ObjectParameter("UnitModelID", unitModelID) :
                new ObjectParameter("UnitModelID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ModelUnits_DeleteOneGroup", unitModelIDParameter);
        }
    
        public virtual int ModelUnits_Insert(Nullable<long> unitModelID, string unitName, Nullable<double> amount, Nullable<bool> isDefault, Nullable<System.DateTime> lUD, Nullable<long> lUU, ObjectParameter modelUnitID)
        {
            var unitModelIDParameter = unitModelID.HasValue ?
                new ObjectParameter("UnitModelID", unitModelID) :
                new ObjectParameter("UnitModelID", typeof(long));
    
            var unitNameParameter = unitName != null ?
                new ObjectParameter("UnitName", unitName) :
                new ObjectParameter("UnitName", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(double));
    
            var isDefaultParameter = isDefault.HasValue ?
                new ObjectParameter("isDefault", isDefault) :
                new ObjectParameter("isDefault", typeof(bool));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ModelUnits_Insert", unitModelIDParameter, unitNameParameter, amountParameter, isDefaultParameter, lUDParameter, lUUParameter, modelUnitID);
        }
    
        public virtual ObjectResult<ModelUnits_SelectAll_Result> ModelUnits_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ModelUnits_SelectAll_Result>("ModelUnits_SelectAll");
        }
    
        public virtual ObjectResult<ModelUnits_SelectOne_Result> ModelUnits_SelectOne(Nullable<long> modelUnitID)
        {
            var modelUnitIDParameter = modelUnitID.HasValue ?
                new ObjectParameter("ModelUnitID", modelUnitID) :
                new ObjectParameter("ModelUnitID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ModelUnits_SelectOne_Result>("ModelUnits_SelectOne", modelUnitIDParameter);
        }
    
        public virtual ObjectResult<ModelUnits_SelectOneGroup_Result> ModelUnits_SelectOneGroup(Nullable<long> unitModelID)
        {
            var unitModelIDParameter = unitModelID.HasValue ?
                new ObjectParameter("UnitModelID", unitModelID) :
                new ObjectParameter("UnitModelID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ModelUnits_SelectOneGroup_Result>("ModelUnits_SelectOneGroup", unitModelIDParameter);
        }
    
        public virtual int ModelUnits_Update(Nullable<long> modelUnitID, Nullable<long> unitModelID, string unitName, Nullable<double> amount, Nullable<bool> isDefault, Nullable<System.DateTime> lUD, Nullable<long> lUU)
        {
            var modelUnitIDParameter = modelUnitID.HasValue ?
                new ObjectParameter("ModelUnitID", modelUnitID) :
                new ObjectParameter("ModelUnitID", typeof(long));
    
            var unitModelIDParameter = unitModelID.HasValue ?
                new ObjectParameter("UnitModelID", unitModelID) :
                new ObjectParameter("UnitModelID", typeof(long));
    
            var unitNameParameter = unitName != null ?
                new ObjectParameter("UnitName", unitName) :
                new ObjectParameter("UnitName", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(double));
    
            var isDefaultParameter = isDefault.HasValue ?
                new ObjectParameter("isDefault", isDefault) :
                new ObjectParameter("isDefault", typeof(bool));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ModelUnits_Update", modelUnitIDParameter, unitModelIDParameter, unitNameParameter, amountParameter, isDefaultParameter, lUDParameter, lUUParameter);
        }
    
        public virtual int ModelUnits_UpdateOneGroup(Nullable<long> unitModelID, Nullable<long> unitModelIDOld)
        {
            var unitModelIDParameter = unitModelID.HasValue ?
                new ObjectParameter("UnitModelID", unitModelID) :
                new ObjectParameter("UnitModelID", typeof(long));
    
            var unitModelIDOldParameter = unitModelIDOld.HasValue ?
                new ObjectParameter("UnitModelIDOld", unitModelIDOld) :
                new ObjectParameter("UnitModelIDOld", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ModelUnits_UpdateOneGroup", unitModelIDParameter, unitModelIDOldParameter);
        }
    
        public virtual int Nationality_Delete(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Nationality_Delete", iDParameter);
        }
    
        public virtual int Nationality_Insert(string nationality, Nullable<System.DateTime> lUD, Nullable<long> lUU, ObjectParameter iD)
        {
            var nationalityParameter = nationality != null ?
                new ObjectParameter("Nationality", nationality) :
                new ObjectParameter("Nationality", typeof(string));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Nationality_Insert", nationalityParameter, lUDParameter, lUUParameter, iD);
        }
    
        public virtual ObjectResult<Nationality_SelectAll_Result> Nationality_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nationality_SelectAll_Result>("Nationality_SelectAll");
        }
    
        public virtual ObjectResult<Nationality_SelectOne_Result> Nationality_SelectOne(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nationality_SelectOne_Result>("Nationality_SelectOne", iDParameter);
        }
    
        public virtual int Nationality_Update(Nullable<long> iD, string nationality, Nullable<System.DateTime> lUD, Nullable<long> lUU)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var nationalityParameter = nationality != null ?
                new ObjectParameter("Nationality", nationality) :
                new ObjectParameter("Nationality", typeof(string));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Nationality_Update", iDParameter, nationalityParameter, lUDParameter, lUUParameter);
        }
    
        public virtual int OP_CodeMask_Delete(string page)
        {
            var pageParameter = page != null ?
                new ObjectParameter("Page", page) :
                new ObjectParameter("Page", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OP_CodeMask_Delete", pageParameter);
        }
    
        public virtual int OP_CodeMask_Insert(string page, Nullable<bool> useAutomaticNumber, Nullable<bool> canManual, Nullable<int> startNumber, Nullable<int> numberLength, string letters, Nullable<bool> isFixedLength, Nullable<bool> useLetters, string maskString, Nullable<bool> maskIsNumber, Nullable<bool> useBranchId, Nullable<bool> useYearId, string pV_TableName, string pV_FieldName, Nullable<int> pV_FieldValue, string pV_KeyField)
        {
            var pageParameter = page != null ?
                new ObjectParameter("Page", page) :
                new ObjectParameter("Page", typeof(string));
    
            var useAutomaticNumberParameter = useAutomaticNumber.HasValue ?
                new ObjectParameter("UseAutomaticNumber", useAutomaticNumber) :
                new ObjectParameter("UseAutomaticNumber", typeof(bool));
    
            var canManualParameter = canManual.HasValue ?
                new ObjectParameter("CanManual", canManual) :
                new ObjectParameter("CanManual", typeof(bool));
    
            var startNumberParameter = startNumber.HasValue ?
                new ObjectParameter("StartNumber", startNumber) :
                new ObjectParameter("StartNumber", typeof(int));
    
            var numberLengthParameter = numberLength.HasValue ?
                new ObjectParameter("NumberLength", numberLength) :
                new ObjectParameter("NumberLength", typeof(int));
    
            var lettersParameter = letters != null ?
                new ObjectParameter("Letters", letters) :
                new ObjectParameter("Letters", typeof(string));
    
            var isFixedLengthParameter = isFixedLength.HasValue ?
                new ObjectParameter("IsFixedLength", isFixedLength) :
                new ObjectParameter("IsFixedLength", typeof(bool));
    
            var useLettersParameter = useLetters.HasValue ?
                new ObjectParameter("UseLetters", useLetters) :
                new ObjectParameter("UseLetters", typeof(bool));
    
            var maskStringParameter = maskString != null ?
                new ObjectParameter("MaskString", maskString) :
                new ObjectParameter("MaskString", typeof(string));
    
            var maskIsNumberParameter = maskIsNumber.HasValue ?
                new ObjectParameter("MaskIsNumber", maskIsNumber) :
                new ObjectParameter("MaskIsNumber", typeof(bool));
    
            var useBranchIdParameter = useBranchId.HasValue ?
                new ObjectParameter("UseBranchId", useBranchId) :
                new ObjectParameter("UseBranchId", typeof(bool));
    
            var useYearIdParameter = useYearId.HasValue ?
                new ObjectParameter("UseYearId", useYearId) :
                new ObjectParameter("UseYearId", typeof(bool));
    
            var pV_TableNameParameter = pV_TableName != null ?
                new ObjectParameter("PV_TableName", pV_TableName) :
                new ObjectParameter("PV_TableName", typeof(string));
    
            var pV_FieldNameParameter = pV_FieldName != null ?
                new ObjectParameter("PV_FieldName", pV_FieldName) :
                new ObjectParameter("PV_FieldName", typeof(string));
    
            var pV_FieldValueParameter = pV_FieldValue.HasValue ?
                new ObjectParameter("PV_FieldValue", pV_FieldValue) :
                new ObjectParameter("PV_FieldValue", typeof(int));
    
            var pV_KeyFieldParameter = pV_KeyField != null ?
                new ObjectParameter("PV_KeyField", pV_KeyField) :
                new ObjectParameter("PV_KeyField", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OP_CodeMask_Insert", pageParameter, useAutomaticNumberParameter, canManualParameter, startNumberParameter, numberLengthParameter, lettersParameter, isFixedLengthParameter, useLettersParameter, maskStringParameter, maskIsNumberParameter, useBranchIdParameter, useYearIdParameter, pV_TableNameParameter, pV_FieldNameParameter, pV_FieldValueParameter, pV_KeyFieldParameter);
        }
    
        public virtual ObjectResult<OP_CodeMask_SelectAll_Result> OP_CodeMask_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OP_CodeMask_SelectAll_Result>("OP_CodeMask_SelectAll");
        }
    
        public virtual ObjectResult<OP_CodeMask_SelectOne_Result> OP_CodeMask_SelectOne(string page)
        {
            var pageParameter = page != null ?
                new ObjectParameter("Page", page) :
                new ObjectParameter("Page", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OP_CodeMask_SelectOne_Result>("OP_CodeMask_SelectOne", pageParameter);
        }
    
        public virtual int OP_CodeMask_Update(string page, Nullable<bool> useAutomaticNumber, Nullable<bool> canManual, Nullable<int> startNumber, Nullable<int> numberLength, string letters, Nullable<bool> isFixedLength, Nullable<bool> useLetters, string maskString, Nullable<bool> maskIsNumber, Nullable<bool> useBranchId, Nullable<bool> useYearId, string pV_TableName, string pV_FieldName, Nullable<int> pV_FieldValue, string pV_KeyField)
        {
            var pageParameter = page != null ?
                new ObjectParameter("Page", page) :
                new ObjectParameter("Page", typeof(string));
    
            var useAutomaticNumberParameter = useAutomaticNumber.HasValue ?
                new ObjectParameter("UseAutomaticNumber", useAutomaticNumber) :
                new ObjectParameter("UseAutomaticNumber", typeof(bool));
    
            var canManualParameter = canManual.HasValue ?
                new ObjectParameter("CanManual", canManual) :
                new ObjectParameter("CanManual", typeof(bool));
    
            var startNumberParameter = startNumber.HasValue ?
                new ObjectParameter("StartNumber", startNumber) :
                new ObjectParameter("StartNumber", typeof(int));
    
            var numberLengthParameter = numberLength.HasValue ?
                new ObjectParameter("NumberLength", numberLength) :
                new ObjectParameter("NumberLength", typeof(int));
    
            var lettersParameter = letters != null ?
                new ObjectParameter("Letters", letters) :
                new ObjectParameter("Letters", typeof(string));
    
            var isFixedLengthParameter = isFixedLength.HasValue ?
                new ObjectParameter("IsFixedLength", isFixedLength) :
                new ObjectParameter("IsFixedLength", typeof(bool));
    
            var useLettersParameter = useLetters.HasValue ?
                new ObjectParameter("UseLetters", useLetters) :
                new ObjectParameter("UseLetters", typeof(bool));
    
            var maskStringParameter = maskString != null ?
                new ObjectParameter("MaskString", maskString) :
                new ObjectParameter("MaskString", typeof(string));
    
            var maskIsNumberParameter = maskIsNumber.HasValue ?
                new ObjectParameter("MaskIsNumber", maskIsNumber) :
                new ObjectParameter("MaskIsNumber", typeof(bool));
    
            var useBranchIdParameter = useBranchId.HasValue ?
                new ObjectParameter("UseBranchId", useBranchId) :
                new ObjectParameter("UseBranchId", typeof(bool));
    
            var useYearIdParameter = useYearId.HasValue ?
                new ObjectParameter("UseYearId", useYearId) :
                new ObjectParameter("UseYearId", typeof(bool));
    
            var pV_TableNameParameter = pV_TableName != null ?
                new ObjectParameter("PV_TableName", pV_TableName) :
                new ObjectParameter("PV_TableName", typeof(string));
    
            var pV_FieldNameParameter = pV_FieldName != null ?
                new ObjectParameter("PV_FieldName", pV_FieldName) :
                new ObjectParameter("PV_FieldName", typeof(string));
    
            var pV_FieldValueParameter = pV_FieldValue.HasValue ?
                new ObjectParameter("PV_FieldValue", pV_FieldValue) :
                new ObjectParameter("PV_FieldValue", typeof(int));
    
            var pV_KeyFieldParameter = pV_KeyField != null ?
                new ObjectParameter("PV_KeyField", pV_KeyField) :
                new ObjectParameter("PV_KeyField", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OP_CodeMask_Update", pageParameter, useAutomaticNumberParameter, canManualParameter, startNumberParameter, numberLengthParameter, lettersParameter, isFixedLengthParameter, useLettersParameter, maskStringParameter, maskIsNumberParameter, useBranchIdParameter, useYearIdParameter, pV_TableNameParameter, pV_FieldNameParameter, pV_FieldValueParameter, pV_KeyFieldParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> P_insertNationality(string n_name)
        {
            var n_nameParameter = n_name != null ?
                new ObjectParameter("N_name", n_name) :
                new ObjectParameter("N_name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("P_insertNationality", n_nameParameter);
        }
    
        public virtual int PayedMonthes(Nullable<long> deptID)
        {
            var deptIDParameter = deptID.HasValue ?
                new ObjectParameter("DeptID", deptID) :
                new ObjectParameter("DeptID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PayedMonthes", deptIDParameter);
        }
    
        public virtual ObjectResult<proc_NewRecord_Result> proc_NewRecord(Nullable<long> lUU)
        {
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_NewRecord_Result>("proc_NewRecord", lUUParameter);
        }
    
        public virtual ObjectResult<proc_NewRecordHDTransferMaterials_Result> proc_NewRecordHDTransferMaterials(Nullable<long> lUU)
        {
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_NewRecordHDTransferMaterials_Result>("proc_NewRecordHDTransferMaterials", lUUParameter);
        }
    
        public virtual int ReverceString(string strring, string seprator)
        {
            var strringParameter = strring != null ?
                new ObjectParameter("Strring", strring) :
                new ObjectParameter("Strring", typeof(string));
    
            var sepratorParameter = seprator != null ?
                new ObjectParameter("Seprator", seprator) :
                new ObjectParameter("Seprator", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ReverceString", strringParameter, sepratorParameter);
        }
    
        public virtual int ShiftTypes_Delete(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ShiftTypes_Delete", iDParameter);
        }
    
        public virtual int ShiftTypes_DeleteAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ShiftTypes_DeleteAll");
        }
    
        public virtual int ShiftTypes_Insert(string jobType, Nullable<System.DateTime> startTime, Nullable<System.DateTime> endTime, Nullable<System.DateTime> date, Nullable<System.DateTime> lUD, Nullable<long> lUU, ObjectParameter iD)
        {
            var jobTypeParameter = jobType != null ?
                new ObjectParameter("JobType", jobType) :
                new ObjectParameter("JobType", typeof(string));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.DateTime));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ShiftTypes_Insert", jobTypeParameter, startTimeParameter, endTimeParameter, dateParameter, lUDParameter, lUUParameter, iD);
        }
    
        public virtual ObjectResult<ShiftTypes_SelectAll_Result> ShiftTypes_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShiftTypes_SelectAll_Result>("ShiftTypes_SelectAll");
        }
    
        public virtual ObjectResult<ShiftTypes_SelectOne_Result> ShiftTypes_SelectOne(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShiftTypes_SelectOne_Result>("ShiftTypes_SelectOne", iDParameter);
        }
    
        public virtual int ShiftTypes_Update(Nullable<long> iD, string jobType, Nullable<System.DateTime> startTime, Nullable<System.DateTime> endTime, Nullable<System.DateTime> date, Nullable<System.DateTime> lUD, Nullable<long> lUU)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var jobTypeParameter = jobType != null ?
                new ObjectParameter("JobType", jobType) :
                new ObjectParameter("JobType", typeof(string));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.DateTime));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ShiftTypes_Update", iDParameter, jobTypeParameter, startTimeParameter, endTimeParameter, dateParameter, lUDParameter, lUUParameter);
        }
    
        public virtual int Skills_Delete(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Skills_Delete", iDParameter);
        }
    
        public virtual int Skills_Insert(string name, Nullable<System.DateTime> lUD, Nullable<long> lUU, ObjectParameter iD)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Skills_Insert", nameParameter, lUDParameter, lUUParameter, iD);
        }
    
        public virtual ObjectResult<Skills_SelectAll_Result> Skills_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Skills_SelectAll_Result>("Skills_SelectAll");
        }
    
        public virtual ObjectResult<Skills_SelectOne_Result> Skills_SelectOne(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Skills_SelectOne_Result>("Skills_SelectOne", iDParameter);
        }
    
        public virtual int Skills_Update(Nullable<long> iD, string name, Nullable<System.DateTime> lUD, Nullable<long> lUU)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Skills_Update", iDParameter, nameParameter, lUDParameter, lUUParameter);
        }
    
        public virtual ObjectResult<SP_Absence_Emp_Result> SP_Absence_Emp(Nullable<short> type, string from, string to)
        {
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(short));
    
            var fromParameter = from != null ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(string));
    
            var toParameter = to != null ?
                new ObjectParameter("to", to) :
                new ObjectParameter("to", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Absence_Emp_Result>("SP_Absence_Emp", typeParameter, fromParameter, toParameter);
        }
    
        public virtual ObjectResult<SP_Absence_Emp_filterByDept_Result> SP_Absence_Emp_filterByDept(Nullable<short> type, string from, string to, string dept)
        {
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(short));
    
            var fromParameter = from != null ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(string));
    
            var toParameter = to != null ?
                new ObjectParameter("to", to) :
                new ObjectParameter("to", typeof(string));
    
            var deptParameter = dept != null ?
                new ObjectParameter("dept", dept) :
                new ObjectParameter("dept", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Absence_Emp_filterByDept_Result>("SP_Absence_Emp_filterByDept", typeParameter, fromParameter, toParameter, deptParameter);
        }
    
        public virtual ObjectResult<sp_AllEmployees_Result> sp_AllEmployees()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AllEmployees_Result>("sp_AllEmployees");
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_Attendance_CheckIn(Nullable<long> empID, Nullable<System.DateTime> checkInDate, Nullable<System.DateTime> checkInTime, string checkInMode, Nullable<short> checkInType)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(long));
    
            var checkInDateParameter = checkInDate.HasValue ?
                new ObjectParameter("CheckInDate", checkInDate) :
                new ObjectParameter("CheckInDate", typeof(System.DateTime));
    
            var checkInTimeParameter = checkInTime.HasValue ?
                new ObjectParameter("CheckInTime", checkInTime) :
                new ObjectParameter("CheckInTime", typeof(System.DateTime));
    
            var checkInModeParameter = checkInMode != null ?
                new ObjectParameter("CheckInMode", checkInMode) :
                new ObjectParameter("CheckInMode", typeof(string));
    
            var checkInTypeParameter = checkInType.HasValue ?
                new ObjectParameter("CheckInType", checkInType) :
                new ObjectParameter("CheckInType", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Attendance_CheckIn", empIDParameter, checkInDateParameter, checkInTimeParameter, checkInModeParameter, checkInTypeParameter);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> sp_CheckAlreadyCheckedIn(Nullable<long> empID, string date)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(long));
    
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("sp_CheckAlreadyCheckedIn", empIDParameter, dateParameter);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> sp_CheckAlreadyCheckedOut(Nullable<long> empID, string date)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(long));
    
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("sp_CheckAlreadyCheckedOut", empIDParameter, dateParameter);
        }
    
        public virtual int sp_CheckIn(Nullable<long> empID, Nullable<System.DateTime> checkInDate, Nullable<System.DateTime> checkInTime, Nullable<short> checkInMode, string checkInType)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(long));
    
            var checkInDateParameter = checkInDate.HasValue ?
                new ObjectParameter("CheckInDate", checkInDate) :
                new ObjectParameter("CheckInDate", typeof(System.DateTime));
    
            var checkInTimeParameter = checkInTime.HasValue ?
                new ObjectParameter("CheckInTime", checkInTime) :
                new ObjectParameter("CheckInTime", typeof(System.DateTime));
    
            var checkInModeParameter = checkInMode.HasValue ?
                new ObjectParameter("CheckInMode", checkInMode) :
                new ObjectParameter("CheckInMode", typeof(short));
    
            var checkInTypeParameter = checkInType != null ?
                new ObjectParameter("CheckInType", checkInType) :
                new ObjectParameter("CheckInType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CheckIn", empIDParameter, checkInDateParameter, checkInTimeParameter, checkInModeParameter, checkInTypeParameter);
        }
    
        public virtual ObjectResult<sp_CheckInByBarCode_Result> sp_CheckInByBarCode(string barCode)
        {
            var barCodeParameter = barCode != null ?
                new ObjectParameter("BarCode", barCode) :
                new ObjectParameter("BarCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CheckInByBarCode_Result>("sp_CheckInByBarCode", barCodeParameter);
        }
    
        public virtual int sp_CheckOut(Nullable<long> empID, Nullable<System.DateTime> checkInDate, Nullable<System.DateTime> checkOutTime, Nullable<short> checkOutMode, string checkOutType)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(long));
    
            var checkInDateParameter = checkInDate.HasValue ?
                new ObjectParameter("CheckInDate", checkInDate) :
                new ObjectParameter("CheckInDate", typeof(System.DateTime));
    
            var checkOutTimeParameter = checkOutTime.HasValue ?
                new ObjectParameter("CheckOutTime", checkOutTime) :
                new ObjectParameter("CheckOutTime", typeof(System.DateTime));
    
            var checkOutModeParameter = checkOutMode.HasValue ?
                new ObjectParameter("CheckOutMode", checkOutMode) :
                new ObjectParameter("CheckOutMode", typeof(short));
    
            var checkOutTypeParameter = checkOutType != null ?
                new ObjectParameter("CheckOutType", checkOutType) :
                new ObjectParameter("CheckOutType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CheckOut", empIDParameter, checkInDateParameter, checkOutTimeParameter, checkOutModeParameter, checkOutTypeParameter);
        }
    
        public virtual ObjectResult<SP_checktype_Result> SP_checktype()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_checktype_Result>("SP_checktype");
        }
    
        public virtual ObjectResult<sp_companyInfo_Result> sp_companyInfo(Nullable<long> formId)
        {
            var formIdParameter = formId.HasValue ?
                new ObjectParameter("formId", formId) :
                new ObjectParameter("formId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_companyInfo_Result>("sp_companyInfo", formIdParameter);
        }
    
        public virtual ObjectResult<sp_contractItems_Result> sp_contractItems(Nullable<long> hRDepartmentID)
        {
            var hRDepartmentIDParameter = hRDepartmentID.HasValue ?
                new ObjectParameter("HRDepartmentID", hRDepartmentID) :
                new ObjectParameter("HRDepartmentID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_contractItems_Result>("sp_contractItems", hRDepartmentIDParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual ObjectResult<Sp_departDFata_Result> Sp_departDFata(Nullable<long> departID)
        {
            var departIDParameter = departID.HasValue ?
                new ObjectParameter("departID", departID) :
                new ObjectParameter("departID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_departDFata_Result>("Sp_departDFata", departIDParameter);
        }
    
        public virtual ObjectResult<Sp_departDFataEMP_Result> Sp_departDFataEMP(Nullable<long> emplId)
        {
            var emplIdParameter = emplId.HasValue ?
                new ObjectParameter("EmplId", emplId) :
                new ObjectParameter("EmplId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_departDFataEMP_Result>("Sp_departDFataEMP", emplIdParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_Emp_Result> sp_Emp()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Emp_Result>("sp_Emp");
        }
    
        public virtual ObjectResult<Sp_EmpInfo_Result> Sp_EmpInfo(Nullable<long> emp_id)
        {
            var emp_idParameter = emp_id.HasValue ?
                new ObjectParameter("emp_id", emp_id) :
                new ObjectParameter("emp_id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_EmpInfo_Result>("Sp_EmpInfo", emp_idParameter);
        }
    
        public virtual ObjectResult<Sp_EmpLanguage_Result> Sp_EmpLanguage(Nullable<long> emp_id)
        {
            var emp_idParameter = emp_id.HasValue ?
                new ObjectParameter("emp_id", emp_id) :
                new ObjectParameter("emp_id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_EmpLanguage_Result>("Sp_EmpLanguage", emp_idParameter);
        }
    
        public virtual ObjectResult<Sp_get_department_Result> Sp_get_department(Nullable<long> emp_id)
        {
            var emp_idParameter = emp_id.HasValue ?
                new ObjectParameter("emp_id", emp_id) :
                new ObjectParameter("emp_id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_get_department_Result>("Sp_get_department", emp_idParameter);
        }
    
        public virtual ObjectResult<sp_get_emp_in_dept_Result> sp_get_emp_in_dept(Nullable<long> dept_id)
        {
            var dept_idParameter = dept_id.HasValue ?
                new ObjectParameter("dept_id", dept_id) :
                new ObjectParameter("dept_id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_get_emp_in_dept_Result>("sp_get_emp_in_dept", dept_idParameter);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> sp_GetCheckOutByEmpID(Nullable<long> empID, string checkInDate)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(long));
    
            var checkInDateParameter = checkInDate != null ?
                new ObjectParameter("CheckInDate", checkInDate) :
                new ObjectParameter("CheckInDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("sp_GetCheckOutByEmpID", empIDParameter, checkInDateParameter);
        }
    
        public virtual ObjectResult<Sp_getdeptemp_Result> Sp_getdeptemp(Nullable<long> hRDepartmentID)
        {
            var hRDepartmentIDParameter = hRDepartmentID.HasValue ?
                new ObjectParameter("HRDepartmentID", hRDepartmentID) :
                new ObjectParameter("HRDepartmentID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_getdeptemp_Result>("Sp_getdeptemp", hRDepartmentIDParameter);
        }
    
        public virtual ObjectResult<Sp_GetEmpSalary_Result> Sp_GetEmpSalary(Nullable<long> emp_id)
        {
            var emp_idParameter = emp_id.HasValue ?
                new ObjectParameter("emp_id", emp_id) :
                new ObjectParameter("emp_id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_GetEmpSalary_Result>("Sp_GetEmpSalary", emp_idParameter);
        }
    
        public virtual ObjectResult<sp_GetMosiratElrwateb_Result> sp_GetMosiratElrwateb(Nullable<int> monthNUM, Nullable<long> lUU, Nullable<System.DateTime> lUD)
        {
            var monthNUMParameter = monthNUM.HasValue ?
                new ObjectParameter("MonthNUM", monthNUM) :
                new ObjectParameter("MonthNUM", typeof(int));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetMosiratElrwateb_Result>("sp_GetMosiratElrwateb", monthNUMParameter, lUUParameter, lUDParameter);
        }
    
        public virtual ObjectResult<sp_GetMosiratElrwatebNEW_Result> sp_GetMosiratElrwatebNEW(Nullable<int> monthNUM, Nullable<int> year, Nullable<long> lUU, Nullable<System.DateTime> lUD)
        {
            var monthNUMParameter = monthNUM.HasValue ?
                new ObjectParameter("MonthNUM", monthNUM) :
                new ObjectParameter("MonthNUM", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetMosiratElrwatebNEW_Result>("sp_GetMosiratElrwatebNEW", monthNUMParameter, yearParameter, lUUParameter, lUDParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_insert_prouct_image(Nullable<long> product_id, byte[] image)
        {
            var product_idParameter = product_id.HasValue ?
                new ObjectParameter("product_id", product_id) :
                new ObjectParameter("product_id", typeof(long));
    
            var imageParameter = image != null ?
                new ObjectParameter("image", image) :
                new ObjectParameter("image", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_insert_prouct_image", product_idParameter, imageParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> Sp_insertInto_HDStoreReturns(Nullable<System.DateTime> dateHDStoreReturns, Nullable<long> hDReceiptOfMaterialsRequestID, Nullable<long> storeEmpID, Nullable<long> recieveEmpID, Nullable<long> storeID, string notes, Nullable<long> lUU, Nullable<System.DateTime> lUD)
        {
            var dateHDStoreReturnsParameter = dateHDStoreReturns.HasValue ?
                new ObjectParameter("DateHDStoreReturns", dateHDStoreReturns) :
                new ObjectParameter("DateHDStoreReturns", typeof(System.DateTime));
    
            var hDReceiptOfMaterialsRequestIDParameter = hDReceiptOfMaterialsRequestID.HasValue ?
                new ObjectParameter("HDReceiptOfMaterialsRequestID", hDReceiptOfMaterialsRequestID) :
                new ObjectParameter("HDReceiptOfMaterialsRequestID", typeof(long));
    
            var storeEmpIDParameter = storeEmpID.HasValue ?
                new ObjectParameter("StoreEmpID", storeEmpID) :
                new ObjectParameter("StoreEmpID", typeof(long));
    
            var recieveEmpIDParameter = recieveEmpID.HasValue ?
                new ObjectParameter("RecieveEmpID", recieveEmpID) :
                new ObjectParameter("RecieveEmpID", typeof(long));
    
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("StoreID", storeID) :
                new ObjectParameter("StoreID", typeof(long));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("Sp_insertInto_HDStoreReturns", dateHDStoreReturnsParameter, hDReceiptOfMaterialsRequestIDParameter, storeEmpIDParameter, recieveEmpIDParameter, storeIDParameter, notesParameter, lUUParameter, lUDParameter);
        }
    
        public virtual int Sp_ItemMotion(Nullable<long> store, Nullable<long> item, string fromDate, string toDate)
        {
            var storeParameter = store.HasValue ?
                new ObjectParameter("Store", store) :
                new ObjectParameter("Store", typeof(long));
    
            var itemParameter = item.HasValue ?
                new ObjectParameter("Item", item) :
                new ObjectParameter("Item", typeof(long));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_ItemMotion", storeParameter, itemParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<sp_Materialsreques_Result> sp_Materialsreques(Nullable<long> hDRequest)
        {
            var hDRequestParameter = hDRequest.HasValue ?
                new ObjectParameter("HDRequest", hDRequest) :
                new ObjectParameter("HDRequest", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Materialsreques_Result>("sp_Materialsreques", hDRequestParameter);
        }
    
        public virtual ObjectResult<SP_ProcessingReturnsTechnicians_Result> SP_ProcessingReturnsTechnicians(Nullable<long> processing_Id)
        {
            var processing_IdParameter = processing_Id.HasValue ?
                new ObjectParameter("Processing_Id", processing_Id) :
                new ObjectParameter("Processing_Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ProcessingReturnsTechnicians_Result>("SP_ProcessingReturnsTechnicians", processing_IdParameter);
        }
    
        public virtual int sp_PurchaseBill(Nullable<long> bill_id)
        {
            var bill_idParameter = bill_id.HasValue ?
                new ObjectParameter("bill_id", bill_id) :
                new ObjectParameter("bill_id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PurchaseBill", bill_idParameter);
        }
    
        public virtual ObjectResult<Sp_PurchaseCheck_Result> Sp_PurchaseCheck(Nullable<long> purchase_checkId)
        {
            var purchase_checkIdParameter = purchase_checkId.HasValue ?
                new ObjectParameter("Purchase_checkId", purchase_checkId) :
                new ObjectParameter("Purchase_checkId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_PurchaseCheck_Result>("Sp_PurchaseCheck", purchase_checkIdParameter);
        }
    
        public virtual int Sp_PurchaseOrder(Nullable<long> purchaseOrderId)
        {
            var purchaseOrderIdParameter = purchaseOrderId.HasValue ?
                new ObjectParameter("PurchaseOrderId", purchaseOrderId) :
                new ObjectParameter("PurchaseOrderId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_PurchaseOrder", purchaseOrderIdParameter);
        }
    
        public virtual int Sp_PurchaseReturn(Nullable<long> return_id)
        {
            var return_idParameter = return_id.HasValue ?
                new ObjectParameter("return_id", return_id) :
                new ObjectParameter("return_id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_PurchaseReturn", return_idParameter);
        }
    
        public virtual ObjectResult<sp_ReceiptOfMaterialsRequest_Result> sp_ReceiptOfMaterialsRequest(Nullable<long> receiptid)
        {
            var receiptidParameter = receiptid.HasValue ?
                new ObjectParameter("Receiptid", receiptid) :
                new ObjectParameter("Receiptid", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ReceiptOfMaterialsRequest_Result>("sp_ReceiptOfMaterialsRequest", receiptidParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> Sp_RowNum(Nullable<int> max_Num)
        {
            var max_NumParameter = max_Num.HasValue ?
                new ObjectParameter("Max_Num", max_Num) :
                new ObjectParameter("Max_Num", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("Sp_RowNum", max_NumParameter);
        }
    
        public virtual ObjectResult<sp_SelectJobTypeByEmpID_Result> sp_SelectJobTypeByEmpID(Nullable<long> empID)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SelectJobTypeByEmpID_Result>("sp_SelectJobTypeByEmpID", empIDParameter);
        }
    
        public virtual ObjectResult<SP_StoreReturns_Result> SP_StoreReturns(Nullable<long> return_Id)
        {
            var return_IdParameter = return_Id.HasValue ?
                new ObjectParameter("Return_Id", return_Id) :
                new ObjectParameter("Return_Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_StoreReturns_Result>("SP_StoreReturns", return_IdParameter);
        }
    
        public virtual ObjectResult<sp_TotalReceiptOfMaterialsRequest_Result> sp_TotalReceiptOfMaterialsRequest(Nullable<long> store, string from_date, string to_date)
        {
            var storeParameter = store.HasValue ?
                new ObjectParameter("store", store) :
                new ObjectParameter("store", typeof(long));
    
            var from_dateParameter = from_date != null ?
                new ObjectParameter("from_date", from_date) :
                new ObjectParameter("from_date", typeof(string));
    
            var to_dateParameter = to_date != null ?
                new ObjectParameter("to_date", to_date) :
                new ObjectParameter("to_date", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_TotalReceiptOfMaterialsRequest_Result>("sp_TotalReceiptOfMaterialsRequest", storeParameter, from_dateParameter, to_dateParameter);
        }
    
        public virtual ObjectResult<SP_TotalRequestedMaterials_Result> SP_TotalRequestedMaterials(Nullable<long> store, string from_date, string to_date)
        {
            var storeParameter = store.HasValue ?
                new ObjectParameter("store", store) :
                new ObjectParameter("store", typeof(long));
    
            var from_dateParameter = from_date != null ?
                new ObjectParameter("from_date", from_date) :
                new ObjectParameter("from_date", typeof(string));
    
            var to_dateParameter = to_date != null ?
                new ObjectParameter("to_date", to_date) :
                new ObjectParameter("to_date", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_TotalRequestedMaterials_Result>("SP_TotalRequestedMaterials", storeParameter, from_dateParameter, to_dateParameter);
        }
    
        public virtual ObjectResult<SP_TotalTransferMaterials_Result> SP_TotalTransferMaterials(Nullable<long> store, string from_date, string to_date)
        {
            var storeParameter = store.HasValue ?
                new ObjectParameter("store", store) :
                new ObjectParameter("store", typeof(long));
    
            var from_dateParameter = from_date != null ?
                new ObjectParameter("from_date", from_date) :
                new ObjectParameter("from_date", typeof(string));
    
            var to_dateParameter = to_date != null ?
                new ObjectParameter("to_date", to_date) :
                new ObjectParameter("to_date", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_TotalTransferMaterials_Result>("SP_TotalTransferMaterials", storeParameter, from_dateParameter, to_dateParameter);
        }
    
        public virtual ObjectResult<SP_TransferMaterials_Result> SP_TransferMaterials(Nullable<long> transfer_Id)
        {
            var transfer_IdParameter = transfer_Id.HasValue ?
                new ObjectParameter("Transfer_Id", transfer_Id) :
                new ObjectParameter("Transfer_Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_TransferMaterials_Result>("SP_TransferMaterials", transfer_IdParameter);
        }
    
        public virtual ObjectResult<SP_TransferRequest_Result> SP_TransferRequest(Nullable<long> request_Id)
        {
            var request_IdParameter = request_Id.HasValue ?
                new ObjectParameter("Request_Id", request_Id) :
                new ObjectParameter("Request_Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_TransferRequest_Result>("SP_TransferRequest", request_IdParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int States_Delete(Nullable<long> stateID)
        {
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("States_Delete", stateIDParameter);
        }
    
        public virtual int States_Insert(string stateName, Nullable<long> countryID, Nullable<System.DateTime> lUD, Nullable<long> lUU, ObjectParameter stateID)
        {
            var stateNameParameter = stateName != null ?
                new ObjectParameter("StateName", stateName) :
                new ObjectParameter("StateName", typeof(string));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(long));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("States_Insert", stateNameParameter, countryIDParameter, lUDParameter, lUUParameter, stateID);
        }
    
        public virtual ObjectResult<States_SelectAll_Result> States_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<States_SelectAll_Result>("States_SelectAll");
        }
    
        public virtual ObjectResult<States_SelectOne_Result> States_SelectOne(Nullable<long> stateID)
        {
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<States_SelectOne_Result>("States_SelectOne", stateIDParameter);
        }
    
        public virtual ObjectResult<States_SelectOneGroup_Result> States_SelectOneGroup(Nullable<long> countryID)
        {
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<States_SelectOneGroup_Result>("States_SelectOneGroup", countryIDParameter);
        }
    
        public virtual int States_Update(Nullable<long> stateID, string stateName, Nullable<long> countryID, Nullable<System.DateTime> lUD, Nullable<long> lUU)
        {
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(long));
    
            var stateNameParameter = stateName != null ?
                new ObjectParameter("StateName", stateName) :
                new ObjectParameter("StateName", typeof(string));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(long));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("States_Update", stateIDParameter, stateNameParameter, countryIDParameter, lUDParameter, lUUParameter);
        }
    
        public virtual int StoresCompany_Delete(Nullable<long> storeId)
        {
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("StoreId", storeId) :
                new ObjectParameter("StoreId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("StoresCompany_Delete", storeIdParameter);
        }
    
        public virtual int StoresCompany_Insert(string storeBuilding, string storeName, string emplId, Nullable<long> branchID, Nullable<long> accountID, Nullable<bool> isDefult, string lUU, Nullable<System.DateTime> lUD, ObjectParameter storeId)
        {
            var storeBuildingParameter = storeBuilding != null ?
                new ObjectParameter("StoreBuilding", storeBuilding) :
                new ObjectParameter("StoreBuilding", typeof(string));
    
            var storeNameParameter = storeName != null ?
                new ObjectParameter("StoreName", storeName) :
                new ObjectParameter("StoreName", typeof(string));
    
            var emplIdParameter = emplId != null ?
                new ObjectParameter("EmplId", emplId) :
                new ObjectParameter("EmplId", typeof(string));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(long));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(long));
    
            var isDefultParameter = isDefult.HasValue ?
                new ObjectParameter("IsDefult", isDefult) :
                new ObjectParameter("IsDefult", typeof(bool));
    
            var lUUParameter = lUU != null ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(string));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("StoresCompany_Insert", storeBuildingParameter, storeNameParameter, emplIdParameter, branchIDParameter, accountIDParameter, isDefultParameter, lUUParameter, lUDParameter, storeId);
        }
    
        public virtual ObjectResult<StoresCompany_SelectAll_Result> StoresCompany_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StoresCompany_SelectAll_Result>("StoresCompany_SelectAll");
        }
    
        public virtual ObjectResult<StoresCompany_SelectOne_Result> StoresCompany_SelectOne(Nullable<long> storeId)
        {
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("StoreId", storeId) :
                new ObjectParameter("StoreId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StoresCompany_SelectOne_Result>("StoresCompany_SelectOne", storeIdParameter);
        }
    
        public virtual int StoresCompany_Update(Nullable<long> storeId, string storeBuilding, string storeName, string emplId, Nullable<long> branchID, Nullable<long> accountID, Nullable<bool> isDefult, string lUU, Nullable<System.DateTime> lUD)
        {
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("StoreId", storeId) :
                new ObjectParameter("StoreId", typeof(long));
    
            var storeBuildingParameter = storeBuilding != null ?
                new ObjectParameter("StoreBuilding", storeBuilding) :
                new ObjectParameter("StoreBuilding", typeof(string));
    
            var storeNameParameter = storeName != null ?
                new ObjectParameter("StoreName", storeName) :
                new ObjectParameter("StoreName", typeof(string));
    
            var emplIdParameter = emplId != null ?
                new ObjectParameter("EmplId", emplId) :
                new ObjectParameter("EmplId", typeof(string));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(long));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(long));
    
            var isDefultParameter = isDefult.HasValue ?
                new ObjectParameter("IsDefult", isDefult) :
                new ObjectParameter("IsDefult", typeof(bool));
    
            var lUUParameter = lUU != null ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(string));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("StoresCompany_Update", storeIdParameter, storeBuildingParameter, storeNameParameter, emplIdParameter, branchIDParameter, accountIDParameter, isDefultParameter, lUUParameter, lUDParameter);
        }
    
        public virtual int SupplierGroups_Delete(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SupplierGroups_Delete", iDParameter);
        }
    
        public virtual int SupplierGroups_Insert(string name, Nullable<bool> periorty, Nullable<decimal> discount, string lUU, Nullable<System.DateTime> lUD, ObjectParameter iD)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var periortyParameter = periorty.HasValue ?
                new ObjectParameter("Periorty", periorty) :
                new ObjectParameter("Periorty", typeof(bool));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var lUUParameter = lUU != null ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(string));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SupplierGroups_Insert", nameParameter, periortyParameter, discountParameter, lUUParameter, lUDParameter, iD);
        }
    
        public virtual ObjectResult<SupplierGroups_SelectAll_Result> SupplierGroups_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SupplierGroups_SelectAll_Result>("SupplierGroups_SelectAll");
        }
    
        public virtual ObjectResult<SupplierGroups_SelectOne_Result> SupplierGroups_SelectOne(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SupplierGroups_SelectOne_Result>("SupplierGroups_SelectOne", iDParameter);
        }
    
        public virtual int SupplierGroups_Update(Nullable<long> iD, string name, Nullable<bool> periorty, Nullable<decimal> discount, string lUU, Nullable<System.DateTime> lUD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var periortyParameter = periorty.HasValue ?
                new ObjectParameter("Periorty", periorty) :
                new ObjectParameter("Periorty", typeof(bool));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var lUUParameter = lUU != null ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(string));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SupplierGroups_Update", iDParameter, nameParameter, periortyParameter, discountParameter, lUUParameter, lUDParameter);
        }
    
        public virtual int SupplierInfo_Delete(Nullable<long> idCode)
        {
            var idCodeParameter = idCode.HasValue ?
                new ObjectParameter("IdCode", idCode) :
                new ObjectParameter("IdCode", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SupplierInfo_Delete", idCodeParameter);
        }
    
        public virtual int SupplierInfo_Detail_Delete(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SupplierInfo_Detail_Delete", iDParameter);
        }
    
        public virtual int SupplierInfo_Detail_DeleteSupplierGroup(Nullable<long> supplierID)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SupplierInfo_Detail_DeleteSupplierGroup", supplierIDParameter);
        }
    
        public virtual int SupplierInfo_Detail_Insert(string name, string tel, Nullable<long> supplierID, ObjectParameter iD)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var telParameter = tel != null ?
                new ObjectParameter("Tel", tel) :
                new ObjectParameter("Tel", typeof(string));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SupplierInfo_Detail_Insert", nameParameter, telParameter, supplierIDParameter, iD);
        }
    
        public virtual ObjectResult<SupplierInfo_Detail_SelectAll_Result> SupplierInfo_Detail_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SupplierInfo_Detail_SelectAll_Result>("SupplierInfo_Detail_SelectAll");
        }
    
        public virtual ObjectResult<SupplierInfo_Detail_SelectOne_Result> SupplierInfo_Detail_SelectOne(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SupplierInfo_Detail_SelectOne_Result>("SupplierInfo_Detail_SelectOne", iDParameter);
        }
    
        public virtual ObjectResult<SupplierInfo_Detail_SelectSupplierGroup_Result> SupplierInfo_Detail_SelectSupplierGroup(Nullable<long> supplierID)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SupplierInfo_Detail_SelectSupplierGroup_Result>("SupplierInfo_Detail_SelectSupplierGroup", supplierIDParameter);
        }
    
        public virtual int SupplierInfo_Detail_Update(Nullable<long> iD, string name, string tel, Nullable<long> supplierID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var telParameter = tel != null ?
                new ObjectParameter("Tel", tel) :
                new ObjectParameter("Tel", typeof(string));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SupplierInfo_Detail_Update", iDParameter, nameParameter, telParameter, supplierIDParameter);
        }
    
        public virtual int SupplierInfo_Detail_UpdateSupplierGroup(Nullable<long> supplierID, Nullable<long> supplierIDOld)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(long));
    
            var supplierIDOldParameter = supplierIDOld.HasValue ?
                new ObjectParameter("SupplierIDOld", supplierIDOld) :
                new ObjectParameter("SupplierIDOld", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SupplierInfo_Detail_UpdateSupplierGroup", supplierIDParameter, supplierIDOldParameter);
        }
    
        public virtual int SupplierInfo_Insert(Nullable<long> groupId, string name, string companyName, string nationNum, Nullable<long> nationalty, Nullable<long> isFogin, Nullable<System.DateTime> firstDate, Nullable<System.DateTime> lastDate, string tel, string homeTel, string cellPhone, string fax, string email, Nullable<long> country, Nullable<long> state, Nullable<long> tawon, string adress, string pstelCode, Nullable<decimal> firsAcount, Nullable<decimal> maxAcount, string notice, string category, string priorty, string comercialNum, string taxNum, string lUU, Nullable<System.DateTime> lUD, Nullable<long> cityID, Nullable<long> accountID, Nullable<System.DateTime> birthdate, Nullable<long> countryID, Nullable<long> userID, Nullable<long> branchID, string path, string code, ObjectParameter idCode)
        {
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var nationNumParameter = nationNum != null ?
                new ObjectParameter("NationNum", nationNum) :
                new ObjectParameter("NationNum", typeof(string));
    
            var nationaltyParameter = nationalty.HasValue ?
                new ObjectParameter("Nationalty", nationalty) :
                new ObjectParameter("Nationalty", typeof(long));
    
            var isFoginParameter = isFogin.HasValue ?
                new ObjectParameter("IsFogin", isFogin) :
                new ObjectParameter("IsFogin", typeof(long));
    
            var firstDateParameter = firstDate.HasValue ?
                new ObjectParameter("FirstDate", firstDate) :
                new ObjectParameter("FirstDate", typeof(System.DateTime));
    
            var lastDateParameter = lastDate.HasValue ?
                new ObjectParameter("LastDate", lastDate) :
                new ObjectParameter("LastDate", typeof(System.DateTime));
    
            var telParameter = tel != null ?
                new ObjectParameter("Tel", tel) :
                new ObjectParameter("Tel", typeof(string));
    
            var homeTelParameter = homeTel != null ?
                new ObjectParameter("homeTel", homeTel) :
                new ObjectParameter("homeTel", typeof(string));
    
            var cellPhoneParameter = cellPhone != null ?
                new ObjectParameter("CellPhone", cellPhone) :
                new ObjectParameter("CellPhone", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var countryParameter = country.HasValue ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(long));
    
            var stateParameter = state.HasValue ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(long));
    
            var tawonParameter = tawon.HasValue ?
                new ObjectParameter("Tawon", tawon) :
                new ObjectParameter("Tawon", typeof(long));
    
            var adressParameter = adress != null ?
                new ObjectParameter("Adress", adress) :
                new ObjectParameter("Adress", typeof(string));
    
            var pstelCodeParameter = pstelCode != null ?
                new ObjectParameter("PstelCode", pstelCode) :
                new ObjectParameter("PstelCode", typeof(string));
    
            var firsAcountParameter = firsAcount.HasValue ?
                new ObjectParameter("FirsAcount", firsAcount) :
                new ObjectParameter("FirsAcount", typeof(decimal));
    
            var maxAcountParameter = maxAcount.HasValue ?
                new ObjectParameter("MaxAcount", maxAcount) :
                new ObjectParameter("MaxAcount", typeof(decimal));
    
            var noticeParameter = notice != null ?
                new ObjectParameter("Notice", notice) :
                new ObjectParameter("Notice", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var priortyParameter = priorty != null ?
                new ObjectParameter("Priorty", priorty) :
                new ObjectParameter("Priorty", typeof(string));
    
            var comercialNumParameter = comercialNum != null ?
                new ObjectParameter("ComercialNum", comercialNum) :
                new ObjectParameter("ComercialNum", typeof(string));
    
            var taxNumParameter = taxNum != null ?
                new ObjectParameter("TaxNum", taxNum) :
                new ObjectParameter("TaxNum", typeof(string));
    
            var lUUParameter = lUU != null ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(string));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(long));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(long));
    
            var birthdateParameter = birthdate.HasValue ?
                new ObjectParameter("birthdate", birthdate) :
                new ObjectParameter("birthdate", typeof(System.DateTime));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(long));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(long));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SupplierInfo_Insert", groupIdParameter, nameParameter, companyNameParameter, nationNumParameter, nationaltyParameter, isFoginParameter, firstDateParameter, lastDateParameter, telParameter, homeTelParameter, cellPhoneParameter, faxParameter, emailParameter, countryParameter, stateParameter, tawonParameter, adressParameter, pstelCodeParameter, firsAcountParameter, maxAcountParameter, noticeParameter, categoryParameter, priortyParameter, comercialNumParameter, taxNumParameter, lUUParameter, lUDParameter, cityIDParameter, accountIDParameter, birthdateParameter, countryIDParameter, userIDParameter, branchIDParameter, pathParameter, codeParameter, idCode);
        }
    
        public virtual ObjectResult<SupplierInfo_SelectAll_Result> SupplierInfo_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SupplierInfo_SelectAll_Result>("SupplierInfo_SelectAll");
        }
    
        public virtual ObjectResult<SupplierInfo_SelectOne_Result> SupplierInfo_SelectOne(Nullable<long> idCode)
        {
            var idCodeParameter = idCode.HasValue ?
                new ObjectParameter("IdCode", idCode) :
                new ObjectParameter("IdCode", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SupplierInfo_SelectOne_Result>("SupplierInfo_SelectOne", idCodeParameter);
        }
    
        public virtual int SupplierInfo_Update(Nullable<long> idCode, Nullable<long> groupId, string name, string companyName, string nationNum, Nullable<long> nationalty, Nullable<long> isFogin, Nullable<System.DateTime> firstDate, Nullable<System.DateTime> lastDate, string tel, string homeTel, string cellPhone, string fax, string email, Nullable<long> country, Nullable<long> state, Nullable<long> tawon, string adress, string pstelCode, Nullable<decimal> firsAcount, Nullable<decimal> maxAcount, string notice, string category, string priorty, string comercialNum, string taxNum, string lUU, Nullable<System.DateTime> lUD, Nullable<long> cityID, Nullable<long> accountID, Nullable<System.DateTime> birthdate, Nullable<long> countryID, Nullable<long> userID, Nullable<long> branchID, string path, string code)
        {
            var idCodeParameter = idCode.HasValue ?
                new ObjectParameter("IdCode", idCode) :
                new ObjectParameter("IdCode", typeof(long));
    
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var nationNumParameter = nationNum != null ?
                new ObjectParameter("NationNum", nationNum) :
                new ObjectParameter("NationNum", typeof(string));
    
            var nationaltyParameter = nationalty.HasValue ?
                new ObjectParameter("Nationalty", nationalty) :
                new ObjectParameter("Nationalty", typeof(long));
    
            var isFoginParameter = isFogin.HasValue ?
                new ObjectParameter("IsFogin", isFogin) :
                new ObjectParameter("IsFogin", typeof(long));
    
            var firstDateParameter = firstDate.HasValue ?
                new ObjectParameter("FirstDate", firstDate) :
                new ObjectParameter("FirstDate", typeof(System.DateTime));
    
            var lastDateParameter = lastDate.HasValue ?
                new ObjectParameter("LastDate", lastDate) :
                new ObjectParameter("LastDate", typeof(System.DateTime));
    
            var telParameter = tel != null ?
                new ObjectParameter("Tel", tel) :
                new ObjectParameter("Tel", typeof(string));
    
            var homeTelParameter = homeTel != null ?
                new ObjectParameter("homeTel", homeTel) :
                new ObjectParameter("homeTel", typeof(string));
    
            var cellPhoneParameter = cellPhone != null ?
                new ObjectParameter("CellPhone", cellPhone) :
                new ObjectParameter("CellPhone", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var countryParameter = country.HasValue ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(long));
    
            var stateParameter = state.HasValue ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(long));
    
            var tawonParameter = tawon.HasValue ?
                new ObjectParameter("Tawon", tawon) :
                new ObjectParameter("Tawon", typeof(long));
    
            var adressParameter = adress != null ?
                new ObjectParameter("Adress", adress) :
                new ObjectParameter("Adress", typeof(string));
    
            var pstelCodeParameter = pstelCode != null ?
                new ObjectParameter("PstelCode", pstelCode) :
                new ObjectParameter("PstelCode", typeof(string));
    
            var firsAcountParameter = firsAcount.HasValue ?
                new ObjectParameter("FirsAcount", firsAcount) :
                new ObjectParameter("FirsAcount", typeof(decimal));
    
            var maxAcountParameter = maxAcount.HasValue ?
                new ObjectParameter("MaxAcount", maxAcount) :
                new ObjectParameter("MaxAcount", typeof(decimal));
    
            var noticeParameter = notice != null ?
                new ObjectParameter("Notice", notice) :
                new ObjectParameter("Notice", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var priortyParameter = priorty != null ?
                new ObjectParameter("Priorty", priorty) :
                new ObjectParameter("Priorty", typeof(string));
    
            var comercialNumParameter = comercialNum != null ?
                new ObjectParameter("ComercialNum", comercialNum) :
                new ObjectParameter("ComercialNum", typeof(string));
    
            var taxNumParameter = taxNum != null ?
                new ObjectParameter("TaxNum", taxNum) :
                new ObjectParameter("TaxNum", typeof(string));
    
            var lUUParameter = lUU != null ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(string));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(long));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(long));
    
            var birthdateParameter = birthdate.HasValue ?
                new ObjectParameter("birthdate", birthdate) :
                new ObjectParameter("birthdate", typeof(System.DateTime));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(long));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(long));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SupplierInfo_Update", idCodeParameter, groupIdParameter, nameParameter, companyNameParameter, nationNumParameter, nationaltyParameter, isFoginParameter, firstDateParameter, lastDateParameter, telParameter, homeTelParameter, cellPhoneParameter, faxParameter, emailParameter, countryParameter, stateParameter, tawonParameter, adressParameter, pstelCodeParameter, firsAcountParameter, maxAcountParameter, noticeParameter, categoryParameter, priortyParameter, comercialNumParameter, taxNumParameter, lUUParameter, lUDParameter, cityIDParameter, accountIDParameter, birthdateParameter, countryIDParameter, userIDParameter, branchIDParameter, pathParameter, codeParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> SupplierUnite_SelectASName()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("SupplierUnite_SelectASName");
        }
    
        public virtual int TerminationReasons_Delete(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TerminationReasons_Delete", iDParameter);
        }
    
        public virtual int TerminationReasons_Insert(string reason, Nullable<System.DateTime> lUD, Nullable<long> lUU, ObjectParameter iD)
        {
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TerminationReasons_Insert", reasonParameter, lUDParameter, lUUParameter, iD);
        }
    
        public virtual ObjectResult<TerminationReasons_SelectAll_Result> TerminationReasons_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TerminationReasons_SelectAll_Result>("TerminationReasons_SelectAll");
        }
    
        public virtual ObjectResult<TerminationReasons_SelectOne_Result> TerminationReasons_SelectOne(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TerminationReasons_SelectOne_Result>("TerminationReasons_SelectOne", iDParameter);
        }
    
        public virtual int TerminationReasons_Update(Nullable<long> iD, string reason, Nullable<System.DateTime> lUD, Nullable<long> lUU)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TerminationReasons_Update", iDParameter, reasonParameter, lUDParameter, lUUParameter);
        }
    
        public virtual int UnitModels_Delete(Nullable<long> unitModelID)
        {
            var unitModelIDParameter = unitModelID.HasValue ?
                new ObjectParameter("UnitModelID", unitModelID) :
                new ObjectParameter("UnitModelID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UnitModels_Delete", unitModelIDParameter);
        }
    
        public virtual int UnitModels_Insert(string unitModelName, Nullable<long> basicUnitID, Nullable<long> inventoryUnitID, Nullable<long> salesUnitID, Nullable<long> purchaseUnitID, Nullable<System.DateTime> lUD, Nullable<long> lUU, Nullable<bool> isDefault, ObjectParameter unitModelID)
        {
            var unitModelNameParameter = unitModelName != null ?
                new ObjectParameter("UnitModelName", unitModelName) :
                new ObjectParameter("UnitModelName", typeof(string));
    
            var basicUnitIDParameter = basicUnitID.HasValue ?
                new ObjectParameter("BasicUnitID", basicUnitID) :
                new ObjectParameter("BasicUnitID", typeof(long));
    
            var inventoryUnitIDParameter = inventoryUnitID.HasValue ?
                new ObjectParameter("InventoryUnitID", inventoryUnitID) :
                new ObjectParameter("InventoryUnitID", typeof(long));
    
            var salesUnitIDParameter = salesUnitID.HasValue ?
                new ObjectParameter("SalesUnitID", salesUnitID) :
                new ObjectParameter("SalesUnitID", typeof(long));
    
            var purchaseUnitIDParameter = purchaseUnitID.HasValue ?
                new ObjectParameter("PurchaseUnitID", purchaseUnitID) :
                new ObjectParameter("PurchaseUnitID", typeof(long));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            var isDefaultParameter = isDefault.HasValue ?
                new ObjectParameter("IsDefault", isDefault) :
                new ObjectParameter("IsDefault", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UnitModels_Insert", unitModelNameParameter, basicUnitIDParameter, inventoryUnitIDParameter, salesUnitIDParameter, purchaseUnitIDParameter, lUDParameter, lUUParameter, isDefaultParameter, unitModelID);
        }
    
        public virtual ObjectResult<UnitModels_SelectAll_Result> UnitModels_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UnitModels_SelectAll_Result>("UnitModels_SelectAll");
        }
    
        public virtual ObjectResult<UnitModels_SelectOne_Result> UnitModels_SelectOne(Nullable<long> unitModelID)
        {
            var unitModelIDParameter = unitModelID.HasValue ?
                new ObjectParameter("UnitModelID", unitModelID) :
                new ObjectParameter("UnitModelID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UnitModels_SelectOne_Result>("UnitModels_SelectOne", unitModelIDParameter);
        }
    
        public virtual int UnitModels_Update(Nullable<long> unitModelID, string unitModelName, Nullable<long> basicUnitID, Nullable<long> inventoryUnitID, Nullable<long> salesUnitID, Nullable<long> purchaseUnitID, Nullable<System.DateTime> lUD, Nullable<long> lUU, Nullable<bool> isDefault)
        {
            var unitModelIDParameter = unitModelID.HasValue ?
                new ObjectParameter("UnitModelID", unitModelID) :
                new ObjectParameter("UnitModelID", typeof(long));
    
            var unitModelNameParameter = unitModelName != null ?
                new ObjectParameter("UnitModelName", unitModelName) :
                new ObjectParameter("UnitModelName", typeof(string));
    
            var basicUnitIDParameter = basicUnitID.HasValue ?
                new ObjectParameter("BasicUnitID", basicUnitID) :
                new ObjectParameter("BasicUnitID", typeof(long));
    
            var inventoryUnitIDParameter = inventoryUnitID.HasValue ?
                new ObjectParameter("InventoryUnitID", inventoryUnitID) :
                new ObjectParameter("InventoryUnitID", typeof(long));
    
            var salesUnitIDParameter = salesUnitID.HasValue ?
                new ObjectParameter("SalesUnitID", salesUnitID) :
                new ObjectParameter("SalesUnitID", typeof(long));
    
            var purchaseUnitIDParameter = purchaseUnitID.HasValue ?
                new ObjectParameter("PurchaseUnitID", purchaseUnitID) :
                new ObjectParameter("PurchaseUnitID", typeof(long));
    
            var lUDParameter = lUD.HasValue ?
                new ObjectParameter("LUD", lUD) :
                new ObjectParameter("LUD", typeof(System.DateTime));
    
            var lUUParameter = lUU.HasValue ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(long));
    
            var isDefaultParameter = isDefault.HasValue ?
                new ObjectParameter("IsDefault", isDefault) :
                new ObjectParameter("IsDefault", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UnitModels_Update", unitModelIDParameter, unitModelNameParameter, basicUnitIDParameter, inventoryUnitIDParameter, salesUnitIDParameter, purchaseUnitIDParameter, lUDParameter, lUUParameter, isDefaultParameter);
        }
    
        public virtual int UpdateMAccountantTree(Nullable<long> expId, Nullable<long> idParant, Nullable<bool> isActive, string lUU)
        {
            var expIdParameter = expId.HasValue ?
                new ObjectParameter("ExpId", expId) :
                new ObjectParameter("ExpId", typeof(long));
    
            var idParantParameter = idParant.HasValue ?
                new ObjectParameter("IdParant", idParant) :
                new ObjectParameter("IdParant", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lUUParameter = lUU != null ?
                new ObjectParameter("LUU", lUU) :
                new ObjectParameter("LUU", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateMAccountantTree", expIdParameter, idParantParameter, isActiveParameter, lUUParameter);
        }
    
        public virtual ObjectResult<User_SelectPermission_Result> User_SelectPermission(string emplIdCode, string formName)
        {
            var emplIdCodeParameter = emplIdCode != null ?
                new ObjectParameter("EmplIdCode", emplIdCode) :
                new ObjectParameter("EmplIdCode", typeof(string));
    
            var formNameParameter = formName != null ?
                new ObjectParameter("FormName", formName) :
                new ObjectParameter("FormName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<User_SelectPermission_Result>("User_SelectPermission", emplIdCodeParameter, formNameParameter);
        }
    
        public virtual ObjectResult<UserLogIn_Result> UserLogIn(string userName, string passWord)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passWordParameter = passWord != null ?
                new ObjectParameter("PassWord", passWord) :
                new ObjectParameter("PassWord", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserLogIn_Result>("UserLogIn", userNameParameter, passWordParameter);
        }
    
        public virtual ObjectResult<Usp_Clinic_GetDoctorOnleyBy_DepartMentID_Result> Usp_Clinic_GetDoctorOnleyBy_DepartMentID(Nullable<long> departmentID)
        {
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_Clinic_GetDoctorOnleyBy_DepartMentID_Result>("Usp_Clinic_GetDoctorOnleyBy_DepartMentID", departmentIDParameter);
        }
    
        public virtual int ApplyConstraint(string tableName, string constraintName, string schemaName)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var constraintNameParameter = constraintName != null ?
                new ObjectParameter("ConstraintName", constraintName) :
                new ObjectParameter("ConstraintName", typeof(string));
    
            var schemaNameParameter = schemaName != null ?
                new ObjectParameter("SchemaName", schemaName) :
                new ObjectParameter("SchemaName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ApplyConstraint", tableNameParameter, constraintNameParameter, schemaNameParameter);
        }
    
        public virtual int AssertEquals(string message)
        {
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AssertEquals", messageParameter);
        }
    
        public virtual int AssertEqualsString(string expected, string actual, string message)
        {
            var expectedParameter = expected != null ?
                new ObjectParameter("Expected", expected) :
                new ObjectParameter("Expected", typeof(string));
    
            var actualParameter = actual != null ?
                new ObjectParameter("Actual", actual) :
                new ObjectParameter("Actual", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AssertEqualsString", expectedParameter, actualParameter, messageParameter);
        }
    
        public virtual int AssertEqualsTable(string expected, string actual, string failMsg)
        {
            var expectedParameter = expected != null ?
                new ObjectParameter("Expected", expected) :
                new ObjectParameter("Expected", typeof(string));
    
            var actualParameter = actual != null ?
                new ObjectParameter("Actual", actual) :
                new ObjectParameter("Actual", typeof(string));
    
            var failMsgParameter = failMsg != null ?
                new ObjectParameter("FailMsg", failMsg) :
                new ObjectParameter("FailMsg", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AssertEqualsTable", expectedParameter, actualParameter, failMsgParameter);
        }
    
        public virtual int AssertObjectExists(string objectName, string message)
        {
            var objectNameParameter = objectName != null ?
                new ObjectParameter("ObjectName", objectName) :
                new ObjectParameter("ObjectName", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AssertObjectExists", objectNameParameter, messageParameter);
        }
    
        public virtual int DefaultResultFormatter()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DefaultResultFormatter");
        }
    
        public virtual int DropClass(string className)
        {
            var classNameParameter = className != null ?
                new ObjectParameter("ClassName", className) :
                new ObjectParameter("ClassName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DropClass", classNameParameter);
        }
    
        public virtual int Fail(string message0, string message1, string message2, string message3, string message4, string message5, string message6, string message7, string message8, string message9)
        {
            var message0Parameter = message0 != null ?
                new ObjectParameter("Message0", message0) :
                new ObjectParameter("Message0", typeof(string));
    
            var message1Parameter = message1 != null ?
                new ObjectParameter("Message1", message1) :
                new ObjectParameter("Message1", typeof(string));
    
            var message2Parameter = message2 != null ?
                new ObjectParameter("Message2", message2) :
                new ObjectParameter("Message2", typeof(string));
    
            var message3Parameter = message3 != null ?
                new ObjectParameter("Message3", message3) :
                new ObjectParameter("Message3", typeof(string));
    
            var message4Parameter = message4 != null ?
                new ObjectParameter("Message4", message4) :
                new ObjectParameter("Message4", typeof(string));
    
            var message5Parameter = message5 != null ?
                new ObjectParameter("Message5", message5) :
                new ObjectParameter("Message5", typeof(string));
    
            var message6Parameter = message6 != null ?
                new ObjectParameter("Message6", message6) :
                new ObjectParameter("Message6", typeof(string));
    
            var message7Parameter = message7 != null ?
                new ObjectParameter("Message7", message7) :
                new ObjectParameter("Message7", typeof(string));
    
            var message8Parameter = message8 != null ?
                new ObjectParameter("Message8", message8) :
                new ObjectParameter("Message8", typeof(string));
    
            var message9Parameter = message9 != null ?
                new ObjectParameter("Message9", message9) :
                new ObjectParameter("Message9", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Fail", message0Parameter, message1Parameter, message2Parameter, message3Parameter, message4Parameter, message5Parameter, message6Parameter, message7Parameter, message8Parameter, message9Parameter);
        }
    
        public virtual int FakeTable(string tableName, string schemaName, Nullable<bool> identity, Nullable<bool> computedColumns, Nullable<bool> defaults)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var schemaNameParameter = schemaName != null ?
                new ObjectParameter("SchemaName", schemaName) :
                new ObjectParameter("SchemaName", typeof(string));
    
            var identityParameter = identity.HasValue ?
                new ObjectParameter("Identity", identity) :
                new ObjectParameter("Identity", typeof(bool));
    
            var computedColumnsParameter = computedColumns.HasValue ?
                new ObjectParameter("ComputedColumns", computedColumns) :
                new ObjectParameter("ComputedColumns", typeof(bool));
    
            var defaultsParameter = defaults.HasValue ?
                new ObjectParameter("Defaults", defaults) :
                new ObjectParameter("Defaults", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FakeTable", tableNameParameter, schemaNameParameter, identityParameter, computedColumnsParameter, defaultsParameter);
        }
    
        public virtual int GetNewTranName(ObjectParameter tranName)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetNewTranName", tranName);
        }
    
        public virtual int LogCapturedOutput(string text)
        {
            var textParameter = text != null ?
                new ObjectParameter("text", text) :
                new ObjectParameter("text", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LogCapturedOutput", textParameter);
        }
    
        public virtual int NewTestClass(string className)
        {
            var classNameParameter = className != null ?
                new ObjectParameter("ClassName", className) :
                new ObjectParameter("ClassName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NewTestClass", classNameParameter);
        }
    
        public virtual int NullTestResultFormatter()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NullTestResultFormatter");
        }
    
        public virtual int Private_ApplyCheckConstraint(Nullable<int> constraintObjectId)
        {
            var constraintObjectIdParameter = constraintObjectId.HasValue ?
                new ObjectParameter("ConstraintObjectId", constraintObjectId) :
                new ObjectParameter("ConstraintObjectId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Private_ApplyCheckConstraint", constraintObjectIdParameter);
        }
    
        public virtual int Private_ApplyForeignKeyConstraint(Nullable<int> constraintObjectId)
        {
            var constraintObjectIdParameter = constraintObjectId.HasValue ?
                new ObjectParameter("ConstraintObjectId", constraintObjectId) :
                new ObjectParameter("ConstraintObjectId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Private_ApplyForeignKeyConstraint", constraintObjectIdParameter);
        }
    
        public virtual int Private_CleanTestResult()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Private_CleanTestResult");
        }
    
        public virtual int Private_CreateFakeOfTable(string schemaName, string tableName, string newNameOfOriginalTable, Nullable<bool> identity, Nullable<bool> computedColumns, Nullable<bool> defaults)
        {
            var schemaNameParameter = schemaName != null ?
                new ObjectParameter("SchemaName", schemaName) :
                new ObjectParameter("SchemaName", typeof(string));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var newNameOfOriginalTableParameter = newNameOfOriginalTable != null ?
                new ObjectParameter("NewNameOfOriginalTable", newNameOfOriginalTable) :
                new ObjectParameter("NewNameOfOriginalTable", typeof(string));
    
            var identityParameter = identity.HasValue ?
                new ObjectParameter("Identity", identity) :
                new ObjectParameter("Identity", typeof(bool));
    
            var computedColumnsParameter = computedColumns.HasValue ?
                new ObjectParameter("ComputedColumns", computedColumns) :
                new ObjectParameter("ComputedColumns", typeof(bool));
    
            var defaultsParameter = defaults.HasValue ?
                new ObjectParameter("Defaults", defaults) :
                new ObjectParameter("Defaults", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Private_CreateFakeOfTable", schemaNameParameter, tableNameParameter, newNameOfOriginalTableParameter, identityParameter, computedColumnsParameter, defaultsParameter);
        }
    
        public virtual int Private_CreateProcedureSpy(Nullable<int> procedureObjectId, string originalProcedureName, string logTableName, string commandToExecute)
        {
            var procedureObjectIdParameter = procedureObjectId.HasValue ?
                new ObjectParameter("ProcedureObjectId", procedureObjectId) :
                new ObjectParameter("ProcedureObjectId", typeof(int));
    
            var originalProcedureNameParameter = originalProcedureName != null ?
                new ObjectParameter("OriginalProcedureName", originalProcedureName) :
                new ObjectParameter("OriginalProcedureName", typeof(string));
    
            var logTableNameParameter = logTableName != null ?
                new ObjectParameter("LogTableName", logTableName) :
                new ObjectParameter("LogTableName", typeof(string));
    
            var commandToExecuteParameter = commandToExecute != null ?
                new ObjectParameter("CommandToExecute", commandToExecute) :
                new ObjectParameter("CommandToExecute", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Private_CreateProcedureSpy", procedureObjectIdParameter, originalProcedureNameParameter, logTableNameParameter, commandToExecuteParameter);
        }
    
        public virtual int Private_DisallowOverwritingNonTestSchema(string className)
        {
            var classNameParameter = className != null ?
                new ObjectParameter("ClassName", className) :
                new ObjectParameter("ClassName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Private_DisallowOverwritingNonTestSchema", classNameParameter);
        }
    
        public virtual int Private_MarkObjectBeforeRename(string schemaName, string originalName)
        {
            var schemaNameParameter = schemaName != null ?
                new ObjectParameter("SchemaName", schemaName) :
                new ObjectParameter("SchemaName", typeof(string));
    
            var originalNameParameter = originalName != null ?
                new ObjectParameter("OriginalName", originalName) :
                new ObjectParameter("OriginalName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Private_MarkObjectBeforeRename", schemaNameParameter, originalNameParameter);
        }
    
        public virtual int Private_MarkSchemaAsTestClass(string quotedClassName)
        {
            var quotedClassNameParameter = quotedClassName != null ?
                new ObjectParameter("QuotedClassName", quotedClassName) :
                new ObjectParameter("QuotedClassName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Private_MarkSchemaAsTestClass", quotedClassNameParameter);
        }
    
        public virtual int Private_OutputTestResults(string testResultFormatter)
        {
            var testResultFormatterParameter = testResultFormatter != null ?
                new ObjectParameter("TestResultFormatter", testResultFormatter) :
                new ObjectParameter("TestResultFormatter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Private_OutputTestResults", testResultFormatterParameter);
        }
    
        public virtual int Private_Print(string message, Nullable<int> severity)
        {
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            var severityParameter = severity.HasValue ?
                new ObjectParameter("Severity", severity) :
                new ObjectParameter("Severity", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Private_Print", messageParameter, severityParameter);
        }
    
        public virtual ObjectResult<string> Private_PrintXML(string message)
        {
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Private_PrintXML", messageParameter);
        }
    
        public virtual int Private_Run(string testName, string testResultFormatter)
        {
            var testNameParameter = testName != null ?
                new ObjectParameter("TestName", testName) :
                new ObjectParameter("TestName", typeof(string));
    
            var testResultFormatterParameter = testResultFormatter != null ?
                new ObjectParameter("TestResultFormatter", testResultFormatter) :
                new ObjectParameter("TestResultFormatter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Private_Run", testNameParameter, testResultFormatterParameter);
        }
    
        public virtual int Private_RunAll(string testResultFormatter)
        {
            var testResultFormatterParameter = testResultFormatter != null ?
                new ObjectParameter("TestResultFormatter", testResultFormatter) :
                new ObjectParameter("TestResultFormatter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Private_RunAll", testResultFormatterParameter);
        }
    
        public virtual int Private_RunTestClass(string testClassName)
        {
            var testClassNameParameter = testClassName != null ?
                new ObjectParameter("TestClassName", testClassName) :
                new ObjectParameter("TestClassName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Private_RunTestClass", testClassNameParameter);
        }
    
        public virtual int Private_SaveTestNameForSession(string testName)
        {
            var testNameParameter = testName != null ?
                new ObjectParameter("TestName", testName) :
                new ObjectParameter("TestName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Private_SaveTestNameForSession", testNameParameter);
        }
    
        public virtual int Private_ValidateFakeTableParameters(string schemaName, string origTableName, string origSchemaName)
        {
            var schemaNameParameter = schemaName != null ?
                new ObjectParameter("SchemaName", schemaName) :
                new ObjectParameter("SchemaName", typeof(string));
    
            var origTableNameParameter = origTableName != null ?
                new ObjectParameter("OrigTableName", origTableName) :
                new ObjectParameter("OrigTableName", typeof(string));
    
            var origSchemaNameParameter = origSchemaName != null ?
                new ObjectParameter("OrigSchemaName", origSchemaName) :
                new ObjectParameter("OrigSchemaName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Private_ValidateFakeTableParameters", schemaNameParameter, origTableNameParameter, origSchemaNameParameter);
        }
    
        public virtual int Private_ValidateProcedureCanBeUsedWithSpyProcedure(string procedureName)
        {
            var procedureNameParameter = procedureName != null ?
                new ObjectParameter("ProcedureName", procedureName) :
                new ObjectParameter("ProcedureName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Private_ValidateProcedureCanBeUsedWithSpyProcedure", procedureNameParameter);
        }
    
        public virtual int Run(string testName)
        {
            var testNameParameter = testName != null ?
                new ObjectParameter("TestName", testName) :
                new ObjectParameter("TestName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Run", testNameParameter);
        }
    
        public virtual int RunAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RunAll");
        }
    
        public virtual int RunTest(string testName)
        {
            var testNameParameter = testName != null ?
                new ObjectParameter("TestName", testName) :
                new ObjectParameter("TestName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RunTest", testNameParameter);
        }
    
        public virtual int RunTestClass(string testClassName)
        {
            var testClassNameParameter = testClassName != null ?
                new ObjectParameter("TestClassName", testClassName) :
                new ObjectParameter("TestClassName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RunTestClass", testClassNameParameter);
        }
    
        public virtual int RunWithNullResults(string testName)
        {
            var testNameParameter = testName != null ?
                new ObjectParameter("TestName", testName) :
                new ObjectParameter("TestName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RunWithNullResults", testNameParameter);
        }
    
        public virtual int RunWithXmlResults(string testName)
        {
            var testNameParameter = testName != null ?
                new ObjectParameter("TestName", testName) :
                new ObjectParameter("TestName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RunWithXmlResults", testNameParameter);
        }
    
        public virtual int SetTestResultFormatter(string formatter)
        {
            var formatterParameter = formatter != null ?
                new ObjectParameter("Formatter", formatter) :
                new ObjectParameter("Formatter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetTestResultFormatter", formatterParameter);
        }
    
        public virtual int StubRecord(string snTableName, Nullable<long> bintObjId)
        {
            var snTableNameParameter = snTableName != null ?
                new ObjectParameter("SnTableName", snTableName) :
                new ObjectParameter("SnTableName", typeof(string));
    
            var bintObjIdParameter = bintObjId.HasValue ?
                new ObjectParameter("BintObjId", bintObjId) :
                new ObjectParameter("BintObjId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("StubRecord", snTableNameParameter, bintObjIdParameter);
        }
    
        public virtual int TableCompare(string expected, string actual, ObjectParameter txt)
        {
            var expectedParameter = expected != null ?
                new ObjectParameter("Expected", expected) :
                new ObjectParameter("Expected", typeof(string));
    
            var actualParameter = actual != null ?
                new ObjectParameter("Actual", actual) :
                new ObjectParameter("Actual", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TableCompare", expectedParameter, actualParameter, txt);
        }
    
        public virtual int Uninstall()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Uninstall");
        }
    
        public virtual int XmlResultFormatter()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("XmlResultFormatter");
        }
    }
}
